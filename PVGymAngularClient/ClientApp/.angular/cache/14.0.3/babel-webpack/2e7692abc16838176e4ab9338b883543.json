{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, asapScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, isDataSource } from '@angular/cdk/collections';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\n\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\n\nclass FixedSizeVirtualScrollStrategy {\n  /**\n   * @param {?} itemSize The size of the items in the virtually scrolling list.\n   * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize, minBufferPx, maxBufferPx) {\n    this._scrolledIndexChange = new Subject();\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /**\n     * The attached viewport.\n     */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param {?} viewport The viewport to attach this strategy to.\n   * @return {?}\n   */\n\n\n  attach(viewport) {\n    this._viewport = viewport;\n\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /**\n   * Detaches this scroll strategy from the currently attached viewport.\n   * @return {?}\n   */\n\n\n  detach() {\n    this._scrolledIndexChange.complete();\n\n    this._viewport = null;\n  }\n  /**\n   * Update the item size and buffer size.\n   * @param {?} itemSize The size of the items in the virtually scrolling list.\n   * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   * @return {?}\n   */\n\n\n  updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n    if (maxBufferPx < minBufferPx) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n\n\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n\n\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n\n\n  onContentRendered() {}\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n\n\n  onRenderedOffsetChanged() {}\n  /**\n   * Scroll to the offset for the given index.\n   * @param {?} index The index of the element to scroll to.\n   * @param {?} behavior The ScrollBehavior to use when scrolling.\n   * @return {?}\n   */\n\n\n  scrollToIndex(index, behavior) {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n  /**\n   * Update the viewport's total content size.\n   * @private\n   * @return {?}\n   */\n\n\n  _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n  /**\n   * Update the viewport's rendered range.\n   * @private\n   * @return {?}\n   */\n\n\n  _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const scrollOffset = this._viewport.measureScrollOffset();\n    /** @type {?} */\n\n\n    const firstVisibleIndex = scrollOffset / this._itemSize;\n    /** @type {?} */\n\n    const renderedRange = this._viewport.getRenderedRange();\n    /** @type {?} */\n\n\n    const newRange = {\n      start: renderedRange.start,\n      end: renderedRange.end\n    };\n    /** @type {?} */\n\n    const viewportSize = this._viewport.getViewportSize();\n    /** @type {?} */\n\n\n    const dataLength = this._viewport.getDataLength();\n    /** @type {?} */\n\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      /** @type {?} */\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      /** @type {?} */\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        /** @type {?} */\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\n\n\nclass CdkFixedSizeVirtualScroll {\n  constructor() {\n    this._itemSize = 20;\n    this._minBufferPx = 100;\n    this._maxBufferPx = 200;\n    /**\n     * The scroll strategy used by this directive.\n     */\n\n    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n  /**\n   * The size of the items in the list (in pixels).\n   * @return {?}\n   */\n\n\n  get itemSize() {\n    return this._itemSize;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set itemSize(value) {\n    this._itemSize = coerceNumberProperty(value);\n  }\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   * @return {?}\n   */\n\n\n  get minBufferPx() {\n    return this._minBufferPx;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set minBufferPx(value) {\n    this._minBufferPx = coerceNumberProperty(value);\n  }\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   * @return {?}\n   */\n\n\n  get maxBufferPx() {\n    return this._maxBufferPx;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set maxBufferPx(value) {\n    this._maxBufferPx = coerceNumberProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n\n}\n\nCdkFixedSizeVirtualScroll.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n    providers: [{\n      provide: VIRTUAL_SCROLL_STRATEGY,\n      useFactory: _fixedSizeVirtualScrollStrategyFactory,\n      deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n    }]\n  }]\n}];\nCdkFixedSizeVirtualScroll.propDecorators = {\n  itemSize: [{\n    type: Input\n  }],\n  minBufferPx: [{\n    type: Input\n  }],\n  maxBufferPx: [{\n    type: Input\n  }]\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\n\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nclass ScrollDispatcher {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  constructor(_ngZone, _platform) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * Subject for notifying that a registered scrollable reference element has been scrolled.\n     */\n\n    this._scrolled = new Subject();\n    /**\n     * Keeps track of the global `scroll` and `resize` subscriptions.\n     */\n\n    this._globalSubscription = null;\n    /**\n     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n     */\n\n    this._scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n\n    this.scrollContainers = new Map();\n  }\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param {?} scrollable Scrollable instance to be registered.\n   * @return {?}\n   */\n\n\n  register(scrollable) {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n    }\n  }\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param {?} scrollable Scrollable instance to be deregistered.\n   * @return {?}\n   */\n\n\n  deregister(scrollable) {\n    /** @type {?} */\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   * @param {?=} auditTimeInMs\n   * @return {?}\n   */\n\n\n  scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n    if (!this._platform.isBrowser) {\n      return of();\n    }\n\n    return new Observable(observer => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      } // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n\n      /** @type {?} */\n\n\n      const subscription = auditTimeInMs > 0 ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);\n      this._scrolledCount++;\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n\n    this._scrolled.complete();\n  }\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param {?} elementRef Element whose ancestors to listen for.\n   * @param {?=} auditTimeInMs Time to throttle the scroll events.\n   * @return {?}\n   */\n\n\n  ancestorScrolled(elementRef, auditTimeInMs) {\n    /** @type {?} */\n    const ancestors = this.getAncestorScrollContainers(elementRef);\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n  /**\n   * Returns all registered Scrollables that contain the provided element.\n   * @param {?} elementRef\n   * @return {?}\n   */\n\n\n  getAncestorScrollContainers(elementRef) {\n    /** @type {?} */\n    const scrollingContainers = [];\n    this.scrollContainers.forEach((_subscription, scrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n    return scrollingContainers;\n  }\n  /**\n   * Returns true if the element is contained within the provided Scrollable.\n   * @private\n   * @param {?} scrollable\n   * @param {?} elementRef\n   * @return {?}\n   */\n\n\n  _scrollableContainsElement(scrollable, elementRef) {\n    /** @type {?} */\n    let element = elementRef.nativeElement;\n    /** @type {?} */\n\n    let scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n\n    do {\n      if (element == scrollableElement) {\n        return true;\n      }\n    } while (element =\n    /** @type {?} */\n    element.parentElement);\n\n    return false;\n  }\n  /**\n   * Sets up the global scroll listeners.\n   * @private\n   * @return {?}\n   */\n\n\n  _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n  /**\n   * Cleans up the global scroll listener.\n   * @private\n   * @return {?}\n   */\n\n\n  _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n\n      this._globalSubscription = null;\n    }\n  }\n\n}\n\nScrollDispatcher.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\n\nScrollDispatcher.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Platform\n}];\n/** @nocollapse */\n\n\nScrollDispatcher.ngInjectableDef = defineInjectable({\n  factory: function ScrollDispatcher_Factory() {\n    return new ScrollDispatcher(inject(NgZone), inject(Platform));\n  },\n  token: ScrollDispatcher,\n  providedIn: \"root\"\n});\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\n\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\n\n\nconst SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\nclass CdkScrollable {\n  /**\n   * @param {?} elementRef\n   * @param {?} scrollDispatcher\n   * @param {?} ngZone\n   * @param {?=} dir\n   */\n  constructor(elementRef, scrollDispatcher, ngZone, dir) {\n    this.elementRef = elementRef;\n    this.scrollDispatcher = scrollDispatcher;\n    this.ngZone = ngZone;\n    this.dir = dir;\n    this._destroyed = new Subject();\n    this._elementScrolled = new Observable(observer => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this.scrollDispatcher.register(this);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.scrollDispatcher.deregister(this);\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /**\n   * Returns observable that emits when a scroll event is fired on the host element.\n   * @return {?}\n   */\n\n\n  elementScrolled() {\n    return this._elementScrolled;\n  }\n  /**\n   * Gets the ElementRef for the viewport.\n   * @return {?}\n   */\n\n\n  getElementRef() {\n    return this.elementRef;\n  }\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param {?} options specified the offsets to scroll to.\n   * @return {?}\n   */\n\n\n  scrollTo(options) {\n    /** @type {?} */\n    const el = this.elementRef.nativeElement;\n    /** @type {?} */\n\n    const isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n    options.left = options.left == null ? isRtl ? options.end : options.start : options.left;\n    options.right = options.right == null ? isRtl ? options.start : options.end : options.right; // Rewrite the bottom offset as a top offset.\n\n    if (options.bottom != null) {\n      /** @type {?} */\n      options.top = el.scrollHeight - el.clientHeight - options.bottom;\n    } // Rewrite the right offset as a left offset.\n\n\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        /** @type {?} */\n        options.right = el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        /** @type {?} */\n        options.left = el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n  /**\n   * @private\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  _applyScrollToOptions(options) {\n    /** @type {?} */\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param {?} from The edge to measure from.\n   * @return {?}\n   */\n\n\n  measureScrollOffset(from) {\n    /** @type {?} */\n    const LEFT = 'left';\n    /** @type {?} */\n\n    const RIGHT = 'right';\n    /** @type {?} */\n\n    const el = this.elementRef.nativeElement;\n\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    } // Rewrite start & end as left or right offsets.\n\n    /** @type {?} */\n\n\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n\n}\n\nCdkScrollable.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdk-scrollable], [cdkScrollable]'\n  }]\n}];\n/** @nocollapse */\n\nCdkScrollable.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: NgZone\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\n\n\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/**\n * A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`.\n */\n\nclass CdkVirtualScrollViewport extends CdkScrollable {\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} ngZone\n   * @param {?} _scrollStrategy\n   * @param {?} dir\n   * @param {?} scrollDispatcher\n   */\n  constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n    this.elementRef = elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._scrollStrategy = _scrollStrategy;\n    /**\n     * Emits when the viewport is detached from a CdkVirtualForOf.\n     */\n\n    this._detachedSubject = new Subject();\n    /**\n     * Emits when the rendered range changes.\n     */\n\n    this._renderedRangeSubject = new Subject();\n    /**\n     * The direction the viewport scrolls.\n     */\n\n    this.orientation = 'vertical'; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n    // depending on how the strategy calculates the scrolled index, it may come at a cost to\n    // performance.\n\n    /**\n     * Emits when the index of the first element visible in the viewport changes.\n     */\n\n    this.scrolledIndexChange = new Observable(observer => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n    /**\n     * A stream that emits whenever the rendered range changes.\n     */\n\n    this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n    /**\n     * The transform used to scale the spacer to the same size as all content, including content that\n     * is not currently rendered.\n     */\n\n    this._totalContentSizeTransform = '';\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n\n    this._totalContentSize = 0;\n    /**\n     * The currently rendered range of indices.\n     */\n\n    this._renderedRange = {\n      start: 0,\n      end: 0\n    };\n    /**\n     * The length of the data bound to this viewport (in number of items).\n     */\n\n    this._dataLength = 0;\n    /**\n     * The size of the viewport (in pixels).\n     */\n\n    this._viewportSize = 0;\n    /**\n     * The last rendered content offset that was set.\n     */\n\n    this._renderedContentOffset = 0;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n\n    this._renderedContentOffsetNeedsRewrite = false;\n    /**\n     * Whether there is a pending change detection cycle.\n     */\n\n    this._isChangeDetectionPending = false;\n    /**\n     * A list of functions to run after the next change detection cycle.\n     */\n\n    this._runAfterChangeDetection = [];\n\n    if (!_scrollStrategy) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    super.ngOnInit(); // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n\n    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n      this._measureViewportSize();\n\n      this._scrollStrategy.attach(this);\n\n      this.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n      startWith(\n      /** @type {?} */\n      null), // Collect multiple events into one until the next animation frame. This way if\n      // there are multiple scroll events in the same frame we only need to recheck\n      // our layout once.\n      auditTime(0, SCROLL_SCHEDULER)).subscribe(() => this._scrollStrategy.onContentScrolled());\n\n      this._markChangeDetectionNeeded();\n    }));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.detach();\n\n    this._scrollStrategy.detach(); // Complete all subjects\n\n\n    this._renderedRangeSubject.complete();\n\n    this._detachedSubject.complete();\n\n    super.ngOnDestroy();\n  }\n  /**\n   * Attaches a `CdkVirtualForOf` to this viewport.\n   * @param {?} forOf\n   * @return {?}\n   */\n\n\n  attach(forOf) {\n    if (this._forOf) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n\n\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        /** @type {?} */\n        const newLength = data.length;\n\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n\n          this._scrollStrategy.onDataLengthChanged();\n        }\n\n        this._doChangeDetection();\n      });\n    });\n  }\n  /**\n   * Detaches the current `CdkVirtualForOf`.\n   * @return {?}\n   */\n\n\n  detach() {\n    this._forOf = null;\n\n    this._detachedSubject.next();\n  }\n  /**\n   * Gets the length of the data bound to this viewport (in number of items).\n   * @return {?}\n   */\n\n\n  getDataLength() {\n    return this._dataLength;\n  }\n  /**\n   * Gets the size of the viewport (in pixels).\n   * @return {?}\n   */\n\n\n  getViewportSize() {\n    return this._viewportSize;\n  } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /**\n   * Get the current rendered range of items.\n   * @return {?}\n   */\n\n\n  getRenderedRange() {\n    return this._renderedRange;\n  }\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   * @param {?} size\n   * @return {?}\n   */\n\n\n  setTotalContentSize(size) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      /** @type {?} */\n\n      const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n      this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n\n      this._markChangeDetectionNeeded();\n    }\n  }\n  /**\n   * Sets the currently rendered range of indices.\n   * @param {?} range\n   * @return {?}\n   */\n\n\n  setRenderedRange(range) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      this._renderedRangeSubject.next(this._renderedRange = range);\n\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   * @return {?}\n   */\n\n\n  getOffsetToRenderedContentStart() {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   * @param {?} offset\n   * @param {?=} to\n   * @return {?}\n   */\n\n\n  setRenderedContentOffset(offset, to = 'to-start') {\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n    // in the negative direction.\n\n    /** @type {?} */\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    /** @type {?} */\n\n    const isHorizontal = this.orientation == 'horizontal';\n    /** @type {?} */\n\n    const axis = isHorizontal ? 'X' : 'Y';\n    /** @type {?} */\n\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    /** @type {?} */\n\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`; // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param {?} offset The offset to scroll to.\n   * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   * @return {?}\n   */\n\n\n  scrollToOffset(offset, behavior = 'auto') {\n    /** @type {?} */\n    const options = {\n      behavior\n    };\n\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n\n    this.scrollTo(options);\n  }\n  /**\n   * Scrolls to the offset for the given index.\n   * @param {?} index The index of the element to scroll to.\n   * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   * @return {?}\n   */\n\n\n  scrollToIndex(index, behavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n  /**\n   * Gets the current scroll offset from the start of the viewport (in pixels).\n   * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   * @return {?}\n   */\n\n\n  measureScrollOffset(from) {\n    return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n  }\n  /**\n   * Measure the combined size of all of the rendered items.\n   * @return {?}\n   */\n\n\n  measureRenderedContentSize() {\n    /** @type {?} */\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   * @param {?} range\n   * @return {?}\n   */\n\n\n  measureRangeSize(range) {\n    if (!this._forOf) {\n      return 0;\n    }\n\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n  /**\n   * Update the viewport dimensions and re-render.\n   * @return {?}\n   */\n\n\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n\n    this._scrollStrategy.onDataLengthChanged();\n  }\n  /**\n   * Measure the viewport size.\n   * @private\n   * @return {?}\n   */\n\n\n  _measureViewportSize() {\n    /** @type {?} */\n    const viewportEl = this.elementRef.nativeElement;\n    this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n  /**\n   * Queue up change detection to run.\n   * @private\n   * @param {?=} runAfter\n   * @return {?}\n   */\n\n\n  _markChangeDetectionNeeded(runAfter) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._doChangeDetection();\n      }));\n    }\n  }\n  /**\n   * Run change detection.\n   * @private\n   * @return {?}\n   */\n\n\n  _doChangeDetection() {\n    this._isChangeDetectionPending = false; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n\n    this.ngZone.run(() => this._changeDetectorRef.markForCheck()); // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n    /** @type {?} */\n\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n  }\n\n}\n\nCdkVirtualScrollViewport.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'cdk-virtual-scroll-viewport',\n    template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.transform]=\\\"_totalContentSizeTransform\\\"></div>\",\n    styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n    host: {\n      'class': 'cdk-virtual-scroll-viewport',\n      '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n      '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n      provide: CdkScrollable,\n      useExisting: CdkVirtualScrollViewport\n    }]\n  }]\n}];\n/** @nocollapse */\n\nCdkVirtualScrollViewport.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [VIRTUAL_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ScrollDispatcher\n}];\n\nCdkVirtualScrollViewport.propDecorators = {\n  orientation: [{\n    type: Input\n  }],\n  scrolledIndexChange: [{\n    type: Output\n  }],\n  _contentWrapper: [{\n    type: ViewChild,\n    args: ['contentWrapper']\n  }]\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\n\nfunction getSize(orientation, node) {\n  /** @type {?} */\n  const el =\n  /** @type {?} */\n  node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  /** @type {?} */\n\n\n  const rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\n\n\nclass CdkVirtualForOf {\n  /**\n   * @param {?} _viewContainerRef\n   * @param {?} _template\n   * @param {?} _differs\n   * @param {?} _viewport\n   * @param {?} ngZone\n   */\n  constructor(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n    this._viewContainerRef = _viewContainerRef;\n    this._template = _template;\n    this._differs = _differs;\n    this._viewport = _viewport;\n    /**\n     * Emits when the rendered view of the data changes.\n     */\n\n    this.viewChange = new Subject();\n    /**\n     * Subject that emits when a new DataSource instance is given.\n     */\n\n    this._dataSourceChanges = new Subject();\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n\n    this.cdkVirtualForTemplateCacheSize = 20;\n    /**\n     * Emits whenever the data in the current DataSource changes.\n     */\n\n    this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n    startWith(\n    /** @type {?} */\n    null), // Bundle up the previous and current data sources so we can work with both.\n    pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), // Replay the last emitted data when someone subscribes.\n    shareReplay(1));\n    /**\n     * The differ used to calculate changes to the data.\n     */\n\n    this._differ = null;\n    /**\n     * The template cache used to hold on ot template instancess that have been stamped out, but don't\n     * currently need to be rendered. These instances will be reused in the future rather than\n     * stamping out brand new ones.\n     */\n\n    this._templateCache = [];\n    /**\n     * Whether the rendered data should be updated during the next ngDoCheck cycle.\n     */\n\n    this._needsUpdate = false;\n    this._destroyed = new Subject();\n    this.dataStream.subscribe(data => {\n      this._data = data;\n\n      this._onRenderedDataChange();\n    });\n\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      ngZone.run(() => this.viewChange.next(this._renderedRange));\n\n      this._onRenderedDataChange();\n    });\n\n    this._viewport.attach(this);\n  }\n  /**\n   * The DataSource to display.\n   * @return {?}\n   */\n\n\n  get cdkVirtualForOf() {\n    return this._cdkVirtualForOf;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set cdkVirtualForOf(value) {\n    this._cdkVirtualForOf = value;\n    /** @type {?} */\n\n    const ds = isDataSource(value) ? value : // Slice the value if its an NgIterable to ensure we're working with an array.\n    new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n\n    this._dataSourceChanges.next(ds);\n  }\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   * @return {?}\n   */\n\n\n  get cdkVirtualForTrackBy() {\n    return this._cdkVirtualForTrackBy;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  set cdkVirtualForTrackBy(fn) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : undefined;\n  }\n  /**\n   * The template used to stamp out new elements.\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set cdkVirtualForTemplate(value) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   * @param {?} range\n   * @param {?} orientation\n   * @return {?}\n   */\n\n\n  measureRangeSize(range, orientation) {\n    if (range.start >= range.end) {\n      return 0;\n    }\n\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    } // The index into the list of rendered views for the first item in the range.\n\n    /** @type {?} */\n\n\n    const renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.\n\n    /** @type {?} */\n\n    const rangeLen = range.end - range.start; // Loop over all root nodes for all items in the range and sum up their size.\n\n    /** @type {?} */\n\n    let totalSize = 0;\n    /** @type {?} */\n\n    let i = rangeLen;\n\n    while (i--) {\n      /** @type {?} */\n      const view =\n      /** @type {?} */\n      this._viewContainerRef.get(i + renderedStartIndex);\n      /** @type {?} */\n\n\n      let j = view ? view.rootNodes.length : 0;\n\n      while (j--) {\n        totalSize += getSize(orientation,\n        /** @type {?} */\n        view.rootNodes[j]);\n      }\n    }\n\n    return totalSize;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n\n      /** @type {?} */\n      const changes = this._differ.diff(this._renderedItems);\n\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n\n      this._needsUpdate = false;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.complete();\n\n    this.viewChange.complete();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    for (let view of this._templateCache) {\n      view.destroy();\n    }\n  }\n  /**\n   * React to scroll state changes in the viewport.\n   * @private\n   * @return {?}\n   */\n\n\n  _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n    if (!this._differ) {\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n    }\n\n    this._needsUpdate = true;\n  }\n  /**\n   * Swap out one `DataSource` for another.\n   * @private\n   * @param {?} oldDs\n   * @param {?} newDs\n   * @return {?}\n   */\n\n\n  _changeDataSource(oldDs, newDs) {\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n\n    this._needsUpdate = true;\n    return newDs.connect(this);\n  }\n  /**\n   * Update the `CdkVirtualForOfContext` for all views.\n   * @private\n   * @return {?}\n   */\n\n\n  _updateContext() {\n    /** @type {?} */\n    const count = this._data.length;\n    /** @type {?} */\n\n    let i = this._viewContainerRef.length;\n\n    while (i--) {\n      /** @type {?} */\n      let view =\n      /** @type {?} */\n      this._viewContainerRef.get(i);\n\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n\n      this._updateComputedContextProperties(view.context);\n\n      view.detectChanges();\n    }\n  }\n  /**\n   * Apply changes to the DOM.\n   * @private\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _applyChanges(changes) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n      if (record.previousIndex == null) {\n        // Item added.\n        // Item added.\n\n        /** @type {?} */\n        const view = this._insertViewForNewItem(\n        /** @type {?} */\n        currentIndex);\n\n        view.context.$implicit = record.item;\n      } else if (currentIndex == null) {\n        // Item removed.\n        this._cacheView(this._detachView(\n        /** @type {?} */\n        adjustedPreviousIndex));\n      } else {\n        // Item moved.\n        // Item moved.\n\n        /** @type {?} */\n        const view =\n        /** @type {?} */\n        this._viewContainerRef.get(\n        /** @type {?} */\n        adjustedPreviousIndex);\n\n        this._viewContainerRef.move(view, currentIndex);\n\n        view.context.$implicit = record.item;\n      }\n    }); // Update $implicit for any items that had an identity change.\n\n    changes.forEachIdentityChange(record => {\n      /** @type {?} */\n      const view =\n      /** @type {?} */\n      this._viewContainerRef.get(\n      /** @type {?} */\n      record.currentIndex);\n\n      view.context.$implicit = record.item;\n    }); // Update the context variables on all items.\n\n    /** @type {?} */\n\n    const count = this._data.length;\n    /** @type {?} */\n\n    let i = this._viewContainerRef.length;\n\n    while (i--) {\n      /** @type {?} */\n      const view =\n      /** @type {?} */\n      this._viewContainerRef.get(i);\n\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n  /**\n   * Cache the given detached view.\n   * @private\n   * @param {?} view\n   * @return {?}\n   */\n\n\n  _cacheView(view) {\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n      this._templateCache.push(view);\n    } else {\n      /** @type {?} */\n      const index = this._viewContainerRef.indexOf(view); // It's very unlikely that the index will ever be -1, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n\n\n      if (index === -1) {\n        view.destroy();\n      } else {\n        this._viewContainerRef.remove(index);\n      }\n    }\n  }\n  /**\n   * Inserts a view for a new item, either from the cache or by creating a new one.\n   * @private\n   * @param {?} index\n   * @return {?}\n   */\n\n\n  _insertViewForNewItem(index) {\n    return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n  }\n  /**\n   * Update the computed properties on the `CdkVirtualForOfContext`.\n   * @private\n   * @param {?} context\n   * @return {?}\n   */\n\n\n  _updateComputedContextProperties(context) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n  /**\n   * Creates a new embedded view and moves it to the given index\n   * @private\n   * @param {?} index\n   * @return {?}\n   */\n\n\n  _createEmbeddedViewAt(index) {\n    /** @type {?} */\n    const view = this._viewContainerRef.createEmbeddedView(this._template, {\n      $implicit:\n      /** @type {?} */\n      null,\n      cdkVirtualForOf: this._cdkVirtualForOf,\n      index: -1,\n      count: -1,\n      first: false,\n      last: false,\n      odd: false,\n      even: false\n    });\n\n    if (index < this._viewContainerRef.length) {\n      this._viewContainerRef.move(view, index);\n    }\n\n    return view;\n  }\n  /**\n   * Inserts a recycled view from the cache at the given index.\n   * @private\n   * @param {?} index\n   * @return {?}\n   */\n\n\n  _insertViewFromCache(index) {\n    /** @type {?} */\n    const cachedView = this._templateCache.pop();\n\n    if (cachedView) {\n      this._viewContainerRef.insert(cachedView, index);\n    }\n\n    return cachedView || null;\n  }\n  /**\n   * Detaches the embedded view at the given index.\n   * @private\n   * @param {?} index\n   * @return {?}\n   */\n\n\n  _detachView(index) {\n    return (\n      /** @type {?} */\n      this._viewContainerRef.detach(index)\n    );\n  }\n\n}\n\nCdkVirtualForOf.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkVirtualFor][cdkVirtualForOf]'\n  }]\n}];\n/** @nocollapse */\n\nCdkVirtualForOf.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}, {\n  type: CdkVirtualScrollViewport,\n  decorators: [{\n    type: SkipSelf\n  }]\n}, {\n  type: NgZone\n}];\n\nCdkVirtualForOf.propDecorators = {\n  cdkVirtualForOf: [{\n    type: Input\n  }],\n  cdkVirtualForTrackBy: [{\n    type: Input\n  }],\n  cdkVirtualForTemplate: [{\n    type: Input\n  }],\n  cdkVirtualForTemplateCacheSize: [{\n    type: Input\n  }]\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nclass ScrollingModule {}\n\nScrollingModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [BidiModule, PlatformModule],\n    exports: [BidiModule, CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport],\n    declarations: [CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport]\n  }]\n}];\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\n\nclass ScrollDispatchModule {}\n\nScrollDispatchModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [ScrollingModule],\n    exports: [ScrollingModule]\n  }]\n}];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\n\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\n\nclass ViewportRuler {\n  /**\n   * @param {?} _platform\n   * @param {?} ngZone\n   */\n  constructor(_platform, ngZone) {\n    this._platform = _platform;\n    ngZone.runOutsideAngular(() => {\n      this._change = _platform.isBrowser ? merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) : of(); // Note that we need to do the subscription inside `runOutsideAngular`\n      // since subscribing is what causes the event listener to be added.\n\n      this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._invalidateCache.unsubscribe();\n  }\n  /**\n   * Returns the viewport's width and height.\n   * @return {?}\n   */\n\n\n  getViewportSize() {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n    /** @type {?} */\n\n\n    const output = {\n      width: this._viewportSize.width,\n      height: this._viewportSize.height\n    }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n    if (!this._platform.isBrowser) {\n      this._viewportSize =\n      /** @type {?} */\n      null;\n    }\n\n    return output;\n  }\n  /**\n   * Gets a ClientRect for the viewport's bounds.\n   * @return {?}\n   */\n\n\n  getViewportRect() {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n\n    /** @type {?} */\n    const scrollPosition = this.getViewportScrollPosition();\n    const {\n      width,\n      height\n    } = this.getViewportSize();\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width\n    };\n  }\n  /**\n   * Gets the (top, left) scroll position of the viewport.\n   * @return {?}\n   */\n\n\n  getViewportScrollPosition() {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {\n        top: 0,\n        left: 0\n      };\n    } // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n\n    /** @type {?} */\n\n\n    const documentElement =\n    /** @type {?} */\n    document.documentElement;\n    /** @type {?} */\n\n    const documentRect = documentElement.getBoundingClientRect();\n    /** @type {?} */\n\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n    /** @type {?} */\n\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n   * @return {?}\n   */\n\n\n  change(throttleTime = DEFAULT_RESIZE_TIME) {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n  /**\n   * Updates the cached viewport size.\n   * @private\n   * @return {?}\n   */\n\n\n  _updateViewportSize() {\n    this._viewportSize = this._platform.isBrowser ? {\n      width: window.innerWidth,\n      height: window.innerHeight\n    } : {\n      width: 0,\n      height: 0\n    };\n  }\n\n}\n\nViewportRuler.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\n\nViewportRuler.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: NgZone\n}];\n/** @nocollapse */\n\n\nViewportRuler.ngInjectableDef = defineInjectable({\n  factory: function ViewportRuler_Factory() {\n    return new ViewportRuler(inject(Platform), inject(NgZone));\n  },\n  token: ViewportRuler,\n  providedIn: \"root\"\n});\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\n\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n  return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\n\n\nconst VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport };","map":{"version":3,"names":["InjectionToken","Directive","forwardRef","Input","Injectable","NgZone","Optional","SkipSelf","ElementRef","NgModule","IterableDiffers","TemplateRef","ViewContainerRef","ChangeDetectionStrategy","ChangeDetectorRef","Component","Inject","Output","ViewChild","ViewEncapsulation","defineInjectable","inject","coerceNumberProperty","Subject","fromEvent","of","Observable","animationFrameScheduler","asapScheduler","merge","distinctUntilChanged","auditTime","filter","takeUntil","startWith","pairwise","shareReplay","switchMap","Platform","getRtlScrollAxisType","RtlScrollAxisType","supportsScrollBehavior","PlatformModule","Directionality","BidiModule","ArrayDataSource","isDataSource","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","constructor","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","value","ngOnChanges","decorators","type","args","selector","providers","provide","useFactory","deps","propDecorators","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","register","scrollable","has","set","elementScrolled","subscribe","deregister","scrollableReference","get","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","ngOnDestroy","forEach","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","window","document","providedIn","ctorParameters","ngInjectableDef","factory","ScrollDispatcher_Factory","token","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","SCROLL_DISPATCHER_PROVIDER","CdkScrollable","scrollDispatcher","dir","_destroyed","_elementScrolled","ngOnInit","scrollTo","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","NORMAL","scrollWidth","clientWidth","INVERTED","NEGATED","_applyScrollToOptions","scrollTop","scrollLeft","from","LEFT","RIGHT","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_changeDetectorRef","_detachedSubject","_renderedRangeSubject","orientation","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSizeTransform","_totalContentSize","_renderedRange","_dataLength","_viewportSize","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_measureViewportSize","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","length","_doChangeDetection","size","axis","range","getOffsetToRenderedContentStart","offset","to","isHorizontal","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","checkViewportSize","viewportEl","runAfter","markForCheck","style","runAfterChangeDetection","fn","template","styles","host","encapsulation","None","changeDetection","OnPush","useExisting","undefined","getSize","node","getBoundingClientRect","rect","width","height","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","prev","cur","_changeDataSource","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","cdkVirtualForOf","_cdkVirtualForOf","ds","Array","prototype","slice","call","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","item","cdkVirtualForTemplate","renderedStartIndex","rangeLen","totalSize","i","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_updateContext","_applyChanges","destroy","find","create","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_insertViewForNewItem","$implicit","_cacheView","_detachView","move","forEachIdentityChange","remove","_insertViewFromCache","_createEmbeddedViewAt","first","last","even","odd","createEmbeddedView","cachedView","pop","insert","ScrollingModule","imports","exports","declarations","ScrollDispatchModule","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_invalidateCache","change","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","documentElement","documentRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","VIEWPORT_RULER_PROVIDER"],"sources":["C:/Users/ismae/Desktop/PVGym/PVGymAngularClient/ClientApp/node_modules/@angular/cdk/esm2015/scrolling.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, asapScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, isDataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentRendered() { }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        const scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        const renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        const viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        const dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n    get itemSize() { return this._itemSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                    }],\n            },] },\n];\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        /** @type {?} */\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            /** @type {?} */\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        /** @type {?} */\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        let element = elementRef.nativeElement;\n        /** @type {?} */\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = (/** @type {?} */ (element)).parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform }\n];\n/** @nocollapse */ ScrollDispatcher.ngInjectableDef = defineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(inject(NgZone), inject(Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    scrollTo(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            ((/** @type {?} */ (options))).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                ((/** @type {?} */ (options))).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                ((/** @type {?} */ (options))).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    _applyScrollToOptions(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        /** @type {?} */\n        const LEFT = 'left';\n        /** @type {?} */\n        const RIGHT = 'right';\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            },] },\n];\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/**\n * A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        this._detachedSubject = new Subject();\n        /**\n         * Emits when the rendered range changes.\n         */\n        this._renderedRangeSubject = new Subject();\n        /**\n         * The direction the viewport scrolls.\n         */\n        this.orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The transform used to scale the spacer to the same size as all content, including content that\n         * is not currently rendered.\n         */\n        this._totalContentSizeTransform = '';\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /**\n         * The currently rendered range of indices.\n         */\n        this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        this._runAfterChangeDetection = [];\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith((/** @type {?} */ (null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                /** @type {?} */\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            /** @type {?} */\n            const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n            this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        const isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        const axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        /** @type {?} */\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    measureRenderedContentSize() {\n        /** @type {?} */\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n    _measureViewportSize() {\n        /** @type {?} */\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        /** @type {?} */\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n}\nCdkVirtualScrollViewport.decorators = [\n    { type: Component, args: [{selector: 'cdk-virtual-scroll-viewport',\n                template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.transform]=\\\"_totalContentSizeTransform\\\"></div>\",\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport,\n                    }]\n            },] },\n];\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    const el = (/** @type {?} */ (node));\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new Subject();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith((/** @type {?} */ (null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        /** @type {?} */\n        const ds = isDataSource(value) ? value :\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n        this._dataSourceChanges.next(ds);\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        /** @type {?} */\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        /** @type {?} */\n        const rangeLen = range.end - range.start;\n        // Loop over all root nodes for all items in the range and sum up their size.\n        /** @type {?} */\n        let totalSize = 0;\n        /** @type {?} */\n        let i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex)));\n            /** @type {?} */\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, (/** @type {?} */ (view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            /** @type {?} */\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs.connect(this);\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n    _updateContext() {\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            let view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                // Item added.\n                /** @type {?} */\n                const view = this._insertViewForNewItem((/** @type {?} */ (currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._cacheView(this._detachView((/** @type {?} */ (adjustedPreviousIndex))));\n            }\n            else { // Item moved.\n                // Item moved.\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (adjustedPreviousIndex)))));\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        });\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (record.currentIndex)))));\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewForNewItem(index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _createEmbeddedViewAt(index) {\n        /** @type {?} */\n        const view = this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: (/** @type {?} */ (null)),\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        });\n        if (index < this._viewContainerRef.length) {\n            this._viewContainerRef.move(view, index);\n        }\n        return view;\n    }\n    /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewFromCache(index) {\n        /** @type {?} */\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _detachView(index) {\n        return (/** @type {?} */ (this._viewContainerRef.detach(index)));\n    }\n}\nCdkVirtualForOf.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]',\n            },] },\n];\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollingModule {\n}\nScrollingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule, PlatformModule],\n                exports: [\n                    BidiModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n            },] },\n];\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\nclass ScrollDispatchModule {\n}\nScrollDispatchModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ScrollingModule],\n                exports: [ScrollingModule],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     */\n    constructor(_platform, ngZone) {\n        this._platform = _platform;\n        ngZone.runOutsideAngular(() => {\n            this._change = _platform.isBrowser ?\n                merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                of();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = (/** @type {?} */ (null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        /** @type {?} */\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        /** @type {?} */\n        const documentElement = (/** @type {?} */ (document.documentElement));\n        /** @type {?} */\n        const documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n    _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ ViewportRuler.ngInjectableDef = defineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(inject(Platform), inject(NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}