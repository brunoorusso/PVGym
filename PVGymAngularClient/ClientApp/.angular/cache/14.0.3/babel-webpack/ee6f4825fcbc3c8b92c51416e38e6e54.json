{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/brurusso/Documents/GitHub/PVGym/PVGym/PVGymAngularClient/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { Validators } from '@angular/forms';\nimport { map, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"oidc-client\";\nexport class UserService {\n  constructor(fb, http, userManager) {\n    this.fb = fb;\n    this.http = http;\n    this.userManager = userManager;\n    this.BaseURI = 'https://localhost:7023/api';\n    this.formModel = this.fb.group({\n      UserName: ['', Validators.required],\n      Email: ['', Validators.email],\n      Password: ['', Validators.required],\n      VAT: ['', Validators.required]\n    });\n    this.loginFormModel = this.fb.group({\n      Email: ['', Validators.required],\n      Password: ['', Validators.required]\n    });\n  }\n\n  isLoggedIn() {\n    if (localStorage.getItem('token')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  login() {\n    var user = {\n      Email: this.loginFormModel.value.Email,\n      Password: this.loginFormModel.value.Password\n    };\n    return this.http.post(this.BaseURI + '/ApplicationUser/Login', user);\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  register() {\n    var user = {\n      UserName: this.formModel.value.UserName,\n      Email: this.formModel.value.Email,\n      Password: this.formModel.value.Password\n    };\n    var member = {\n      VAT: this.formModel.value.VAT\n    };\n    return this.http.post(this.BaseURI + '/ApplicationUser/Register', user).pipe(map(result => {\n      const memberData = {\n        VAT: member.VAT,\n        UserId: result.id\n      }; // criar objeto com dados do membro e ID do usuário\n\n      return memberData;\n    }), switchMap(memberData => {\n      return this.http.post(this.BaseURI + '/Member', memberData); // fazer chamada para criar o membro\n    }));\n  }\n\n  getUserRoles() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const user = yield _this.userManager.getUser();\n\n      if (user) {\n        const token = user.access_token;\n        const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n        const roleClaims = yield _this.http.get(`${_this.BaseURI}/ApplicationUser/GetUserRoles`, {\n          headers\n        }).toPromise();\n        return roleClaims;\n      }\n\n      return null;\n    })();\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.FormBuilder), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.UserManager));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","Validators","map","switchMap","UserService","constructor","fb","http","userManager","group","UserName","required","Email","email","Password","VAT","isLoggedIn","localStorage","getItem","login","user","loginFormModel","value","post","BaseURI","logout","removeItem","register","formModel","member","pipe","result","memberData","UserId","id","getUserRoles","getUser","token","access_token","headers","set","roleClaims","get","toPromise","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\brurusso\\Documents\\GitHub\\PVGym\\PVGym\\PVGymAngularClient\\ClientApp\\src\\app\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { map, switchMap } from 'rxjs';\r\nimport { UserManager } from 'oidc-client';\r\n\r\n\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private fb: FormBuilder, private http: HttpClient, private userManager: UserManager) { }\n\n  readonly BaseURI = 'https://localhost:7023/api'\n\n  formModel = this.fb.group({\n    UserName: ['', Validators.required],\r\n    Email: ['', Validators.email],\r\n    Password: ['', Validators.required],\r\n    VAT: ['', Validators.required]\r\n  });\r\n\r\n  loginFormModel = this.fb.group({\r\n    Email: ['', Validators.required],\r\n    Password: ['', Validators.required]\r\n  })\r\n\r\n  isLoggedIn() {\r\n    if (localStorage.getItem('token')) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  login() {\r\n    var user = {\r\n      Email: this.loginFormModel.value.Email,\r\n      Password: this.loginFormModel.value.Password\r\n    }\r\n\r\n    return this.http.post(this.BaseURI + '/ApplicationUser/Login', user);\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  register() {\r\n    var user = {\r\n      UserName: this.formModel.value.UserName,\r\n      Email: this.formModel.value.Email,\r\n      Password: this.formModel.value.Password\r\n    };\r\n\r\n    var member = {\r\n      VAT: this.formModel.value.VAT\r\n    };\r\n\r\n    return this.http.post(this.BaseURI + '/ApplicationUser/Register', user).pipe(\r\n      map((result: any) => {\r\n        const memberData = { VAT: member.VAT, UserId: result.id}; // criar objeto com dados do membro e ID do usuário\r\n        return memberData;\r\n      }),\r\n      switchMap((memberData: any) => {\r\n        return this.http.post(this.BaseURI + '/Member', memberData); // fazer chamada para criar o membro\r\n        })\r\n      );\r\n  }\r\n\r\n  async getUserRoles() {\r\n    const user = await this.userManager.getUser();\r\n    if (user) {\r\n      const token = user.access_token;\r\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n      const roleClaims = await this.http.get<any>(`${this.BaseURI}/ApplicationUser/GetUserRoles`, { headers }).toPromise();\r\n      return roleClaims;\r\n    }\r\n    return null;\r\n  }\r\n }\n"]},"metadata":{},"sourceType":"module"}