{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\n\nfunction throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\n\n\nclass Portal {\n  /**\n   * Attach this portal to a host.\n   * @param {?} host\n   * @return {?}\n   */\n  attach(host) {\n    if (host == null) {\n      throwNullPortalOutletError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return (\n      /** @type {?} */\n      host.attach(this)\n    );\n  }\n  /**\n   * Detach this portal from its host\n   * @return {?}\n   */\n\n\n  detach() {\n    /** @type {?} */\n    let host = this._attachedHost;\n\n    if (host == null) {\n      throwNoPortalAttachedError();\n    } else {\n      this._attachedHost = null;\n      host.detach();\n    }\n  }\n  /**\n   * Whether this portal is attached to a host.\n   * @return {?}\n   */\n\n\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   * @param {?} host\n   * @return {?}\n   */\n\n\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\n\n\nclass ComponentPortal extends Portal {\n  /**\n   * @param {?} component\n   * @param {?=} viewContainerRef\n   * @param {?=} injector\n   * @param {?=} componentFactoryResolver\n   */\n  constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.componentFactoryResolver = componentFactoryResolver;\n  }\n\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\n\n\nclass TemplatePortal extends Portal {\n  /**\n   * @param {?} template\n   * @param {?} viewContainerRef\n   * @param {?=} context\n   */\n  constructor(template, viewContainerRef, context) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n    this.context = context;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get origin() {\n    return this.templateRef.elementRef;\n  }\n  /**\n   * Attach the the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   * @param {?} host\n   * @param {?=} context\n   * @return {?}\n   */\n\n\n  attach(host, context = this.context) {\n    this.context = context;\n    return super.attach(host);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  detach() {\n    this.context = undefined;\n    return super.detach();\n  }\n\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\n\n\nclass BasePortalOutlet {\n  constructor() {\n    /**\n     * Whether this host has already been permanently disposed.\n     */\n    this._isDisposed = false;\n  }\n  /**\n   * Whether this host has an attached portal.\n   * @return {?}\n   */\n\n\n  hasAttached() {\n    return !!this._attachedPortal;\n  }\n  /**\n   * Attaches a portal.\n   * @param {?} portal\n   * @return {?}\n   */\n\n\n  attach(portal) {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalOutletAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n  /**\n   * Detaches a previously attached portal.\n   * @return {?}\n   */\n\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n  /**\n   * Permanently dispose of this portal host.\n   * @return {?}\n   */\n\n\n  dispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n\n    this._isDisposed = true;\n  }\n  /**\n   * \\@docs-private\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n\n      this._disposeFn = null;\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\n\n\nclass DomPortalOutlet extends BasePortalOutlet {\n  /**\n   * @param {?} outletElement\n   * @param {?} _componentFactoryResolver\n   * @param {?} _appRef\n   * @param {?} _defaultInjector\n   */\n  constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n    super();\n    this.outletElement = outletElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._defaultInjector = _defaultInjector;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @template T\n   * @param {?} portal Portal to be attached\n   * @return {?} Reference to the created component.\n   */\n\n\n  attachComponentPortal(portal) {\n    /** @type {?} */\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    /** @type {?} */\n\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    /** @type {?} */\n\n    let componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n\n      this._appRef.attachView(componentRef.hostView);\n\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n\n        componentRef.destroy();\n      });\n    } // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n\n\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n    return componentRef;\n  }\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @template C\n   * @param {?} portal Portal to be attached.\n   * @return {?} Reference to the created embedded view.\n   */\n\n\n  attachTemplatePortal(portal) {\n    /** @type {?} */\n    let viewContainer = portal.viewContainerRef;\n    /** @type {?} */\n\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n    viewRef.detectChanges(); // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n    this.setDisposeFn(() => {\n      /** @type {?} */\n      let index = viewContainer.indexOf(viewRef);\n\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }); // TODO(jelbourn): Return locals from view.\n\n    return viewRef;\n  }\n  /**\n   * Clears out a portal from the DOM.\n   * @return {?}\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    if (this.outletElement.parentNode != null) {\n      this.outletElement.parentNode.removeChild(this.outletElement);\n    }\n  }\n  /**\n   * Gets the root HTMLElement for an instantiated component.\n   * @param {?} componentRef\n   * @return {?}\n   */\n\n\n  _getComponentRootNode(componentRef) {\n    return (\n      /** @type {?} */\n\n      /** @type {?} */\n      componentRef.hostView.rootNodes[0]\n    );\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n\n\nclass CdkPortal extends TemplatePortal {\n  /**\n   * @param {?} templateRef\n   * @param {?} viewContainerRef\n   */\n  constructor(templateRef, viewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n\n}\n\nCdkPortal.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdk-portal], [cdkPortal], [portal]',\n    exportAs: 'cdkPortal'\n  }]\n}];\n/** @nocollapse */\n\nCdkPortal.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: ViewContainerRef\n}];\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n\n\nclass CdkPortalOutlet extends BasePortalOutlet {\n  /**\n   * @param {?} _componentFactoryResolver\n   * @param {?} _viewContainerRef\n   */\n  constructor(_componentFactoryResolver, _viewContainerRef) {\n    super();\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._viewContainerRef = _viewContainerRef;\n    /**\n     * Whether the portal component is initialized.\n     */\n\n    this._isInitialized = false;\n    this.attached = new EventEmitter();\n  }\n  /**\n   * Portal associated with the Portal outlet.\n   * @return {?}\n   */\n\n\n  get portal() {\n    return this._attachedPortal;\n  }\n  /**\n   * @param {?} portal\n   * @return {?}\n   */\n\n\n  set portal(portal) {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal;\n  }\n  /**\n   * Component or view reference that is attached to the portal.\n   * @return {?}\n   */\n\n\n  get attachedRef() {\n    return this._attachedRef;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedPortal = null;\n    this._attachedRef = null;\n  }\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n   *\n   * @template T\n   * @param {?} portal Portal to be attached to the portal outlet.\n   * @return {?} Reference to the created component.\n   */\n\n\n  attachComponentPortal(portal) {\n    portal.setAttachedHost(this);\n    /** @type {?} */\n\n    const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n    /** @type {?} */\n\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    /** @type {?} */\n\n\n    const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n    return ref;\n  }\n  /**\n   * Attach the given TemplatePortal to this PortlHost as an embedded View.\n   * @template C\n   * @param {?} portal Portal to be attached.\n   * @return {?} Reference to the created embedded view.\n   */\n\n\n  attachTemplatePortal(portal) {\n    portal.setAttachedHost(this);\n    /** @type {?} */\n\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n    return viewRef;\n  }\n\n}\n\nCdkPortalOutlet.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n    exportAs: 'cdkPortalOutlet, cdkPortalHost',\n    inputs: ['portal: cdkPortalOutlet']\n  }]\n}];\n/** @nocollapse */\n\nCdkPortalOutlet.ctorParameters = () => [{\n  type: ComponentFactoryResolver\n}, {\n  type: ViewContainerRef\n}];\n\nCdkPortalOutlet.propDecorators = {\n  attached: [{\n    type: Output\n  }]\n};\n\nclass PortalModule {}\n\nPortalModule.decorators = [{\n  type: NgModule,\n  args: [{\n    exports: [CdkPortal, CdkPortalOutlet],\n    declarations: [CdkPortal, CdkPortalOutlet]\n  }]\n}];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\n\nclass PortalInjector {\n  /**\n   * @param {?} _parentInjector\n   * @param {?} _customTokens\n   */\n  constructor(_parentInjector, _customTokens) {\n    this._parentInjector = _parentInjector;\n    this._customTokens = _customTokens;\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @return {?}\n   */\n\n\n  get(token, notFoundValue) {\n    /** @type {?} */\n    const value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get(token, notFoundValue);\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };","map":{"version":3,"names":["ComponentFactoryResolver","Directive","EventEmitter","NgModule","Output","TemplateRef","ViewContainerRef","throwNullPortalError","Error","throwPortalAlreadyAttachedError","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","throwNullPortalOutletError","throwNoPortalAttachedError","Portal","attach","host","hasAttached","_attachedHost","detach","isAttached","setAttachedHost","ComponentPortal","constructor","component","viewContainerRef","injector","componentFactoryResolver","TemplatePortal","template","context","templateRef","origin","elementRef","undefined","BasePortalOutlet","_isDisposed","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","resolver","componentFactory","resolveComponentFactory","componentRef","createComponent","length","destroy","create","attachView","hostView","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","removeChild","CdkPortal","decorators","type","args","selector","exportAs","ctorParameters","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","attachedRef","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","inputs","propDecorators","PortalModule","exports","declarations","PortalInjector","_parentInjector","_customTokens","get","token","notFoundValue","value","DomPortalHost","PortalHostDirective","TemplatePortalDirective","BasePortalHost"],"sources":["C:/Users/ismae/Desktop/PVGym/PVGymAngularClient/ClientApp/node_modules/@angular/cdk/esm2015/portal.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return /** @type {?} */ (host.attach(this));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        this.setDisposeFn((() => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-portal], [cdkPortal], [portal]',\n                exportAs: 'cdkPortal',\n            },] },\n];\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        this.attached = new EventEmitter();\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n}\nCdkPortalOutlet.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalOutlet, cdkPortalHost',\n                inputs: ['portal: cdkPortalOutlet']\n            },] },\n];\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\nclass PortalModule {\n}\nPortalModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [CdkPortal, CdkPortalOutlet],\n                declarations: [CdkPortal, CdkPortalOutlet],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}