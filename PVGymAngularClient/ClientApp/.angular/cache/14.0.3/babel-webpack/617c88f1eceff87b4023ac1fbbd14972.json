{"ast":null,"code":"import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport { filter, take, takeUntil, takeWhile } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\nclass BlockScrollStrategy {\n  constructor(_viewportRuler, document) {\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach() {}\n  /** Blocks page-level scroll while the attached overlay is open. */\n\n\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n  /** Unblocks page-level scroll while the attached overlay is open. */\n\n\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n      this._isEnabled = false;\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n\n  _canBeEnabled() {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n\n    const viewport = this._viewportRuler.getViewportSize();\n\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(`Scroll strategy has already been attached.`);\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nclass CloseScrollStrategy {\n  constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /** Detaches the overlay ref and disables the scroll strategy. */\n\n    this._detach = () => {\n      this.disable();\n\n      if (this._overlayRef.hasAttached()) {\n        this._ngZone.run(() => this._overlayRef.detach());\n      }\n    };\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n  /** Enables the closing of the attached overlay on scroll. */\n\n\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0).pipe(filter(scrollable => {\n      return !scrollable || !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement);\n    }));\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n  /** Disables the closing the attached overlay on scroll. */\n\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Scroll strategy that doesn't do anything. */\n\n\nclass NoopScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n\n\n  disable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n\n\n  attach() {}\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nclass RepositionScrollStrategy {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n  /** Enables repositioning of the attached overlay on scroll. */\n\n\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n\n          const {\n            width,\n            height\n          } = this._viewportRuler.getViewportSize(); // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n\n\n          const parentRects = [{\n            width,\n            height,\n            bottom: height,\n            right: width,\n            top: 0,\n            left: 0\n          }];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n  /** Disables repositioning of the attached overlay on scroll. */\n\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n\n}\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nclass ScrollStrategyOptions {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    /** Do nothing on scroll. */\n\n    this.noop = () => new NoopScrollStrategy();\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * @param config Configuration to be used inside the scroll strategy.\n     */\n\n\n    this.close = config => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n    /** Block scrolling. */\n\n\n    this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n    /**\n     * Update the overlay's position on scroll.\n     * @param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     */\n\n\n    this.reposition = config => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n\n    this._document = document;\n  }\n\n}\n\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n};\n\nScrollStrategyOptions.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScrollStrategyOptions,\n  factory: ScrollStrategyOptions.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ScrollDispatcher\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Initial configuration used when creating an overlay. */\n\n\nclass OverlayConfig {\n  constructor(config) {\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    this.scrollStrategy = new NoopScrollStrategy();\n    /** Custom class to add to the overlay pane. */\n\n    this.panelClass = '';\n    /** Whether the overlay has a backdrop. */\n\n    this.hasBackdrop = false;\n    /** Custom class to add to the backdrop */\n\n    this.backdropClass = 'cdk-overlay-dark-backdrop';\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.disposeOnNavigation = false;\n\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys = Object.keys(config);\n\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key];\n        }\n      }\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The points of the origin element and the overlay element to connect. */\n\n\nclass ConnectionPositionPair {\n  constructor(origin, overlay,\n  /** Offset along the X axis. */\n  offsetX,\n  /** Offset along the Y axis. */\n  offsetY,\n  /** Class(es) to be applied to the panel while this position is active. */\n  panelClass) {\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.panelClass = panelClass;\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\n\n\nclass ScrollingVisibility {}\n/** The change event emitted by the strategy when a fallback position is used. */\n\n\nclass ConnectedOverlayPositionChange {\n  constructor(\n  /** The position used as a result of this change. */\n  connectionPair,\n  /** @docs-private */\n  scrollableViewProperties) {\n    this.connectionPair = connectionPair;\n    this.scrollableViewProperties = scrollableViewProperties;\n  }\n\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nclass OverlayRef {\n  constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._animationsDisabled = _animationsDisabled;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n\n    this._backdropClickHandler = event => this._backdropClick.next(event);\n\n    this._backdropTransitionendHandler = event => {\n      this._disposeBackdrop(event.target);\n    };\n    /** Stream of keydown events dispatched to this overlay. */\n\n\n    this._keydownEvents = new Subject();\n    /** Stream of mouse outside events dispatched to this overlay. */\n\n    this._outsidePointerEvents = new Subject();\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /** The overlay's HTML element */\n\n\n  get overlayElement() {\n    return this._pane;\n  }\n  /** The overlay's backdrop HTML element. */\n\n\n  get backdropElement() {\n    return this._backdropElement;\n  }\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n\n\n  get hostElement() {\n    return this._host;\n  }\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n\n\n  attach(portal) {\n    // Insert the host into the DOM before attaching the portal, otherwise\n    // the animations module will skip animations on repeat attachments.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    const attachResult = this._portalOutlet.attach(portal);\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n\n    this._updateElementSize();\n\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    } // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n\n\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      // The overlay could've been detached before the zone has stabilized.\n      if (this.hasAttached()) {\n        this.updatePosition();\n      }\n    }); // Enable pointer events for the overlay pane element.\n\n\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    } // Only emit the `attachments` event once all other setup is done.\n\n\n    this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this); // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n    // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n    // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n\n\n    if (typeof (attachResult === null || attachResult === void 0 ? void 0 : attachResult.onDestroy) === 'function') {\n      // In most cases we control the portal and we know when it is being detached so that\n      // we can finish the disposal process. The exception is if the user passes in a custom\n      // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n      // `detach` here instead of `dispose`, because we don't know if the user intends to\n      // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n      attachResult.onDestroy(() => {\n        if (this.hasAttached()) {\n          // We have to delay the `detach` call, because detaching immediately prevents\n          // other destroy hooks from running. This is likely a framework bug similar to\n          // https://github.com/angular/angular/issues/46119\n          this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n        }\n      });\n    }\n\n    return attachResult;\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n\n\n  detach() {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n    this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n    this._keyboardDispatcher.remove(this); // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n\n\n    this._detachContentWhenStable();\n\n    this._locationChanges.unsubscribe();\n\n    this._outsideClickDispatcher.remove(this);\n\n    return detachmentResult;\n  }\n  /** Cleans up the overlay from the DOM. */\n\n\n  dispose() {\n    var _a;\n\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n\n    this._disposeBackdrop(this._backdropElement);\n\n    this._locationChanges.unsubscribe();\n\n    this._keyboardDispatcher.remove(this);\n\n    this._portalOutlet.dispose();\n\n    this._attachments.complete();\n\n    this._backdropClick.complete();\n\n    this._keydownEvents.complete();\n\n    this._outsidePointerEvents.complete();\n\n    this._outsideClickDispatcher.remove(this);\n\n    (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n    this._previousHostParent = this._pane = this._host = null;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n  /** Whether the overlay has attached content. */\n\n\n  hasAttached() {\n    return this._portalOutlet.hasAttached();\n  }\n  /** Gets an observable that emits when the backdrop has been clicked. */\n\n\n  backdropClick() {\n    return this._backdropClick;\n  }\n  /** Gets an observable that emits when the overlay has been attached. */\n\n\n  attachments() {\n    return this._attachments;\n  }\n  /** Gets an observable that emits when the overlay has been detached. */\n\n\n  detachments() {\n    return this._detachments;\n  }\n  /** Gets an observable of keydown events targeted to this overlay. */\n\n\n  keydownEvents() {\n    return this._keydownEvents;\n  }\n  /** Gets an observable of pointer events targeted outside this overlay. */\n\n\n  outsidePointerEvents() {\n    return this._outsidePointerEvents;\n  }\n  /** Gets the current overlay configuration, which is immutable. */\n\n\n  getConfig() {\n    return this._config;\n  }\n  /** Updates the position of the overlay based on the position strategy. */\n\n\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n  /** Switches to a new position strategy and updates the overlay position. */\n\n\n  updatePositionStrategy(strategy) {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n  /** Update the size properties of the overlay. */\n\n\n  updateSize(sizeConfig) {\n    this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n\n    this._updateElementSize();\n  }\n  /** Sets the LTR/RTL direction for the overlay. */\n\n\n  setDirection(dir) {\n    this._config = Object.assign(Object.assign({}, this._config), {\n      direction: dir\n    });\n\n    this._updateElementDirection();\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n\n\n  getDirection() {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n  /** Switches to a new scroll strategy. */\n\n\n  updateScrollStrategy(strategy) {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n  /** Updates the text direction of the overlay panel. */\n\n\n  _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n  /** Updates the size of the overlay element based on the overlay config. */\n\n\n  _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n  /** Toggles the pointer events for the overlay pane element. */\n\n\n  _togglePointerEvents(enablePointer) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n  /** Attaches a backdrop for this overlay. */\n\n\n  _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n    this._backdropElement = this._document.createElement('div');\n\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._animationsDisabled) {\n      this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n    }\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    } // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n\n\n    this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n\n\n    this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.\n\n\n    if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n\n\n  _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode.appendChild(this._host);\n    }\n  }\n  /** Detaches the backdrop (if any) associated with the overlay. */\n\n\n  detachBackdrop() {\n    const backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    if (this._animationsDisabled) {\n      this._disposeBackdrop(backdropToDetach);\n\n      return;\n    }\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n    }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n\n\n    backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n\n    this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n      this._disposeBackdrop(backdropToDetach);\n    }, 500));\n  }\n  /** Toggles a single CSS class or an array of classes on an element. */\n\n\n  _toggleClasses(element, cssClasses, isAdd) {\n    const classes = coerceArray(cssClasses || []).filter(c => !!c);\n\n    if (classes.length) {\n      isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n    }\n  }\n  /** Detaches the overlay content next time the zone stabilizes. */\n\n\n  _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable.pipe(takeUntil(merge(this._attachments, this._detachments))).subscribe(() => {\n        // Needs a couple of checks for the pane and host, because\n        // they may have been removed by the time the zone stabilizes.\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\n          if (this._pane && this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, false);\n          }\n\n          if (this._host && this._host.parentElement) {\n            this._previousHostParent = this._host.parentElement;\n\n            this._host.remove();\n          }\n\n          subscription.unsubscribe();\n        }\n      });\n    });\n  }\n  /** Disposes of a scroll strategy. */\n\n\n  _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n  /** Removes a backdrop element from the DOM. */\n\n\n  _disposeBackdrop(backdrop) {\n    if (backdrop) {\n      backdrop.removeEventListener('click', this._backdropClickHandler);\n      backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n      backdrop.remove(); // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n\n      if (this._backdropElement === backdrop) {\n        this._backdropElement = null;\n      }\n    }\n\n    if (this._backdropTimeout) {\n      clearTimeout(this._backdropTimeout);\n      this._backdropTimeout = undefined;\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Container inside which all overlays will render. */\n\n\nclass OverlayContainer {\n  constructor(document, _platform) {\n    this._platform = _platform;\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    var _a;\n\n    (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n\n\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n\n\n  _createContainer() {\n    const containerClass = 'cdk-overlay-container'; // TODO(crisbeto): remove the testing check once we have an overlay testing\n    // module or Angular starts tearing down the testing `NgModule`. See:\n    // https://github.com/angular/angular/issues/18831\n\n    if (this._platform.isBrowser || _isTestEnvironment()) {\n      const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`); // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n\n\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].remove();\n      }\n    }\n\n    const container = this._document.createElement('div');\n\n    container.classList.add(containerClass); // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n\n    if (_isTestEnvironment()) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n\n    this._containerElement = container;\n  }\n\n}\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform));\n};\n\nOverlayContainer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayContainer,\n  factory: OverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\n\n\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\n\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\nclass FlexibleConnectedPositionStrategy {\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n\n  constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /** Whether the overlay was pushed in a previous positioning. */\n\n    this._isPushed = false;\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n\n    this._canPush = true;\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n\n    this._growAfterOpen = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n    this._hasFlexibleDimensions = true;\n    /** Whether the overlay position is locked. */\n\n    this._positionLocked = false;\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n\n    this._viewportMargin = 0;\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n\n    this._scrollables = [];\n    /** Ordered list of preferred positions, from most to least desirable. */\n\n    this._preferredPositions = [];\n    /** Subject that emits whenever the position changes. */\n\n    this._positionChanges = new Subject();\n    /** Subscription to viewport size changes. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Default offset for the overlay along the x axis. */\n\n    this._offsetX = 0;\n    /** Default offset for the overlay along the y axis. */\n\n    this._offsetY = 0;\n    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n\n    this._appliedPanelClasses = [];\n    /** Observable sequence of position changes. */\n\n    this.positionChanges = this._positionChanges;\n    this.setOrigin(connectedTo);\n  }\n  /** Attaches this position strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n\n    this._resizeSubscription.unsubscribe();\n\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n\n\n  apply() {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    } // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n\n\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n\n    this._resetOverlayElementStyles();\n\n    this._resetBoundingBoxStyles(); // We need the bounding rects for the origin, the overlay and the container to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n\n\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n    const containerRect = this._containerRect; // Positions where the overlay will fit with flexible dimensions.\n\n    const flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.\n\n    let fallback; // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, containerRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n\n\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.\n\n\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n\n        this._applyPosition(pos, originPoint);\n\n        return;\n      } // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n\n\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n        continue;\n      } // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n\n\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {\n          overlayFit,\n          overlayPoint,\n          originPoint,\n          position: pos,\n          overlayRect\n        };\n      }\n    } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n\n\n    if (flexibleFits.length) {\n      let bestFit = null;\n      let bestScore = -1;\n\n      for (const fit of flexibleFits) {\n        const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n\n      this._applyPosition(bestFit.position, bestFit.origin);\n\n      return;\n    } // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n\n\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n\n      this._applyPosition(fallback.position, fallback.originPoint);\n\n      return;\n    } // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n\n\n    this._applyPosition(fallback.position, fallback.originPoint);\n  }\n\n  detach() {\n    this._clearPanelClasses();\n\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n\n    this._resizeSubscription.unsubscribe();\n  }\n  /** Cleanup after the element gets destroyed. */\n\n\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    } // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n\n\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n\n    this._positionChanges.complete();\n\n    this._overlayRef = this._boundingBox = null;\n    this._isDisposed = true;\n  }\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n\n\n  reapplyLastPosition() {\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    const lastPosition = this._lastPosition;\n\n    if (lastPosition) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n      const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    } else {\n      this.apply();\n    }\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n\n\n  withScrollableContainers(scrollables) {\n    this._scrollables = scrollables;\n    return this;\n  }\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n\n\n  withPositions(positions) {\n    this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n    if (positions.indexOf(this._lastPosition) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n\n\n  withViewportMargin(margin) {\n    this._viewportMargin = margin;\n    return this;\n  }\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n\n\n  withFlexibleDimensions(flexibleDimensions = true) {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n\n\n  withGrowAfterOpen(growAfterOpen = true) {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n\n  withPush(canPush = true) {\n    this._canPush = canPush;\n    return this;\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n\n\n  withLockedPosition(isLocked = true) {\n    this._positionLocked = isLocked;\n    return this;\n  }\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n\n\n  setOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n\n\n  withDefaultOffsetX(offset) {\n    this._offsetX = offset;\n    return this;\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n\n\n  withDefaultOffsetY(offset) {\n    this._offsetY = offset;\n    return this;\n  }\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n\n\n  withTransformOriginOn(selector) {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n\n\n  _getOriginPoint(originRect, containerRect, pos) {\n    let x;\n\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    } // When zooming in Safari the container rectangle contains negative values for the position\n    // and we need to re-add them to the calculated coordinates.\n\n\n    if (containerRect.left < 0) {\n      x -= containerRect.left;\n    }\n\n    let y;\n\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    } // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n    // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    // Additionally, when zooming in Safari this fixes the vertical position.\n\n\n    if (containerRect.top < 0) {\n      y -= containerRect.top;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n\n\n  _getOverlayPoint(originPoint, overlayRect, pos) {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX;\n\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY;\n\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    } // The (x, y) coordinates of the overlay.\n\n\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY\n    };\n  }\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n\n\n  _getOverlayFit(point, rawOverlayRect, viewport, position) {\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {\n      x,\n      y\n    } = point;\n\n    let offsetX = this._getOffset(position, 'x');\n\n    let offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    } // How much the overlay would overflow at this position, on each side.\n\n\n    let leftOverflow = 0 - x;\n    let rightOverflow = x + overlay.width - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.\n\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n\n    let visibleArea = visibleWidth * visibleHeight;\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width\n    };\n  }\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlay at some position.\n   * @param viewport The geometry of the viewport.\n   */\n\n\n  _canFitWithFlexibleDimensions(fit, point, viewport) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n      const verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n      const horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n      return verticalFit && horizontalFit;\n    }\n\n    return false;\n  }\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param rawOverlayRect Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n\n\n  _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    } // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n\n\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.\n\n    let pushX = 0;\n    let pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n\n    this._previousPushAmount = {\n      x: pushX,\n      y: pushY\n    };\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY\n    };\n  }\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n\n\n  _applyPosition(position, originPoint) {\n    this._setTransformOrigin(position);\n\n    this._setOverlayElementStyles(originPoint, position);\n\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    } // Save the last connected position in case the position needs to be re-calculated.\n\n\n    this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculations can be somewhat expensive.\n\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n\n\n  _setTransformOrigin(position) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n\n    let xOrigin;\n    let yOrigin = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n\n\n  _calculateBoundingBoxRect(origin, position) {\n    const viewport = this._viewportRect;\n\n    const isRtl = this._isRtl();\n\n    let height, top, bottom;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n      const previousHeight = this._lastBoundingBoxSize.height;\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    } // The overlay is opening 'right-ward' (the content flows to the right).\n\n\n    const isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).\n\n    const isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n    let width, left, right;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right,\n      width,\n      height\n    };\n  }\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stretches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n\n\n  _setBoundingBoxStyles(origin, position) {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n\n\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {};\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n    extendStyles(this._boundingBox.style, styles);\n  }\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n\n\n  _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: ''\n    });\n  }\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n\n\n  _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: ''\n    });\n  }\n  /** Sets positioning styles to the overlay element. */\n\n\n  _setOverlayElementStyles(originPoint, position) {\n    const styles = {};\n\n    const hasExactPosition = this._hasExactPosition();\n\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    } // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n\n\n    let transformString = '';\n\n    let offsetX = this._getOffset(position, 'x');\n\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n\n\n  _getExactOverlayY(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {\n      top: '',\n      bottom: ''\n    };\n\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    } // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n\n\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n\n\n  _getExactOverlayX(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {\n      left: '',\n      right: ''\n    };\n\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    } // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n\n\n    let horizontalStyleProperty;\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    } // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n\n\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n\n\n  _getScrollVisibility() {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n\n    const overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n\n\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n    };\n  }\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n\n\n  _subtractOverflows(length, ...overflows) {\n    return overflows.reduce((currentValue, currentOverflow) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n\n\n  _getNarrowedViewportRect() {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin\n    };\n  }\n  /** Whether the we're dealing with an RTL context */\n\n\n  _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n  /** Determines whether the overlay uses exact or flexible positioning. */\n\n\n  _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n  /** Retrieves the offset of a position along the x or y axis. */\n\n\n  _getOffset(position, axis) {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breaking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n  /** Validates that the current position match the expected values. */\n\n\n  _validatePositions() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      } // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n\n\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n\n\n  _addPanelClasses(cssClasses) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n\n\n  _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n\n      this._appliedPanelClasses = [];\n    }\n  }\n  /** Returns the ClientRect of the current origin. */\n\n\n  _getOriginRect() {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    } // Check for Element so SVG elements are also supported.\n\n\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width\n    };\n  }\n\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\n\n\nfunction extendStyles(destination, source) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\n\n\nfunction getPixelValue(input) {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\n\n\nfunction getRoundedBoundingClientRect(clientRect) {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height)\n  };\n}\n\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [{\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Class to be added to the overlay pane wrapper. */\n\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\nclass GlobalPositionStrategy {\n  constructor() {\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._alignItems = '';\n    this._xPosition = '';\n    this._xOffset = '';\n    this._width = '';\n    this._height = '';\n    this._isDisposed = false;\n  }\n\n  attach(overlayRef) {\n    const config = overlayRef.getConfig();\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({\n        width: this._width\n      });\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({\n        height: this._height\n      });\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n\n\n  top(value = '') {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n\n\n  left(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'left';\n    return this;\n  }\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n\n\n  bottom(value = '') {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n\n\n  right(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'right';\n    return this;\n  }\n  /**\n   * Sets the overlay to the start of the viewport, depending on the overlay direction.\n   * This will be to the left in LTR layouts and to the right in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n\n\n  start(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'start';\n    return this;\n  }\n  /**\n   * Sets the overlay to the end of the viewport, depending on the overlay direction.\n   * This will be to the right in LTR layouts and to the left in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n\n\n  end(value = '') {\n    this._xOffset = value;\n    this._xPosition = 'end';\n    return this;\n  }\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n\n\n  width(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        width: value\n      });\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n\n\n  height(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        height: value\n      });\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n\n\n  centerHorizontally(offset = '') {\n    this.left(offset);\n    this._xPosition = 'center';\n    return this;\n  }\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n\n\n  centerVertically(offset = '') {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n\n\n  apply() {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n\n    const config = this._overlayRef.getConfig();\n\n    const {\n      width,\n      height,\n      maxWidth,\n      maxHeight\n    } = config;\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n    const xPosition = this._xPosition;\n    const xOffset = this._xOffset;\n    const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n    let marginLeft = '';\n    let marginRight = '';\n    let justifyContent = '';\n\n    if (shouldBeFlushHorizontally) {\n      justifyContent = 'flex-start';\n    } else if (xPosition === 'center') {\n      justifyContent = 'center';\n\n      if (isRtl) {\n        marginRight = xOffset;\n      } else {\n        marginLeft = xOffset;\n      }\n    } else if (isRtl) {\n      if (xPosition === 'left' || xPosition === 'end') {\n        justifyContent = 'flex-end';\n        marginLeft = xOffset;\n      } else if (xPosition === 'right' || xPosition === 'start') {\n        justifyContent = 'flex-start';\n        marginRight = xOffset;\n      }\n    } else if (xPosition === 'left' || xPosition === 'start') {\n      justifyContent = 'flex-start';\n      marginLeft = xOffset;\n    } else if (xPosition === 'right' || xPosition === 'end') {\n      justifyContent = 'flex-end';\n      marginRight = xOffset;\n    }\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n    parentStyles.justifyContent = justifyContent;\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n\n\n  dispose() {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n    this._overlayRef = null;\n    this._isDisposed = true;\n  }\n\n}\n/** Builder for overlay position strategy. */\n\n\nclass OverlayPositionBuilder {\n  constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   */\n\n\n  global() {\n    return new GlobalPositionStrategy();\n  }\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n\n\n  flexibleConnectedTo(origin) {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n  }\n\n}\n\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform), i0.ɵɵinject(OverlayContainer));\n};\n\nOverlayPositionBuilder.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayPositionBuilder,\n  factory: OverlayPositionBuilder.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }, {\n      type: OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nclass BaseOverlayDispatcher {\n  constructor(document) {\n    /** Currently attached overlays in the order they were attached. */\n    this._attachedOverlays = [];\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this.detach();\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  add(overlayRef) {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    this._attachedOverlays.push(overlayRef);\n  }\n  /** Remove an overlay from the list of attached overlay refs. */\n\n\n  remove(overlayRef) {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    } // Remove the global listener once there are no more overlays.\n\n\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n}\n\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) {\n  return new (t || BaseOverlayDispatcher)(i0.ɵɵinject(DOCUMENT));\n};\n\nBaseOverlayDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BaseOverlayDispatcher,\n  factory: BaseOverlayDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n  constructor(document,\n  /** @breaking-change 14.0.0 _ngZone will be required. */\n  _ngZone) {\n    super(document);\n    this._ngZone = _ngZone;\n    /** Keyboard event listener that will be attached to the body. */\n\n    this._keydownListener = event => {\n      const overlays = this._attachedOverlays;\n\n      for (let i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEvents.observers.length > 0) {\n          const keydownEvents = overlays[i]._keydownEvents;\n          /** @breaking-change 14.0.0 _ngZone will be required. */\n\n          if (this._ngZone) {\n            this._ngZone.run(() => keydownEvents.next(event));\n          } else {\n            keydownEvents.next(event);\n          }\n\n          break;\n        }\n      }\n    };\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  add(overlayRef) {\n    super.add(overlayRef); // Lazily start dispatcher once first overlay is added\n\n    if (!this._isAttached) {\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n      } else {\n        this._document.body.addEventListener('keydown', this._keydownListener);\n      }\n\n      this._isAttached = true;\n    }\n  }\n  /** Detaches the global keyboard event listener. */\n\n\n  detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n\n      this._isAttached = false;\n    }\n  }\n\n}\n\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.NgZone, 8));\n};\n\nOverlayKeyboardDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayKeyboardDispatcher,\n  factory: OverlayKeyboardDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  constructor(document, _platform,\n  /** @breaking-change 14.0.0 _ngZone will be required. */\n  _ngZone) {\n    super(document);\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._cursorStyleIsSet = false;\n    /** Store pointerdown event target to track origin of click. */\n\n    this._pointerDownListener = event => {\n      this._pointerDownEventTarget = _getEventTarget(event);\n    };\n    /** Click event listener that will be attached to the body propagate phase. */\n\n\n    this._clickListener = event => {\n      const target = _getEventTarget(event); // In case of a click event, we want to check the origin of the click\n      // (e.g. in case where a user starts a click inside the overlay and\n      // releases the click outside of it).\n      // This is done by using the event target of the preceding pointerdown event.\n      // Every click event caused by a pointer device has a preceding pointerdown\n      // event, unless the click was programmatically triggered (e.g. in a unit test).\n\n\n      const origin = event.type === 'click' && this._pointerDownEventTarget ? this._pointerDownEventTarget : target; // Reset the stored pointerdown event target, to avoid having it interfere\n      // in subsequent events.\n\n      this._pointerDownEventTarget = null; // We copy the array because the original may be modified asynchronously if the\n      // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n      // the for loop.\n\n      const overlays = this._attachedOverlays.slice(); // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n      // We want to target all overlays for which the click could be considered as outside click.\n      // As soon as we reach an overlay for which the click is not outside click we break off\n      // the loop.\n\n\n      for (let i = overlays.length - 1; i > -1; i--) {\n        const overlayRef = overlays[i];\n\n        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n          continue;\n        } // If it's a click inside the overlay, just break - we should do nothing\n        // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n        // and proceed with the next overlay\n\n\n        if (overlayRef.overlayElement.contains(target) || overlayRef.overlayElement.contains(origin)) {\n          break;\n        }\n\n        const outsidePointerEvents = overlayRef._outsidePointerEvents;\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n\n        if (this._ngZone) {\n          this._ngZone.run(() => outsidePointerEvents.next(event));\n        } else {\n          outsidePointerEvents.next(event);\n        }\n      }\n    };\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  add(overlayRef) {\n    super.add(overlayRef); // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n\n    if (!this._isAttached) {\n      const body = this._document.body;\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n      } else {\n        this._addEventListeners(body);\n      } // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n\n\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = body.style.cursor;\n        body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n\n      this._isAttached = true;\n    }\n  }\n  /** Detaches the global keyboard event listener. */\n\n\n  detach() {\n    if (this._isAttached) {\n      const body = this._document.body;\n      body.removeEventListener('pointerdown', this._pointerDownListener, true);\n      body.removeEventListener('click', this._clickListener, true);\n      body.removeEventListener('auxclick', this._clickListener, true);\n      body.removeEventListener('contextmenu', this._clickListener, true);\n\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n\n      this._isAttached = false;\n    }\n  }\n\n  _addEventListeners(body) {\n    body.addEventListener('pointerdown', this._pointerDownListener, true);\n    body.addEventListener('click', this._clickListener, true);\n    body.addEventListener('auxclick', this._clickListener, true);\n    body.addEventListener('contextmenu', this._clickListener, true);\n  }\n\n}\n\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) {\n  return new (t || OverlayOutsideClickDispatcher)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform), i0.ɵɵinject(i0.NgZone, 8));\n};\n\nOverlayOutsideClickDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayOutsideClickDispatcher,\n  factory: OverlayOutsideClickDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/** Next overlay unique ID. */\n\n\nlet nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nclass Overlay {\n  constructor(\n  /** Scrolling strategies that can be used when creating an overlay. */\n  scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._animationsModuleType = _animationsModuleType;\n  }\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n\n\n  create(config) {\n    const host = this._createHostElement();\n\n    const pane = this._createPaneElement(host);\n\n    const portalOutlet = this._createPortalOutlet(pane);\n\n    const overlayConfig = new OverlayConfig(config);\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n  }\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n\n\n  position() {\n    return this._positionBuilder;\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n\n\n  _createPaneElement(host) {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n    return pane;\n  }\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n\n\n  _createHostElement() {\n    const host = this._document.createElement('div');\n\n    this._overlayContainer.getContainerElement().appendChild(host);\n\n    return host;\n  }\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n\n\n  _createPortalOutlet(pane) {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n  }\n\n}\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(i0.ɵɵinject(ScrollStrategyOptions), i0.ɵɵinject(OverlayContainer), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(OverlayPositionBuilder), i0.ɵɵinject(OverlayKeyboardDispatcher), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i5.Directionality), i0.ɵɵinject(i6.Location), i0.ɵɵinject(OverlayOutsideClickDispatcher), i0.ɵɵinject(ANIMATION_MODULE_TYPE, 8));\n};\n\nOverlay.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i5.Directionality\n    }, {\n      type: i6.Location\n    }, {\n      type: OverlayOutsideClickDispatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n\n\nconst defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\n\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nclass CdkOverlayOrigin {\n  constructor(\n  /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n\n}\n\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCdkOverlayOrigin.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"],\n  standalone: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nclass CdkConnectedOverlay {\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  set offsetX(offsetX) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n  /** The offset in pixels for the overlay connection point on the y-axis */\n\n\n  get offsetY() {\n    return this._offsetY;\n  }\n\n  set offsetY(offsetY) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n  /** Whether or not the overlay should attach a backdrop. */\n\n\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /** Whether or not the overlay should be locked when scrolling. */\n\n\n  get lockPosition() {\n    return this._lockPosition;\n  }\n\n  set lockPosition(value) {\n    this._lockPosition = coerceBooleanProperty(value);\n  }\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n\n  get flexibleDimensions() {\n    return this._flexibleDimensions;\n  }\n\n  set flexibleDimensions(value) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n\n\n  get growAfterOpen() {\n    return this._growAfterOpen;\n  }\n\n  set growAfterOpen(value) {\n    this._growAfterOpen = coerceBooleanProperty(value);\n  }\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n\n  get push() {\n    return this._push;\n  }\n\n  set push(value) {\n    this._push = coerceBooleanProperty(value);\n  } // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n\n  constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    this._attachSubscription = Subscription.EMPTY;\n    this._detachSubscription = Subscription.EMPTY;\n    this._positionSubscription = Subscription.EMPTY;\n    /** Margin between the overlay and the viewport edges. */\n\n    this.viewportMargin = 0;\n    /** Whether the overlay is open. */\n\n    this.open = false;\n    /** Whether the overlay can be closed by user interaction. */\n\n    this.disableClose = false;\n    /** Event emitted when the backdrop is clicked. */\n\n    this.backdropClick = new EventEmitter();\n    /** Event emitted when the position has changed. */\n\n    this.positionChange = new EventEmitter();\n    /** Event emitted when the overlay has been attached. */\n\n    this.attach = new EventEmitter();\n    /** Event emitted when the overlay has been detached. */\n\n    this.detach = new EventEmitter();\n    /** Emits when there are keyboard events that are targeted at the overlay. */\n\n    this.overlayKeydown = new EventEmitter();\n    /** Emits when there are mouse outside click events that are targeted at the overlay. */\n\n    this.overlayOutsideClick = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n  /** The associated overlay reference. */\n\n\n  get overlayRef() {\n    return this._overlayRef;\n  }\n  /** The element's layout direction. */\n\n\n  get dir() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n\n    this._detachSubscription.unsubscribe();\n\n    this._backdropSubscription.unsubscribe();\n\n    this._positionSubscription.unsubscribe();\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n  /** Creates an overlay */\n\n\n  _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe(event => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n\n        this._detachOverlay();\n      }\n    });\n\n    this._overlayRef.outsidePointerEvents().subscribe(event => {\n      this.overlayOutsideClick.next(event);\n    });\n  }\n  /** Builds the overlay config based on the directive's inputs */\n\n\n  _buildConfig() {\n    const positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();\n\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n\n\n  _updatePositionStrategy(positionStrategy) {\n    const positions = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined\n    }));\n    return positionStrategy.setOrigin(this._getFlexibleConnectedPositionStrategyOrigin()).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);\n  }\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n\n\n  _createPositionStrategy() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n\n    this._updatePositionStrategy(strategy);\n\n    return strategy;\n  }\n\n  _getFlexibleConnectedPositionStrategyOrigin() {\n    if (this.origin instanceof CdkOverlayOrigin) {\n      return this.origin.elementRef;\n    } else {\n      return this.origin;\n    }\n  }\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n\n\n  _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    this._positionSubscription.unsubscribe(); // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n\n\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges.pipe(takeWhile(() => this.positionChange.observers.length > 0)).subscribe(position => {\n        this.positionChange.emit(position);\n\n        if (this.positionChange.observers.length === 0) {\n          this._positionSubscription.unsubscribe();\n        }\n      });\n    }\n  }\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n\n\n  _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n    }\n\n    this._backdropSubscription.unsubscribe();\n\n    this._positionSubscription.unsubscribe();\n  }\n\n}\n\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(i0.ɵɵdirectiveInject(Overlay), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.Directionality, 8));\n};\n\nCdkConnectedOverlay.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n    panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"],\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"],\n    transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\",\n    overlayOutsideClick: \"overlayOutsideClick\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  standalone: true,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: i0.TemplateRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    positionStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositionStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }],\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    disableClose: [{\n      type: Input,\n      args: ['cdkConnectedOverlayDisableClose']\n    }],\n    transformOriginSelector: [{\n      type: Input,\n      args: ['cdkConnectedOverlayTransformOriginOn']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    overlayOutsideClick: [{\n      type: Output\n    }]\n  });\n})();\n/** @docs-private */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass OverlayModule {}\n\nOverlayModule.ɵfac = function OverlayModule_Factory(t) {\n  return new (t || OverlayModule)();\n};\n\nOverlayModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\n\nclass FullscreenOverlayContainer extends OverlayContainer {\n  constructor(_document, platform) {\n    super(_document, platform);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  _createContainer() {\n    super._createContainer();\n\n    this._adjustParentForFullscreenChange();\n\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  _adjustParentForFullscreenChange() {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  _addFullscreenChangeListener(fn) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n\n      this._fullScreenListener = fn;\n    }\n  }\n\n  _getEventName() {\n    if (!this._fullScreenEventName) {\n      const _document = this._document;\n\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n\n\n  getFullscreenElement() {\n    const _document = this._document;\n    return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n  }\n\n}\n\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform));\n};\n\nFullscreenOverlayContainer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FullscreenOverlayContainer,\n  factory: FullscreenOverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };","map":{"version":3,"names":["i1","ScrollingModule","CdkScrollable","ScrollDispatcher","ViewportRuler","i6","DOCUMENT","i0","Injectable","Inject","ElementRef","Optional","ApplicationRef","ANIMATION_MODULE_TYPE","InjectionToken","Directive","EventEmitter","Input","Output","NgModule","coerceCssPixelValue","coerceArray","coerceBooleanProperty","i1$1","supportsScrollBehavior","_isTestEnvironment","_getEventTarget","filter","take","takeUntil","takeWhile","i5","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","Subject","Subscription","merge","ESCAPE","hasModifierKey","scrollBehaviorSupported","BlockScrollStrategy","constructor","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","disable","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","ngDevMode","stream","scrolled","pipe","scrollable","overlayElement","getElementRef","nativeElement","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","NgZone","ɵprov","type","args","providedIn","undefined","decorators","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","event","next","_backdropTransitionendHandler","_disposeBackdrop","target","_keydownEvents","_outsidePointerEvents","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","parentElement","_previousHostParent","appendChild","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","onDestroy","runOutsideAngular","Promise","resolve","then","detachBackdrop","detachmentResult","_detachContentWhenStable","_a","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","setAttribute","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","createElement","insertBefore","addEventListener","requestAnimationFrame","nextSibling","parentNode","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","c","length","subscription","children","backdrop","removeEventListener","clearTimeout","OverlayContainer","_platform","ngOnDestroy","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","oppositePlatformContainers","querySelectorAll","i","container","Platform","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","positions","_preferredPositions","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","push","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","indexOf","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","forEach","pair","cssClass","Element","destination","source","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","STANDARD_DROPDOWN_BELOW_POSITIONS","STANDARD_DROPDOWN_ADJACENT_POSITIONS","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","parent","OverlayPositionBuilder","global","flexibleConnectedTo","BaseOverlayDispatcher","_attachedOverlays","index","splice","OverlayKeyboardDispatcher","_keydownListener","overlays","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_clickListener","slice","_addEventListeners","IOS","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","_animationsModuleType","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","ComponentFactoryResolver","Injector","Directionality","Location","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","elementRef","ɵdir","exportAs","standalone","CdkConnectedOverlay","_position","_updatePositionStrategy","_hasBackdrop","lockPosition","_lockPosition","_flexibleDimensions","_push","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","emit","keyCode","preventDefault","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","transformOriginSelector","TemplateRef","ViewContainerRef","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","ɵmod","ɵinj","imports","exports","providers","FullscreenOverlayContainer","platform","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"],"sources":["C:/Users/brurusso/Documents/GitHub/PVGym/PVGym/PVGymAngularClient/ClientApp/node_modules/@angular/cdk/fesm2015/overlay.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport { filter, take, takeUntil, takeWhile } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0).pipe(filter(scrollable => {\n            return (!scrollable ||\n                !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement));\n        }));\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof (attachResult === null || attachResult === void 0 ? void 0 : attachResult.onDestroy) === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: Overlay, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkOverlayOrigin, isStandalone: true, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkConnectedOverlay, isStandalone: true, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayModule, imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,wBAApB;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,aAAT,EAAwBC,gBAAxB,EAA0CC,aAA1C,QAA+D,wBAA/D;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,UAA7B,EAAyCC,QAAzC,EAAmDC,cAAnD,EAAmEC,qBAAnE,EAA0FC,cAA1F,EAA0GC,SAA1G,EAAqHC,YAArH,EAAmIC,KAAnI,EAA0IC,MAA1I,EAAkJC,QAAlJ,QAAkK,eAAlK;AACA,SAASC,mBAAT,EAA8BC,WAA9B,EAA2CC,qBAA3C,QAAwE,uBAAxE;AACA,OAAO,KAAKC,IAAZ,MAAsB,uBAAtB;AACA,SAASC,sBAAT,EAAiCC,kBAAjC,EAAqDC,eAArD,QAA4E,uBAA5E;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,SAAlC,QAAmD,gBAAnD;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,YAA1C,QAA8D,qBAA9D;AACA,SAASC,OAAT,EAAkBC,YAAlB,EAAgCC,KAAhC,QAA6C,MAA7C;AACA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,uBAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,uBAAuB,GAAGjB,sBAAsB,EAAtD;AACA;AACA;AACA;;AACA,MAAMkB,mBAAN,CAA0B;EACtBC,WAAW,CAACC,cAAD,EAAiBC,QAAjB,EAA2B;IAClC,KAAKD,cAAL,GAAsBA,cAAtB;IACA,KAAKE,mBAAL,GAA2B;MAAEC,GAAG,EAAE,EAAP;MAAWC,IAAI,EAAE;IAAjB,CAA3B;IACA,KAAKC,UAAL,GAAkB,KAAlB;IACA,KAAKC,SAAL,GAAiBL,QAAjB;EACH;EACD;;;EACAM,MAAM,GAAG,CAAG;EACZ;;;EACAC,MAAM,GAAG;IACL,IAAI,KAAKC,aAAL,EAAJ,EAA0B;MACtB,MAAMC,IAAI,GAAG,KAAKJ,SAAL,CAAeK,eAA5B;MACA,KAAKC,uBAAL,GAA+B,KAAKZ,cAAL,CAAoBa,yBAApB,EAA/B,CAFsB,CAGtB;;MACA,KAAKX,mBAAL,CAAyBE,IAAzB,GAAgCM,IAAI,CAACI,KAAL,CAAWV,IAAX,IAAmB,EAAnD;MACA,KAAKF,mBAAL,CAAyBC,GAAzB,GAA+BO,IAAI,CAACI,KAAL,CAAWX,GAAX,IAAkB,EAAjD,CALsB,CAMtB;MACA;;MACAO,IAAI,CAACI,KAAL,CAAWV,IAAX,GAAkB5B,mBAAmB,CAAC,CAAC,KAAKoC,uBAAL,CAA6BR,IAA/B,CAArC;MACAM,IAAI,CAACI,KAAL,CAAWX,GAAX,GAAiB3B,mBAAmB,CAAC,CAAC,KAAKoC,uBAAL,CAA6BT,GAA/B,CAApC;MACAO,IAAI,CAACK,SAAL,CAAeC,GAAf,CAAmB,wBAAnB;MACA,KAAKX,UAAL,GAAkB,IAAlB;IACH;EACJ;EACD;;;EACAY,OAAO,GAAG;IACN,IAAI,KAAKZ,UAAT,EAAqB;MACjB,MAAMa,IAAI,GAAG,KAAKZ,SAAL,CAAeK,eAA5B;MACA,MAAMQ,IAAI,GAAG,KAAKb,SAAL,CAAea,IAA5B;MACA,MAAMC,SAAS,GAAGF,IAAI,CAACJ,KAAvB;MACA,MAAMO,SAAS,GAAGF,IAAI,CAACL,KAAvB;MACA,MAAMQ,0BAA0B,GAAGF,SAAS,CAACG,cAAV,IAA4B,EAA/D;MACA,MAAMC,0BAA0B,GAAGH,SAAS,CAACE,cAAV,IAA4B,EAA/D;MACA,KAAKlB,UAAL,GAAkB,KAAlB;MACAe,SAAS,CAAChB,IAAV,GAAiB,KAAKF,mBAAL,CAAyBE,IAA1C;MACAgB,SAAS,CAACjB,GAAV,GAAgB,KAAKD,mBAAL,CAAyBC,GAAzC;MACAe,IAAI,CAACH,SAAL,CAAeU,MAAf,CAAsB,wBAAtB,EAViB,CAWjB;MACA;MACA;MACA;MACA;;MACA,IAAI5B,uBAAJ,EAA6B;QACzBuB,SAAS,CAACG,cAAV,GAA2BF,SAAS,CAACE,cAAV,GAA2B,MAAtD;MACH;;MACDG,MAAM,CAACC,MAAP,CAAc,KAAKf,uBAAL,CAA6BR,IAA3C,EAAiD,KAAKQ,uBAAL,CAA6BT,GAA9E;;MACA,IAAIN,uBAAJ,EAA6B;QACzBuB,SAAS,CAACG,cAAV,GAA2BD,0BAA3B;QACAD,SAAS,CAACE,cAAV,GAA2BC,0BAA3B;MACH;IACJ;EACJ;;EACDf,aAAa,GAAG;IACZ;IACA;IACA;IACA,MAAMS,IAAI,GAAG,KAAKZ,SAAL,CAAeK,eAA5B;;IACA,IAAIO,IAAI,CAACH,SAAL,CAAea,QAAf,CAAwB,wBAAxB,KAAqD,KAAKvB,UAA9D,EAA0E;MACtE,OAAO,KAAP;IACH;;IACD,MAAMc,IAAI,GAAG,KAAKb,SAAL,CAAea,IAA5B;;IACA,MAAMU,QAAQ,GAAG,KAAK7B,cAAL,CAAoB8B,eAApB,EAAjB;;IACA,OAAOX,IAAI,CAACY,YAAL,GAAoBF,QAAQ,CAACG,MAA7B,IAAuCb,IAAI,CAACc,WAAL,GAAmBJ,QAAQ,CAACK,KAA1E;EACH;;AAhEqB;AAmE1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASC,wCAAT,GAAoD;EAChD,OAAOC,KAAK,CAAE,4CAAF,CAAZ;AACH;AAED;AACA;AACA;;;AACA,MAAMC,mBAAN,CAA0B;EACtBtC,WAAW,CAACuC,iBAAD,EAAoBC,OAApB,EAA6BvC,cAA7B,EAA6CwC,OAA7C,EAAsD;IAC7D,KAAKF,iBAAL,GAAyBA,iBAAzB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKvC,cAAL,GAAsBA,cAAtB;IACA,KAAKwC,OAAL,GAAeA,OAAf;IACA,KAAKC,mBAAL,GAA2B,IAA3B;IACA;;IACA,KAAKC,OAAL,GAAe,MAAM;MACjB,KAAKzB,OAAL;;MACA,IAAI,KAAK0B,WAAL,CAAiBC,WAAjB,EAAJ,EAAoC;QAChC,KAAKL,OAAL,CAAaM,GAAb,CAAiB,MAAM,KAAKF,WAAL,CAAiBG,MAAjB,EAAvB;MACH;IACJ,CALD;EAMH;EACD;;;EACAvC,MAAM,CAACwC,UAAD,EAAa;IACf,IAAI,KAAKJ,WAAL,KAAqB,OAAOK,SAAP,KAAqB,WAArB,IAAoCA,SAAzD,CAAJ,EAAyE;MACrE,MAAMb,wCAAwC,EAA9C;IACH;;IACD,KAAKQ,WAAL,GAAmBI,UAAnB;EACH;EACD;;;EACAvC,MAAM,GAAG;IACL,IAAI,KAAKiC,mBAAT,EAA8B;MAC1B;IACH;;IACD,MAAMQ,MAAM,GAAG,KAAKX,iBAAL,CAAuBY,QAAvB,CAAgC,CAAhC,EAAmCC,IAAnC,CAAwCpE,MAAM,CAACqE,UAAU,IAAI;MACxE,OAAQ,CAACA,UAAD,IACJ,CAAC,KAAKT,WAAL,CAAiBU,cAAjB,CAAgCzB,QAAhC,CAAyCwB,UAAU,CAACE,aAAX,GAA2BC,aAApE,CADL;IAEH,CAH4D,CAA9C,CAAf;;IAIA,IAAI,KAAKf,OAAL,IAAgB,KAAKA,OAAL,CAAagB,SAA7B,IAA0C,KAAKhB,OAAL,CAAagB,SAAb,GAAyB,CAAvE,EAA0E;MACtE,KAAKC,sBAAL,GAA8B,KAAKzD,cAAL,CAAoBa,yBAApB,GAAgDV,GAA9E;MACA,KAAKsC,mBAAL,GAA2BQ,MAAM,CAACS,SAAP,CAAiB,MAAM;QAC9C,MAAMC,cAAc,GAAG,KAAK3D,cAAL,CAAoBa,yBAApB,GAAgDV,GAAvE;;QACA,IAAIyD,IAAI,CAACC,GAAL,CAASF,cAAc,GAAG,KAAKF,sBAA/B,IAAyD,KAAKjB,OAAL,CAAagB,SAA1E,EAAqF;UACjF,KAAKd,OAAL;QACH,CAFD,MAGK;UACD,KAAKC,WAAL,CAAiBmB,cAAjB;QACH;MACJ,CAR0B,CAA3B;IASH,CAXD,MAYK;MACD,KAAKrB,mBAAL,GAA2BQ,MAAM,CAACS,SAAP,CAAiB,KAAKhB,OAAtB,CAA3B;IACH;EACJ;EACD;;;EACAzB,OAAO,GAAG;IACN,IAAI,KAAKwB,mBAAT,EAA8B;MAC1B,KAAKA,mBAAL,CAAyBsB,WAAzB;;MACA,KAAKtB,mBAAL,GAA2B,IAA3B;IACH;EACJ;;EACDK,MAAM,GAAG;IACL,KAAK7B,OAAL;IACA,KAAK0B,WAAL,GAAmB,IAAnB;EACH;;AAzDqB;AA4D1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMqB,kBAAN,CAAyB;EACrB;EACAxD,MAAM,GAAG,CAAG;EACZ;;;EACAS,OAAO,GAAG,CAAG;EACb;;;EACAV,MAAM,GAAG,CAAG;;AANS;AASzB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0D,4BAAT,CAAsCC,OAAtC,EAA+CC,gBAA/C,EAAiE;EAC7D,OAAOA,gBAAgB,CAACC,IAAjB,CAAsBC,eAAe,IAAI;IAC5C,MAAMC,YAAY,GAAGJ,OAAO,CAACK,MAAR,GAAiBF,eAAe,CAAClE,GAAtD;IACA,MAAMqE,YAAY,GAAGN,OAAO,CAAC/D,GAAR,GAAckE,eAAe,CAACE,MAAnD;IACA,MAAME,WAAW,GAAGP,OAAO,CAACQ,KAAR,GAAgBL,eAAe,CAACjE,IAApD;IACA,MAAMuE,YAAY,GAAGT,OAAO,CAAC9D,IAAR,GAAeiE,eAAe,CAACK,KAApD;IACA,OAAOJ,YAAY,IAAIE,YAAhB,IAAgCC,WAAhC,IAA+CE,YAAtD;EACH,CANM,CAAP;AAOH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,2BAAT,CAAqCV,OAArC,EAA8CC,gBAA9C,EAAgE;EAC5D,OAAOA,gBAAgB,CAACC,IAAjB,CAAsBS,mBAAmB,IAAI;IAChD,MAAMC,YAAY,GAAGZ,OAAO,CAAC/D,GAAR,GAAc0E,mBAAmB,CAAC1E,GAAvD;IACA,MAAM4E,YAAY,GAAGb,OAAO,CAACK,MAAR,GAAiBM,mBAAmB,CAACN,MAA1D;IACA,MAAMS,WAAW,GAAGd,OAAO,CAAC9D,IAAR,GAAeyE,mBAAmB,CAACzE,IAAvD;IACA,MAAM6E,YAAY,GAAGf,OAAO,CAACQ,KAAR,GAAgBG,mBAAmB,CAACH,KAAzD;IACA,OAAOI,YAAY,IAAIC,YAAhB,IAAgCC,WAAhC,IAA+CC,YAAtD;EACH,CANM,CAAP;AAOH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,MAAMC,wBAAN,CAA+B;EAC3BnF,WAAW,CAACuC,iBAAD,EAAoBtC,cAApB,EAAoCuC,OAApC,EAA6CC,OAA7C,EAAsD;IAC7D,KAAKF,iBAAL,GAAyBA,iBAAzB;IACA,KAAKtC,cAAL,GAAsBA,cAAtB;IACA,KAAKuC,OAAL,GAAeA,OAAf;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,mBAAL,GAA2B,IAA3B;EACH;EACD;;;EACAlC,MAAM,CAACwC,UAAD,EAAa;IACf,IAAI,KAAKJ,WAAL,KAAqB,OAAOK,SAAP,KAAqB,WAArB,IAAoCA,SAAzD,CAAJ,EAAyE;MACrE,MAAMb,wCAAwC,EAA9C;IACH;;IACD,KAAKQ,WAAL,GAAmBI,UAAnB;EACH;EACD;;;EACAvC,MAAM,GAAG;IACL,IAAI,CAAC,KAAKiC,mBAAV,EAA+B;MAC3B,MAAM0C,QAAQ,GAAG,KAAK3C,OAAL,GAAe,KAAKA,OAAL,CAAa4C,cAA5B,GAA6C,CAA9D;MACA,KAAK3C,mBAAL,GAA2B,KAAKH,iBAAL,CAAuBY,QAAvB,CAAgCiC,QAAhC,EAA0CzB,SAA1C,CAAoD,MAAM;QACjF,KAAKf,WAAL,CAAiBmB,cAAjB,GADiF,CAEjF;;;QACA,IAAI,KAAKtB,OAAL,IAAgB,KAAKA,OAAL,CAAa6C,SAAjC,EAA4C;UACxC,MAAMC,WAAW,GAAG,KAAK3C,WAAL,CAAiBU,cAAjB,CAAgCkC,qBAAhC,EAApB;;UACA,MAAM;YAAErD,KAAF;YAASF;UAAT,IAAoB,KAAKhC,cAAL,CAAoB8B,eAApB,EAA1B,CAFwC,CAGxC;UACA;;;UACA,MAAM0D,WAAW,GAAG,CAAC;YAAEtD,KAAF;YAASF,MAAT;YAAiBuC,MAAM,EAAEvC,MAAzB;YAAiC0C,KAAK,EAAExC,KAAxC;YAA+C/B,GAAG,EAAE,CAApD;YAAuDC,IAAI,EAAE;UAA7D,CAAD,CAApB;;UACA,IAAI6D,4BAA4B,CAACqB,WAAD,EAAcE,WAAd,CAAhC,EAA4D;YACxD,KAAKvE,OAAL;;YACA,KAAKsB,OAAL,CAAaM,GAAb,CAAiB,MAAM,KAAKF,WAAL,CAAiBG,MAAjB,EAAvB;UACH;QACJ;MACJ,CAd0B,CAA3B;IAeH;EACJ;EACD;;;EACA7B,OAAO,GAAG;IACN,IAAI,KAAKwB,mBAAT,EAA8B;MAC1B,KAAKA,mBAAL,CAAyBsB,WAAzB;;MACA,KAAKtB,mBAAL,GAA2B,IAA3B;IACH;EACJ;;EACDK,MAAM,GAAG;IACL,KAAK7B,OAAL;IACA,KAAK0B,WAAL,GAAmB,IAAnB;EACH;;AA9C0B;AAiD/B;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM8C,qBAAN,CAA4B;EACxB1F,WAAW,CAACuC,iBAAD,EAAoBtC,cAApB,EAAoCuC,OAApC,EAA6CtC,QAA7C,EAAuD;IAC9D,KAAKqC,iBAAL,GAAyBA,iBAAzB;IACA,KAAKtC,cAAL,GAAsBA,cAAtB;IACA,KAAKuC,OAAL,GAAeA,OAAf;IACA;;IACA,KAAKmD,IAAL,GAAY,MAAM,IAAI1B,kBAAJ,EAAlB;IACA;AACR;AACA;AACA;;;IACQ,KAAK2B,KAAL,GAAcC,MAAD,IAAY,IAAIvD,mBAAJ,CAAwB,KAAKC,iBAA7B,EAAgD,KAAKC,OAArD,EAA8D,KAAKvC,cAAnE,EAAmF4F,MAAnF,CAAzB;IACA;;;IACA,KAAKC,KAAL,GAAa,MAAM,IAAI/F,mBAAJ,CAAwB,KAAKE,cAA7B,EAA6C,KAAKM,SAAlD,CAAnB;IACA;AACR;AACA;AACA;AACA;;;IACQ,KAAKwF,UAAL,GAAmBF,MAAD,IAAY,IAAIV,wBAAJ,CAA6B,KAAK5C,iBAAlC,EAAqD,KAAKtC,cAA1D,EAA0E,KAAKuC,OAA/E,EAAwFqD,MAAxF,CAA9B;;IACA,KAAKtF,SAAL,GAAiBL,QAAjB;EACH;;AArBuB;;AAuB5BwF,qBAAqB,CAACM,IAAtB;EAAA,iBAAuHN,qBAAvH,EAA6G9H,EAA7G,UAA8JP,EAAE,CAACG,gBAAjK,GAA6GI,EAA7G,UAA8LP,EAAE,CAACI,aAAjM,GAA6GG,EAA7G,UAA2NA,EAAE,CAACqI,MAA9N,GAA6GrI,EAA7G,UAAiPD,QAAjP;AAAA;;AACA+H,qBAAqB,CAACQ,KAAtB,kBAD6GtI,EAC7G;EAAA,OAA2H8H,qBAA3H;EAAA,SAA2HA,qBAA3H;EAAA,YAA8J;AAA9J;;AACA;EAAA,mDAF6G9H,EAE7G,mBAAgG8H,qBAAhG,EAAmI,CAAC;IACxHS,IAAI,EAAEtI,UADkH;IAExHuI,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAd,CAAD;EAFkH,CAAD,CAAnI,EAG4B,YAAY;IAChC,OAAO,CAAC;MAAEF,IAAI,EAAE9I,EAAE,CAACG;IAAX,CAAD,EAAgC;MAAE2I,IAAI,EAAE9I,EAAE,CAACI;IAAX,CAAhC,EAA4D;MAAE0I,IAAI,EAAEvI,EAAE,CAACqI;IAAX,CAA5D,EAAiF;MAAEE,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACxGJ,IAAI,EAAErI,MADkG;QAExGsI,IAAI,EAAE,CAACzI,QAAD;MAFkG,CAAD;IAA/B,CAAjF,CAAP;EAIH,CARL;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAM6I,aAAN,CAAoB;EAChBxG,WAAW,CAAC6F,MAAD,EAAS;IAChB;IACA,KAAKY,cAAL,GAAsB,IAAIxC,kBAAJ,EAAtB;IACA;;IACA,KAAKyC,UAAL,GAAkB,EAAlB;IACA;;IACA,KAAKC,WAAL,GAAmB,KAAnB;IACA;;IACA,KAAKC,aAAL,GAAqB,2BAArB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,mBAAL,GAA2B,KAA3B;;IACA,IAAIhB,MAAJ,EAAY;MACR;MACA;MACA;MACA,MAAMiB,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYnB,MAAZ,CAAnB;;MACA,KAAK,MAAMoB,GAAX,IAAkBH,UAAlB,EAA8B;QAC1B,IAAIjB,MAAM,CAACoB,GAAD,CAAN,KAAgBX,SAApB,EAA+B;UAC3B;UACA;UACA;UACA;UACA;UACA;UACA,KAAKW,GAAL,IAAYpB,MAAM,CAACoB,GAAD,CAAlB;QACH;MACJ;IACJ;EACJ;;AAjCe;AAoCpB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMC,sBAAN,CAA6B;EACzBlH,WAAW,CAACmH,MAAD,EAASC,OAAT;EACX;EACAC,OAFW;EAGX;EACAC,OAJW;EAKX;EACAZ,UANW,EAMC;IACR,KAAKW,OAAL,GAAeA,OAAf;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKZ,UAAL,GAAkBA,UAAlB;IACA,KAAKa,OAAL,GAAeJ,MAAM,CAACI,OAAtB;IACA,KAAKC,OAAL,GAAeL,MAAM,CAACK,OAAtB;IACA,KAAKC,QAAL,GAAgBL,OAAO,CAACK,QAAxB;IACA,KAAKC,QAAL,GAAgBN,OAAO,CAACM,QAAxB;EACH;;AAfwB;AAiB7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,mBAAN,CAA0B;AAE1B;;;AACA,MAAMC,8BAAN,CAAqC;EACjC5H,WAAW;EACX;EACA6H,cAFW;EAGX;EACAC,wBAJW,EAIe;IACtB,KAAKD,cAAL,GAAsBA,cAAtB;IACA,KAAKC,wBAAL,GAAgCA,wBAAhC;EACH;;AARgC;AAUrC;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,wBAAT,CAAkCC,QAAlC,EAA4CC,KAA5C,EAAmD;EAC/C,IAAIA,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,QAA7B,IAAyCA,KAAK,KAAK,QAAvD,EAAiE;IAC7D,MAAM5F,KAAK,CAAE,8BAA6B2F,QAAS,KAAIC,KAAM,KAAjD,GACP,uCADM,CAAX;EAEH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,0BAAT,CAAoCF,QAApC,EAA8CC,KAA9C,EAAqD;EACjD,IAAIA,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,KAA/B,IAAwCA,KAAK,KAAK,QAAtD,EAAgE;IAC5D,MAAM5F,KAAK,CAAE,8BAA6B2F,QAAS,KAAIC,KAAM,KAAjD,GACP,sCADM,CAAX;EAEH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAME,UAAN,CAAiB;EACbnI,WAAW,CAACoI,aAAD,EAAgBC,KAAhB,EAAuBC,KAAvB,EAA8B7F,OAA9B,EAAuCD,OAAvC,EAAgD+F,mBAAhD,EAAqEhI,SAArE,EAAgFiI,SAAhF,EAA2FC,uBAA3F,EAAoHC,mBAAmB,GAAG,KAA1I,EAAiJ;IACxJ,KAAKN,aAAL,GAAqBA,aAArB;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAK7F,OAAL,GAAeA,OAAf;IACA,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAK+F,mBAAL,GAA2BA,mBAA3B;IACA,KAAKhI,SAAL,GAAiBA,SAAjB;IACA,KAAKiI,SAAL,GAAiBA,SAAjB;IACA,KAAKC,uBAAL,GAA+BA,uBAA/B;IACA,KAAKC,mBAAL,GAA2BA,mBAA3B;IACA,KAAKC,gBAAL,GAAwB,IAAxB;IACA,KAAKC,cAAL,GAAsB,IAAInJ,OAAJ,EAAtB;IACA,KAAKoJ,YAAL,GAAoB,IAAIpJ,OAAJ,EAApB;IACA,KAAKqJ,YAAL,GAAoB,IAAIrJ,OAAJ,EAApB;IACA,KAAKsJ,gBAAL,GAAwBrJ,YAAY,CAACsJ,KAArC;;IACA,KAAKC,qBAAL,GAA8BC,KAAD,IAAW,KAAKN,cAAL,CAAoBO,IAApB,CAAyBD,KAAzB,CAAxC;;IACA,KAAKE,6BAAL,GAAsCF,KAAD,IAAW;MAC5C,KAAKG,gBAAL,CAAsBH,KAAK,CAACI,MAA5B;IACH,CAFD;IAGA;;;IACA,KAAKC,cAAL,GAAsB,IAAI9J,OAAJ,EAAtB;IACA;;IACA,KAAK+J,qBAAL,GAA6B,IAAI/J,OAAJ,EAA7B;;IACA,IAAIgD,OAAO,CAACgE,cAAZ,EAA4B;MACxB,KAAKgD,eAAL,GAAuBhH,OAAO,CAACgE,cAA/B;;MACA,KAAKgD,eAAL,CAAqBjJ,MAArB,CAA4B,IAA5B;IACH;;IACD,KAAKkJ,iBAAL,GAAyBjH,OAAO,CAACkH,gBAAjC;EACH;EACD;;;EACkB,IAAdrG,cAAc,GAAG;IACjB,OAAO,KAAKgF,KAAZ;EACH;EACD;;;EACmB,IAAfsB,eAAe,GAAG;IAClB,OAAO,KAAKjB,gBAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACmB,IAAXkB,WAAW,GAAG;IACd,OAAO,KAAKxB,KAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI7H,MAAM,CAACsJ,MAAD,EAAS;IACX;IACA;IACA,IAAI,CAAC,KAAKzB,KAAL,CAAW0B,aAAZ,IAA6B,KAAKC,mBAAtC,EAA2D;MACvD,KAAKA,mBAAL,CAAyBC,WAAzB,CAAqC,KAAK5B,KAA1C;IACH;;IACD,MAAM6B,YAAY,GAAG,KAAK9B,aAAL,CAAmB5H,MAAnB,CAA0BsJ,MAA1B,CAArB;;IACA,IAAI,KAAKJ,iBAAT,EAA4B;MACxB,KAAKA,iBAAL,CAAuBlJ,MAAvB,CAA8B,IAA9B;IACH;;IACD,KAAK2J,oBAAL;;IACA,KAAKC,kBAAL;;IACA,KAAKC,uBAAL;;IACA,IAAI,KAAKZ,eAAT,EAA0B;MACtB,KAAKA,eAAL,CAAqBhJ,MAArB;IACH,CAfU,CAgBX;IACA;IACA;;;IACA,KAAK+B,OAAL,CAAa8H,QAAb,CAAsBlH,IAAtB,CAA2BnE,IAAI,CAAC,CAAD,CAA/B,EAAoC0E,SAApC,CAA8C,MAAM;MAChD;MACA,IAAI,KAAKd,WAAL,EAAJ,EAAwB;QACpB,KAAKkB,cAAL;MACH;IACJ,CALD,EAnBW,CAyBX;;;IACA,KAAKwG,oBAAL,CAA0B,IAA1B;;IACA,IAAI,KAAK9H,OAAL,CAAakE,WAAjB,EAA8B;MAC1B,KAAK6D,eAAL;IACH;;IACD,IAAI,KAAK/H,OAAL,CAAaiE,UAAjB,EAA6B;MACzB,KAAK+D,cAAL,CAAoB,KAAKnC,KAAzB,EAAgC,KAAK7F,OAAL,CAAaiE,UAA7C,EAAyD,IAAzD;IACH,CAhCU,CAiCX;;;IACA,KAAKmC,YAAL,CAAkBM,IAAlB,GAlCW,CAmCX;;;IACA,KAAKZ,mBAAL,CAAyBtH,GAAzB,CAA6B,IAA7B;;IACA,IAAI,KAAKwB,OAAL,CAAaoE,mBAAjB,EAAsC;MAClC,KAAKkC,gBAAL,GAAwB,KAAKP,SAAL,CAAe7E,SAAf,CAAyB,MAAM,KAAK+G,OAAL,EAA/B,CAAxB;IACH;;IACD,KAAKjC,uBAAL,CAA6BxH,GAA7B,CAAiC,IAAjC,EAxCW,CAyCX;IACA;IACA;;;IACA,IAAI,QAAQiJ,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACS,SAAjF,MAAgG,UAApG,EAAgH;MAC5G;MACA;MACA;MACA;MACA;MACAT,YAAY,CAACS,SAAb,CAAuB,MAAM;QACzB,IAAI,KAAK9H,WAAL,EAAJ,EAAwB;UACpB;UACA;UACA;UACA,KAAKL,OAAL,CAAaoI,iBAAb,CAA+B,MAAMC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM,KAAKhI,MAAL,EAA7B,CAArC;QACH;MACJ,CAPD;IAQH;;IACD,OAAOmH,YAAP;EACH;EACD;AACJ;AACA;AACA;;;EACInH,MAAM,GAAG;IACL,IAAI,CAAC,KAAKF,WAAL,EAAL,EAAyB;MACrB;IACH;;IACD,KAAKmI,cAAL,GAJK,CAKL;IACA;IACA;;IACA,KAAKT,oBAAL,CAA0B,KAA1B;;IACA,IAAI,KAAKb,iBAAL,IAA0B,KAAKA,iBAAL,CAAuB3G,MAArD,EAA6D;MACzD,KAAK2G,iBAAL,CAAuB3G,MAAvB;IACH;;IACD,IAAI,KAAK0G,eAAT,EAA0B;MACtB,KAAKA,eAAL,CAAqBvI,OAArB;IACH;;IACD,MAAM+J,gBAAgB,GAAG,KAAK7C,aAAL,CAAmBrF,MAAnB,EAAzB,CAfK,CAgBL;;;IACA,KAAK+F,YAAL,CAAkBK,IAAlB,GAjBK,CAkBL;;;IACA,KAAKZ,mBAAL,CAAyB7G,MAAzB,CAAgC,IAAhC,EAnBK,CAoBL;IACA;;;IACA,KAAKwJ,wBAAL;;IACA,KAAKnC,gBAAL,CAAsB/E,WAAtB;;IACA,KAAKyE,uBAAL,CAA6B/G,MAA7B,CAAoC,IAApC;;IACA,OAAOuJ,gBAAP;EACH;EACD;;;EACAP,OAAO,GAAG;IACN,IAAIS,EAAJ;;IACA,MAAMC,UAAU,GAAG,KAAKvI,WAAL,EAAnB;;IACA,IAAI,KAAK6G,iBAAT,EAA4B;MACxB,KAAKA,iBAAL,CAAuBgB,OAAvB;IACH;;IACD,KAAKW,sBAAL;;IACA,KAAKhC,gBAAL,CAAsB,KAAKV,gBAA3B;;IACA,KAAKI,gBAAL,CAAsB/E,WAAtB;;IACA,KAAKuE,mBAAL,CAAyB7G,MAAzB,CAAgC,IAAhC;;IACA,KAAK0G,aAAL,CAAmBsC,OAAnB;;IACA,KAAK7B,YAAL,CAAkByC,QAAlB;;IACA,KAAK1C,cAAL,CAAoB0C,QAApB;;IACA,KAAK/B,cAAL,CAAoB+B,QAApB;;IACA,KAAK9B,qBAAL,CAA2B8B,QAA3B;;IACA,KAAK7C,uBAAL,CAA6B/G,MAA7B,CAAoC,IAApC;;IACA,CAACyJ,EAAE,GAAG,KAAK9C,KAAX,MAAsB,IAAtB,IAA8B8C,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACzJ,MAAH,EAAvD;IACA,KAAKsI,mBAAL,GAA2B,KAAK1B,KAAL,GAAa,KAAKD,KAAL,GAAa,IAArD;;IACA,IAAI+C,UAAJ,EAAgB;MACZ,KAAKtC,YAAL,CAAkBK,IAAlB;IACH;;IACD,KAAKL,YAAL,CAAkBwC,QAAlB;EACH;EACD;;;EACAzI,WAAW,GAAG;IACV,OAAO,KAAKuF,aAAL,CAAmBvF,WAAnB,EAAP;EACH;EACD;;;EACA0I,aAAa,GAAG;IACZ,OAAO,KAAK3C,cAAZ;EACH;EACD;;;EACA4C,WAAW,GAAG;IACV,OAAO,KAAK3C,YAAZ;EACH;EACD;;;EACA4C,WAAW,GAAG;IACV,OAAO,KAAK3C,YAAZ;EACH;EACD;;;EACA4C,aAAa,GAAG;IACZ,OAAO,KAAKnC,cAAZ;EACH;EACD;;;EACAoC,oBAAoB,GAAG;IACnB,OAAO,KAAKnC,qBAAZ;EACH;EACD;;;EACAoC,SAAS,GAAG;IACR,OAAO,KAAKnJ,OAAZ;EACH;EACD;;;EACAsB,cAAc,GAAG;IACb,IAAI,KAAK2F,iBAAT,EAA4B;MACxB,KAAKA,iBAAL,CAAuBmC,KAAvB;IACH;EACJ;EACD;;;EACAC,sBAAsB,CAACC,QAAD,EAAW;IAC7B,IAAIA,QAAQ,KAAK,KAAKrC,iBAAtB,EAAyC;MACrC;IACH;;IACD,IAAI,KAAKA,iBAAT,EAA4B;MACxB,KAAKA,iBAAL,CAAuBgB,OAAvB;IACH;;IACD,KAAKhB,iBAAL,GAAyBqC,QAAzB;;IACA,IAAI,KAAKlJ,WAAL,EAAJ,EAAwB;MACpBkJ,QAAQ,CAACvL,MAAT,CAAgB,IAAhB;MACA,KAAKuD,cAAL;IACH;EACJ;EACD;;;EACAiI,UAAU,CAACC,UAAD,EAAa;IACnB,KAAKxJ,OAAL,GAAesE,MAAM,CAACmF,MAAP,CAAcnF,MAAM,CAACmF,MAAP,CAAc,EAAd,EAAkB,KAAKzJ,OAAvB,CAAd,EAA+CwJ,UAA/C,CAAf;;IACA,KAAK7B,kBAAL;EACH;EACD;;;EACA+B,YAAY,CAACC,GAAD,EAAM;IACd,KAAK3J,OAAL,GAAesE,MAAM,CAACmF,MAAP,CAAcnF,MAAM,CAACmF,MAAP,CAAc,EAAd,EAAkB,KAAKzJ,OAAvB,CAAd,EAA+C;MAAE4J,SAAS,EAAED;IAAb,CAA/C,CAAf;;IACA,KAAK/B,uBAAL;EACH;EACD;;;EACAiC,aAAa,CAACC,OAAD,EAAU;IACnB,IAAI,KAAKjE,KAAT,EAAgB;MACZ,KAAKmC,cAAL,CAAoB,KAAKnC,KAAzB,EAAgCiE,OAAhC,EAAyC,IAAzC;IACH;EACJ;EACD;;;EACAC,gBAAgB,CAACD,OAAD,EAAU;IACtB,IAAI,KAAKjE,KAAT,EAAgB;MACZ,KAAKmC,cAAL,CAAoB,KAAKnC,KAAzB,EAAgCiE,OAAhC,EAAyC,KAAzC;IACH;EACJ;EACD;AACJ;AACA;;;EACIE,YAAY,GAAG;IACX,MAAMJ,SAAS,GAAG,KAAK5J,OAAL,CAAa4J,SAA/B;;IACA,IAAI,CAACA,SAAL,EAAgB;MACZ,OAAO,KAAP;IACH;;IACD,OAAO,OAAOA,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4CA,SAAS,CAACpE,KAA7D;EACH;EACD;;;EACAyE,oBAAoB,CAACX,QAAD,EAAW;IAC3B,IAAIA,QAAQ,KAAK,KAAKtC,eAAtB,EAAuC;MACnC;IACH;;IACD,KAAK4B,sBAAL;;IACA,KAAK5B,eAAL,GAAuBsC,QAAvB;;IACA,IAAI,KAAKlJ,WAAL,EAAJ,EAAwB;MACpBkJ,QAAQ,CAACvL,MAAT,CAAgB,IAAhB;MACAuL,QAAQ,CAACtL,MAAT;IACH;EACJ;EACD;;;EACA4J,uBAAuB,GAAG;IACtB,KAAKhC,KAAL,CAAWsE,YAAX,CAAwB,KAAxB,EAA+B,KAAKF,YAAL,EAA/B;EACH;EACD;;;EACArC,kBAAkB,GAAG;IACjB,IAAI,CAAC,KAAK9B,KAAV,EAAiB;MACb;IACH;;IACD,MAAMvH,KAAK,GAAG,KAAKuH,KAAL,CAAWvH,KAAzB;IACAA,KAAK,CAACoB,KAAN,GAAc1D,mBAAmB,CAAC,KAAKgE,OAAL,CAAaN,KAAd,CAAjC;IACApB,KAAK,CAACkB,MAAN,GAAexD,mBAAmB,CAAC,KAAKgE,OAAL,CAAaR,MAAd,CAAlC;IACAlB,KAAK,CAAC6L,QAAN,GAAiBnO,mBAAmB,CAAC,KAAKgE,OAAL,CAAamK,QAAd,CAApC;IACA7L,KAAK,CAAC8L,SAAN,GAAkBpO,mBAAmB,CAAC,KAAKgE,OAAL,CAAaoK,SAAd,CAArC;IACA9L,KAAK,CAAC+L,QAAN,GAAiBrO,mBAAmB,CAAC,KAAKgE,OAAL,CAAaqK,QAAd,CAApC;IACA/L,KAAK,CAACgM,SAAN,GAAkBtO,mBAAmB,CAAC,KAAKgE,OAAL,CAAasK,SAAd,CAArC;EACH;EACD;;;EACAxC,oBAAoB,CAACyC,aAAD,EAAgB;IAChC,KAAK1E,KAAL,CAAWvH,KAAX,CAAiBkM,aAAjB,GAAiCD,aAAa,GAAG,EAAH,GAAQ,MAAtD;EACH;EACD;;;EACAxC,eAAe,GAAG;IACd,MAAM0C,YAAY,GAAG,8BAArB;IACA,KAAKvE,gBAAL,GAAwB,KAAKpI,SAAL,CAAe4M,aAAf,CAA6B,KAA7B,CAAxB;;IACA,KAAKxE,gBAAL,CAAsB3H,SAAtB,CAAgCC,GAAhC,CAAoC,sBAApC;;IACA,IAAI,KAAKyH,mBAAT,EAA8B;MAC1B,KAAKC,gBAAL,CAAsB3H,SAAtB,CAAgCC,GAAhC,CAAoC,qCAApC;IACH;;IACD,IAAI,KAAKwB,OAAL,CAAamE,aAAjB,EAAgC;MAC5B,KAAK6D,cAAL,CAAoB,KAAK9B,gBAAzB,EAA2C,KAAKlG,OAAL,CAAamE,aAAxD,EAAuE,IAAvE;IACH,CATa,CAUd;IACA;;;IACA,KAAKyB,KAAL,CAAW0B,aAAX,CAAyBqD,YAAzB,CAAsC,KAAKzE,gBAA3C,EAA6D,KAAKN,KAAlE,EAZc,CAad;IACA;;;IACA,KAAKM,gBAAL,CAAsB0E,gBAAtB,CAAuC,OAAvC,EAAgD,KAAKpE,qBAArD,EAfc,CAgBd;;;IACA,IAAI,CAAC,KAAKP,mBAAN,IAA6B,OAAO4E,qBAAP,KAAiC,WAAlE,EAA+E;MAC3E,KAAK9K,OAAL,CAAaoI,iBAAb,CAA+B,MAAM;QACjC0C,qBAAqB,CAAC,MAAM;UACxB,IAAI,KAAK3E,gBAAT,EAA2B;YACvB,KAAKA,gBAAL,CAAsB3H,SAAtB,CAAgCC,GAAhC,CAAoCiM,YAApC;UACH;QACJ,CAJoB,CAArB;MAKH,CAND;IAOH,CARD,MASK;MACD,KAAKvE,gBAAL,CAAsB3H,SAAtB,CAAgCC,GAAhC,CAAoCiM,YAApC;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI/C,oBAAoB,GAAG;IACnB,IAAI,KAAK9B,KAAL,CAAWkF,WAAf,EAA4B;MACxB,KAAKlF,KAAL,CAAWmF,UAAX,CAAsBvD,WAAtB,CAAkC,KAAK5B,KAAvC;IACH;EACJ;EACD;;;EACA2C,cAAc,GAAG;IACb,MAAMyC,gBAAgB,GAAG,KAAK9E,gBAA9B;;IACA,IAAI,CAAC8E,gBAAL,EAAuB;MACnB;IACH;;IACD,IAAI,KAAK/E,mBAAT,EAA8B;MAC1B,KAAKW,gBAAL,CAAsBoE,gBAAtB;;MACA;IACH;;IACDA,gBAAgB,CAACzM,SAAjB,CAA2BU,MAA3B,CAAkC,8BAAlC;;IACA,KAAKc,OAAL,CAAaoI,iBAAb,CAA+B,MAAM;MACjC6C,gBAAgB,CAACJ,gBAAjB,CAAkC,eAAlC,EAAmD,KAAKjE,6BAAxD;IACH,CAFD,EAVa,CAab;IACA;;;IACAqE,gBAAgB,CAAC1M,KAAjB,CAAuBkM,aAAvB,GAAuC,MAAvC,CAfa,CAgBb;IACA;IACA;;IACA,KAAKS,gBAAL,GAAwB,KAAKlL,OAAL,CAAaoI,iBAAb,CAA+B,MAAM+C,UAAU,CAAC,MAAM;MAC1E,KAAKtE,gBAAL,CAAsBoE,gBAAtB;IACH,CAFsE,EAEpE,GAFoE,CAA/C,CAAxB;EAGH;EACD;;;EACAhD,cAAc,CAACtG,OAAD,EAAUyJ,UAAV,EAAsBC,KAAtB,EAA6B;IACvC,MAAMtB,OAAO,GAAG7N,WAAW,CAACkP,UAAU,IAAI,EAAf,CAAX,CAA8B5O,MAA9B,CAAqC8O,CAAC,IAAI,CAAC,CAACA,CAA5C,CAAhB;;IACA,IAAIvB,OAAO,CAACwB,MAAZ,EAAoB;MAChBF,KAAK,GAAG1J,OAAO,CAACnD,SAAR,CAAkBC,GAAlB,CAAsB,GAAGsL,OAAzB,CAAH,GAAuCpI,OAAO,CAACnD,SAAR,CAAkBU,MAAlB,CAAyB,GAAG6K,OAA5B,CAA5C;IACH;EACJ;EACD;;;EACArB,wBAAwB,GAAG;IACvB;IACA;IACA;IACA,KAAK1I,OAAL,CAAaoI,iBAAb,CAA+B,MAAM;MACjC;MACA;MACA;MACA,MAAMoD,YAAY,GAAG,KAAKxL,OAAL,CAAa8H,QAAb,CAChBlH,IADgB,CACXlE,SAAS,CAACS,KAAK,CAAC,KAAKkJ,YAAN,EAAoB,KAAKC,YAAzB,CAAN,CADE,EAEhBnF,SAFgB,CAEN,MAAM;QACjB;QACA;QACA,IAAI,CAAC,KAAK2E,KAAN,IAAe,CAAC,KAAKD,KAArB,IAA8B,KAAKC,KAAL,CAAW2F,QAAX,CAAoBF,MAApB,KAA+B,CAAjE,EAAoE;UAChE,IAAI,KAAKzF,KAAL,IAAc,KAAK7F,OAAL,CAAaiE,UAA/B,EAA2C;YACvC,KAAK+D,cAAL,CAAoB,KAAKnC,KAAzB,EAAgC,KAAK7F,OAAL,CAAaiE,UAA7C,EAAyD,KAAzD;UACH;;UACD,IAAI,KAAK2B,KAAL,IAAc,KAAKA,KAAL,CAAW0B,aAA7B,EAA4C;YACxC,KAAKC,mBAAL,GAA2B,KAAK3B,KAAL,CAAW0B,aAAtC;;YACA,KAAK1B,KAAL,CAAW3G,MAAX;UACH;;UACDsM,YAAY,CAAChK,WAAb;QACH;MACJ,CAfoB,CAArB;IAgBH,CApBD;EAqBH;EACD;;;EACAqH,sBAAsB,GAAG;IACrB,MAAM5E,cAAc,GAAG,KAAKgD,eAA5B;;IACA,IAAIhD,cAAJ,EAAoB;MAChBA,cAAc,CAACvF,OAAf;;MACA,IAAIuF,cAAc,CAAC1D,MAAnB,EAA2B;QACvB0D,cAAc,CAAC1D,MAAf;MACH;IACJ;EACJ;EACD;;;EACAsG,gBAAgB,CAAC6E,QAAD,EAAW;IACvB,IAAIA,QAAJ,EAAc;MACVA,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsC,KAAKlF,qBAA3C;MACAiF,QAAQ,CAACC,mBAAT,CAA6B,eAA7B,EAA8C,KAAK/E,6BAAnD;MACA8E,QAAQ,CAACxM,MAAT,GAHU,CAIV;MACA;MACA;;MACA,IAAI,KAAKiH,gBAAL,KAA0BuF,QAA9B,EAAwC;QACpC,KAAKvF,gBAAL,GAAwB,IAAxB;MACH;IACJ;;IACD,IAAI,KAAK+E,gBAAT,EAA2B;MACvBU,YAAY,CAAC,KAAKV,gBAAN,CAAZ;MACA,KAAKA,gBAAL,GAAwBpH,SAAxB;IACH;EACJ;;AA3ZY;AA8ZjB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAM+H,gBAAN,CAAuB;EACnBrO,WAAW,CAACE,QAAD,EAAWoO,SAAX,EAAsB;IAC7B,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAK/N,SAAL,GAAiBL,QAAjB;EACH;;EACDqO,WAAW,GAAG;IACV,IAAIpD,EAAJ;;IACA,CAACA,EAAE,GAAG,KAAKqD,iBAAX,MAAkC,IAAlC,IAA0CrD,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACzJ,MAAH,EAAnE;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACI+M,mBAAmB,GAAG;IAClB,IAAI,CAAC,KAAKD,iBAAV,EAA6B;MACzB,KAAKE,gBAAL;IACH;;IACD,OAAO,KAAKF,iBAAZ;EACH;EACD;AACJ;AACA;AACA;;;EACIE,gBAAgB,GAAG;IACf,MAAMC,cAAc,GAAG,uBAAvB,CADe,CAEf;IACA;IACA;;IACA,IAAI,KAAKL,SAAL,CAAeM,SAAf,IAA4B9P,kBAAkB,EAAlD,EAAsD;MAClD,MAAM+P,0BAA0B,GAAG,KAAKtO,SAAL,CAAeuO,gBAAf,CAAiC,IAAGH,cAAe,uBAAnB,GAA6C,IAAGA,cAAe,mBAA/F,CAAnC,CADkD,CAElD;MACA;;;MACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,0BAA0B,CAACd,MAA/C,EAAuDgB,CAAC,EAAxD,EAA4D;QACxDF,0BAA0B,CAACE,CAAD,CAA1B,CAA8BrN,MAA9B;MACH;IACJ;;IACD,MAAMsN,SAAS,GAAG,KAAKzO,SAAL,CAAe4M,aAAf,CAA6B,KAA7B,CAAlB;;IACA6B,SAAS,CAAChO,SAAV,CAAoBC,GAApB,CAAwB0N,cAAxB,EAde,CAef;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,IAAI7P,kBAAkB,EAAtB,EAA0B;MACtBkQ,SAAS,CAACrC,YAAV,CAAuB,UAAvB,EAAmC,MAAnC;IACH,CAFD,MAGK,IAAI,CAAC,KAAK2B,SAAL,CAAeM,SAApB,EAA+B;MAChCI,SAAS,CAACrC,YAAV,CAAuB,UAAvB,EAAmC,QAAnC;IACH;;IACD,KAAKpM,SAAL,CAAea,IAAf,CAAoB6I,WAApB,CAAgC+E,SAAhC;;IACA,KAAKR,iBAAL,GAAyBQ,SAAzB;EACH;;AAzDkB;;AA2DvBX,gBAAgB,CAACrI,IAAjB;EAAA,iBAAkHqI,gBAAlH,EApoB6GzQ,EAooB7G,UAAoJD,QAApJ,GApoB6GC,EAooB7G,UAAyKgB,IAAI,CAACqQ,QAA9K;AAAA;;AACAZ,gBAAgB,CAACnI,KAAjB,kBAroB6GtI,EAqoB7G;EAAA,OAAsHyQ,gBAAtH;EAAA,SAAsHA,gBAAtH;EAAA,YAAoJ;AAApJ;;AACA;EAAA,mDAtoB6GzQ,EAsoB7G,mBAAgGyQ,gBAAhG,EAA8H,CAAC;IACnHlI,IAAI,EAAEtI,UAD6G;IAEnHuI,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAd,CAAD;EAF6G,CAAD,CAA9H,EAG4B,YAAY;IAChC,OAAO,CAAC;MAAEF,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACxBJ,IAAI,EAAErI,MADkB;QAExBsI,IAAI,EAAE,CAACzI,QAAD;MAFkB,CAAD;IAA/B,CAAD,EAGW;MAAEwI,IAAI,EAAEvH,IAAI,CAACqQ;IAAb,CAHX,CAAP;EAIH,CARL;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMC,gBAAgB,GAAG,6CAAzB;AACA;;AACA,MAAMC,cAAc,GAAG,eAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iCAAN,CAAwC;EACpC;EACa,IAATC,SAAS,GAAG;IACZ,OAAO,KAAKC,mBAAZ;EACH;;EACDtP,WAAW,CAACuP,WAAD,EAActP,cAAd,EAA8BM,SAA9B,EAAyC+N,SAAzC,EAAoDkB,iBAApD,EAAuE;IAC9E,KAAKvP,cAAL,GAAsBA,cAAtB;IACA,KAAKM,SAAL,GAAiBA,SAAjB;IACA,KAAK+N,SAAL,GAAiBA,SAAjB;IACA,KAAKkB,iBAAL,GAAyBA,iBAAzB;IACA;;IACA,KAAKC,oBAAL,GAA4B;MAAEtN,KAAK,EAAE,CAAT;MAAYF,MAAM,EAAE;IAApB,CAA5B;IACA;;IACA,KAAKyN,SAAL,GAAiB,KAAjB;IACA;;IACA,KAAKC,QAAL,GAAgB,IAAhB;IACA;;IACA,KAAKC,cAAL,GAAsB,KAAtB;IACA;;IACA,KAAKC,sBAAL,GAA8B,IAA9B;IACA;;IACA,KAAKC,eAAL,GAAuB,KAAvB;IACA;;IACA,KAAKC,eAAL,GAAuB,CAAvB;IACA;;IACA,KAAKC,YAAL,GAAoB,EAApB;IACA;;IACA,KAAKV,mBAAL,GAA2B,EAA3B;IACA;;IACA,KAAKW,gBAAL,GAAwB,IAAIxQ,OAAJ,EAAxB;IACA;;IACA,KAAKyQ,mBAAL,GAA2BxQ,YAAY,CAACsJ,KAAxC;IACA;;IACA,KAAKmH,QAAL,GAAgB,CAAhB;IACA;;IACA,KAAKC,QAAL,GAAgB,CAAhB;IACA;;IACA,KAAKC,oBAAL,GAA4B,EAA5B;IACA;;IACA,KAAKC,eAAL,GAAuB,KAAKL,gBAA5B;IACA,KAAKM,SAAL,CAAehB,WAAf;EACH;EACD;;;EACA/O,MAAM,CAACwC,UAAD,EAAa;IACf,IAAI,KAAKJ,WAAL,IACAI,UAAU,KAAK,KAAKJ,WADpB,KAEC,OAAOK,SAAP,KAAqB,WAArB,IAAoCA,SAFrC,CAAJ,EAEqD;MACjD,MAAMZ,KAAK,CAAC,0DAAD,CAAX;IACH;;IACD,KAAKmO,kBAAL;;IACAxN,UAAU,CAAC6G,WAAX,CAAuB7I,SAAvB,CAAiCC,GAAjC,CAAqCiO,gBAArC;IACA,KAAKtM,WAAL,GAAmBI,UAAnB;IACA,KAAKyN,YAAL,GAAoBzN,UAAU,CAAC6G,WAA/B;IACA,KAAKvB,KAAL,GAAatF,UAAU,CAACM,cAAxB;IACA,KAAKoN,WAAL,GAAmB,KAAnB;IACA,KAAKC,gBAAL,GAAwB,IAAxB;IACA,KAAKC,aAAL,GAAqB,IAArB;;IACA,KAAKV,mBAAL,CAAyBlM,WAAzB;;IACA,KAAKkM,mBAAL,GAA2B,KAAKjQ,cAAL,CAAoB4Q,MAApB,GAA6BlN,SAA7B,CAAuC,MAAM;MACpE;MACA;MACA;MACA,KAAKgN,gBAAL,GAAwB,IAAxB;MACA,KAAK9E,KAAL;IACH,CAN0B,CAA3B;EAOH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIA,KAAK,GAAG;IACJ;IACA,IAAI,KAAK6E,WAAL,IAAoB,CAAC,KAAKpC,SAAL,CAAeM,SAAxC,EAAmD;MAC/C;IACH,CAJG,CAKJ;IACA;IACA;;;IACA,IAAI,CAAC,KAAK+B,gBAAN,IAA0B,KAAKb,eAA/B,IAAkD,KAAKc,aAA3D,EAA0E;MACtE,KAAKE,mBAAL;MACA;IACH;;IACD,KAAKC,kBAAL;;IACA,KAAKC,0BAAL;;IACA,KAAKC,uBAAL,GAdI,CAeJ;IACA;IACA;;;IACA,KAAKC,aAAL,GAAqB,KAAKC,wBAAL,EAArB;IACA,KAAKC,WAAL,GAAmB,KAAKC,cAAL,EAAnB;IACA,KAAKC,YAAL,GAAoB,KAAKhJ,KAAL,CAAW9C,qBAAX,EAApB;IACA,KAAK+L,cAAL,GAAsB,KAAK/B,iBAAL,CAAuBf,mBAAvB,GAA6CjJ,qBAA7C,EAAtB;IACA,MAAMgM,UAAU,GAAG,KAAKJ,WAAxB;IACA,MAAM7L,WAAW,GAAG,KAAK+L,YAAzB;IACA,MAAMG,YAAY,GAAG,KAAKP,aAA1B;IACA,MAAMQ,aAAa,GAAG,KAAKH,cAA3B,CAzBI,CA0BJ;;IACA,MAAMI,YAAY,GAAG,EAArB,CA3BI,CA4BJ;;IACA,IAAIC,QAAJ,CA7BI,CA8BJ;IACA;;IACA,KAAK,IAAIC,GAAT,IAAgB,KAAKvC,mBAArB,EAA0C;MACtC;MACA,IAAIwC,WAAW,GAAG,KAAKC,eAAL,CAAqBP,UAArB,EAAiCE,aAAjC,EAAgDG,GAAhD,CAAlB,CAFsC,CAGtC;MACA;MACA;;;MACA,IAAIG,YAAY,GAAG,KAAKC,gBAAL,CAAsBH,WAAtB,EAAmCvM,WAAnC,EAAgDsM,GAAhD,CAAnB,CANsC,CAOtC;;;MACA,IAAIK,UAAU,GAAG,KAAKC,cAAL,CAAoBH,YAApB,EAAkCzM,WAAlC,EAA+CkM,YAA/C,EAA6DI,GAA7D,CAAjB,CARsC,CAStC;;;MACA,IAAIK,UAAU,CAACE,0BAAf,EAA2C;QACvC,KAAK1C,SAAL,GAAiB,KAAjB;;QACA,KAAK2C,cAAL,CAAoBR,GAApB,EAAyBC,WAAzB;;QACA;MACH,CAdqC,CAetC;MACA;;;MACA,IAAI,KAAKQ,6BAAL,CAAmCJ,UAAnC,EAA+CF,YAA/C,EAA6DP,YAA7D,CAAJ,EAAgF;QAC5E;QACA;QACAE,YAAY,CAACY,IAAb,CAAkB;UACdC,QAAQ,EAAEX,GADI;UAEd1K,MAAM,EAAE2K,WAFM;UAGdvM,WAHc;UAIdkN,eAAe,EAAE,KAAKC,yBAAL,CAA+BZ,WAA/B,EAA4CD,GAA5C;QAJH,CAAlB;QAMA;MACH,CA3BqC,CA4BtC;MACA;MACA;;;MACA,IAAI,CAACD,QAAD,IAAaA,QAAQ,CAACM,UAAT,CAAoBS,WAApB,GAAkCT,UAAU,CAACS,WAA9D,EAA2E;QACvEf,QAAQ,GAAG;UAAEM,UAAF;UAAcF,YAAd;UAA4BF,WAA5B;UAAyCU,QAAQ,EAAEX,GAAnD;UAAwDtM;QAAxD,CAAX;MACH;IACJ,CAlEG,CAmEJ;IACA;;;IACA,IAAIoM,YAAY,CAAC5D,MAAjB,EAAyB;MACrB,IAAI6E,OAAO,GAAG,IAAd;MACA,IAAIC,SAAS,GAAG,CAAC,CAAjB;;MACA,KAAK,MAAMC,GAAX,IAAkBnB,YAAlB,EAAgC;QAC5B,MAAMoB,KAAK,GAAGD,GAAG,CAACL,eAAJ,CAAoBtQ,KAApB,GAA4B2Q,GAAG,CAACL,eAAJ,CAAoBxQ,MAAhD,IAA0D6Q,GAAG,CAACN,QAAJ,CAAaQ,MAAb,IAAuB,CAAjF,CAAd;;QACA,IAAID,KAAK,GAAGF,SAAZ,EAAuB;UACnBA,SAAS,GAAGE,KAAZ;UACAH,OAAO,GAAGE,GAAV;QACH;MACJ;;MACD,KAAKpD,SAAL,GAAiB,KAAjB;;MACA,KAAK2C,cAAL,CAAoBO,OAAO,CAACJ,QAA5B,EAAsCI,OAAO,CAACzL,MAA9C;;MACA;IACH,CAlFG,CAmFJ;IACA;;;IACA,IAAI,KAAKwI,QAAT,EAAmB;MACf;MACA,KAAKD,SAAL,GAAiB,IAAjB;;MACA,KAAK2C,cAAL,CAAoBT,QAAQ,CAACY,QAA7B,EAAuCZ,QAAQ,CAACE,WAAhD;;MACA;IACH,CA1FG,CA2FJ;IACA;;;IACA,KAAKO,cAAL,CAAoBT,QAAQ,CAACY,QAA7B,EAAuCZ,QAAQ,CAACE,WAAhD;EACH;;EACD/O,MAAM,GAAG;IACL,KAAKgO,kBAAL;;IACA,KAAKH,aAAL,GAAqB,IAArB;IACA,KAAKqC,mBAAL,GAA2B,IAA3B;;IACA,KAAK/C,mBAAL,CAAyBlM,WAAzB;EACH;EACD;;;EACA0G,OAAO,GAAG;IACN,IAAI,KAAKgG,WAAT,EAAsB;MAClB;IACH,CAHK,CAIN;IACA;;;IACA,IAAI,KAAKD,YAAT,EAAuB;MACnByC,YAAY,CAAC,KAAKzC,YAAL,CAAkB1P,KAAnB,EAA0B;QAClCX,GAAG,EAAE,EAD6B;QAElCC,IAAI,EAAE,EAF4B;QAGlCsE,KAAK,EAAE,EAH2B;QAIlCH,MAAM,EAAE,EAJ0B;QAKlCvC,MAAM,EAAE,EAL0B;QAMlCE,KAAK,EAAE,EAN2B;QAOlCgR,UAAU,EAAE,EAPsB;QAQlCC,cAAc,EAAE;MARkB,CAA1B,CAAZ;IAUH;;IACD,IAAI,KAAK9K,KAAT,EAAgB;MACZ,KAAK0I,0BAAL;IACH;;IACD,IAAI,KAAKpO,WAAT,EAAsB;MAClB,KAAKA,WAAL,CAAiBiH,WAAjB,CAA6B7I,SAA7B,CAAuCU,MAAvC,CAA8CwN,gBAA9C;IACH;;IACD,KAAKnM,MAAL;;IACA,KAAKkN,gBAAL,CAAsB3E,QAAtB;;IACA,KAAK1I,WAAL,GAAmB,KAAK6N,YAAL,GAAoB,IAAvC;IACA,KAAKC,WAAL,GAAmB,IAAnB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACII,mBAAmB,GAAG;IAClB,IAAI,KAAKJ,WAAL,IAAoB,CAAC,KAAKpC,SAAL,CAAeM,SAAxC,EAAmD;MAC/C;IACH;;IACD,MAAMyE,YAAY,GAAG,KAAKzC,aAA1B;;IACA,IAAIyC,YAAJ,EAAkB;MACd,KAAKjC,WAAL,GAAmB,KAAKC,cAAL,EAAnB;MACA,KAAKC,YAAL,GAAoB,KAAKhJ,KAAL,CAAW9C,qBAAX,EAApB;MACA,KAAK0L,aAAL,GAAqB,KAAKC,wBAAL,EAArB;MACA,KAAKI,cAAL,GAAsB,KAAK/B,iBAAL,CAAuBf,mBAAvB,GAA6CjJ,qBAA7C,EAAtB;;MACA,MAAMsM,WAAW,GAAG,KAAKC,eAAL,CAAqB,KAAKX,WAA1B,EAAuC,KAAKG,cAA5C,EAA4D8B,YAA5D,CAApB;;MACA,KAAKhB,cAAL,CAAoBgB,YAApB,EAAkCvB,WAAlC;IACH,CAPD,MAQK;MACD,KAAKjG,KAAL;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIyH,wBAAwB,CAACC,WAAD,EAAc;IAClC,KAAKvD,YAAL,GAAoBuD,WAApB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIC,aAAa,CAACnE,SAAD,EAAY;IACrB,KAAKC,mBAAL,GAA2BD,SAA3B,CADqB,CAErB;IACA;;IACA,IAAIA,SAAS,CAACoE,OAAV,CAAkB,KAAK7C,aAAvB,MAA0C,CAAC,CAA/C,EAAkD;MAC9C,KAAKA,aAAL,GAAqB,IAArB;IACH;;IACD,KAAKJ,kBAAL;;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIkD,kBAAkB,CAACC,MAAD,EAAS;IACvB,KAAK5D,eAAL,GAAuB4D,MAAvB;IACA,OAAO,IAAP;EACH;EACD;;;EACAC,sBAAsB,CAACC,kBAAkB,GAAG,IAAtB,EAA4B;IAC9C,KAAKhE,sBAAL,GAA8BgE,kBAA9B;IACA,OAAO,IAAP;EACH;EACD;;;EACAC,iBAAiB,CAACC,aAAa,GAAG,IAAjB,EAAuB;IACpC,KAAKnE,cAAL,GAAsBmE,aAAtB;IACA,OAAO,IAAP;EACH;EACD;;;EACAC,QAAQ,CAACC,OAAO,GAAG,IAAX,EAAiB;IACrB,KAAKtE,QAAL,GAAgBsE,OAAhB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,kBAAkB,CAACC,QAAQ,GAAG,IAAZ,EAAkB;IAChC,KAAKrE,eAAL,GAAuBqE,QAAvB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI5D,SAAS,CAACpJ,MAAD,EAAS;IACd,KAAKiN,OAAL,GAAejN,MAAf;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIkN,kBAAkB,CAACC,MAAD,EAAS;IACvB,KAAKnE,QAAL,GAAgBmE,MAAhB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIC,kBAAkB,CAACD,MAAD,EAAS;IACvB,KAAKlE,QAAL,GAAgBkE,MAAhB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIE,qBAAqB,CAACC,QAAD,EAAW;IAC5B,KAAKC,wBAAL,GAAgCD,QAAhC;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;;;EACI1C,eAAe,CAACP,UAAD,EAAaE,aAAb,EAA4BG,GAA5B,EAAiC;IAC5C,IAAI8C,CAAJ;;IACA,IAAI9C,GAAG,CAACtK,OAAJ,IAAe,QAAnB,EAA6B;MACzB;MACA;MACAoN,CAAC,GAAGnD,UAAU,CAACnR,IAAX,GAAkBmR,UAAU,CAACrP,KAAX,GAAmB,CAAzC;IACH,CAJD,MAKK;MACD,MAAMyS,MAAM,GAAG,KAAKC,MAAL,KAAgBrD,UAAU,CAAC7M,KAA3B,GAAmC6M,UAAU,CAACnR,IAA7D;MACA,MAAMyU,IAAI,GAAG,KAAKD,MAAL,KAAgBrD,UAAU,CAACnR,IAA3B,GAAkCmR,UAAU,CAAC7M,KAA1D;MACAgQ,CAAC,GAAG9C,GAAG,CAACtK,OAAJ,IAAe,OAAf,GAAyBqN,MAAzB,GAAkCE,IAAtC;IACH,CAX2C,CAY5C;IACA;;;IACA,IAAIpD,aAAa,CAACrR,IAAd,GAAqB,CAAzB,EAA4B;MACxBsU,CAAC,IAAIjD,aAAa,CAACrR,IAAnB;IACH;;IACD,IAAI0U,CAAJ;;IACA,IAAIlD,GAAG,CAACrK,OAAJ,IAAe,QAAnB,EAA6B;MACzBuN,CAAC,GAAGvD,UAAU,CAACpR,GAAX,GAAiBoR,UAAU,CAACvP,MAAX,GAAoB,CAAzC;IACH,CAFD,MAGK;MACD8S,CAAC,GAAGlD,GAAG,CAACrK,OAAJ,IAAe,KAAf,GAAuBgK,UAAU,CAACpR,GAAlC,GAAwCoR,UAAU,CAAChN,MAAvD;IACH,CAvB2C,CAwB5C;IACA;IACA;IACA;IACA;;;IACA,IAAIkN,aAAa,CAACtR,GAAd,GAAoB,CAAxB,EAA2B;MACvB2U,CAAC,IAAIrD,aAAa,CAACtR,GAAnB;IACH;;IACD,OAAO;MAAEuU,CAAF;MAAKI;IAAL,CAAP;EACH;EACD;AACJ;AACA;AACA;;;EACI9C,gBAAgB,CAACH,WAAD,EAAcvM,WAAd,EAA2BsM,GAA3B,EAAgC;IAC5C;IACA;IACA,IAAImD,aAAJ;;IACA,IAAInD,GAAG,CAACpK,QAAJ,IAAgB,QAApB,EAA8B;MAC1BuN,aAAa,GAAG,CAACzP,WAAW,CAACpD,KAAb,GAAqB,CAArC;IACH,CAFD,MAGK,IAAI0P,GAAG,CAACpK,QAAJ,KAAiB,OAArB,EAA8B;MAC/BuN,aAAa,GAAG,KAAKH,MAAL,KAAgB,CAACtP,WAAW,CAACpD,KAA7B,GAAqC,CAArD;IACH,CAFI,MAGA;MACD6S,aAAa,GAAG,KAAKH,MAAL,KAAgB,CAAhB,GAAoB,CAACtP,WAAW,CAACpD,KAAjD;IACH;;IACD,IAAI8S,aAAJ;;IACA,IAAIpD,GAAG,CAACnK,QAAJ,IAAgB,QAApB,EAA8B;MAC1BuN,aAAa,GAAG,CAAC1P,WAAW,CAACtD,MAAb,GAAsB,CAAtC;IACH,CAFD,MAGK;MACDgT,aAAa,GAAGpD,GAAG,CAACnK,QAAJ,IAAgB,KAAhB,GAAwB,CAAxB,GAA4B,CAACnC,WAAW,CAACtD,MAAzD;IACH,CAnB2C,CAoB5C;;;IACA,OAAO;MACH0S,CAAC,EAAE7C,WAAW,CAAC6C,CAAZ,GAAgBK,aADhB;MAEHD,CAAC,EAAEjD,WAAW,CAACiD,CAAZ,GAAgBE;IAFhB,CAAP;EAIH;EACD;;;EACA9C,cAAc,CAAC+C,KAAD,EAAQC,cAAR,EAAwBrT,QAAxB,EAAkC0Q,QAAlC,EAA4C;IACtD;IACA;IACA,MAAMpL,OAAO,GAAGgO,4BAA4B,CAACD,cAAD,CAA5C;IACA,IAAI;MAAER,CAAF;MAAKI;IAAL,IAAWG,KAAf;;IACA,IAAI7N,OAAO,GAAG,KAAKgO,UAAL,CAAgB7C,QAAhB,EAA0B,GAA1B,CAAd;;IACA,IAAIlL,OAAO,GAAG,KAAK+N,UAAL,CAAgB7C,QAAhB,EAA0B,GAA1B,CAAd,CANsD,CAOtD;;;IACA,IAAInL,OAAJ,EAAa;MACTsN,CAAC,IAAItN,OAAL;IACH;;IACD,IAAIC,OAAJ,EAAa;MACTyN,CAAC,IAAIzN,OAAL;IACH,CAbqD,CActD;;;IACA,IAAIgO,YAAY,GAAG,IAAIX,CAAvB;IACA,IAAIY,aAAa,GAAGZ,CAAC,GAAGvN,OAAO,CAACjF,KAAZ,GAAoBL,QAAQ,CAACK,KAAjD;IACA,IAAIqT,WAAW,GAAG,IAAIT,CAAtB;IACA,IAAIU,cAAc,GAAGV,CAAC,GAAG3N,OAAO,CAACnF,MAAZ,GAAqBH,QAAQ,CAACG,MAAnD,CAlBsD,CAmBtD;;IACA,IAAIyT,YAAY,GAAG,KAAKC,kBAAL,CAAwBvO,OAAO,CAACjF,KAAhC,EAAuCmT,YAAvC,EAAqDC,aAArD,CAAnB;;IACA,IAAIK,aAAa,GAAG,KAAKD,kBAAL,CAAwBvO,OAAO,CAACnF,MAAhC,EAAwCuT,WAAxC,EAAqDC,cAArD,CAApB;;IACA,IAAI9C,WAAW,GAAG+C,YAAY,GAAGE,aAAjC;IACA,OAAO;MACHjD,WADG;MAEHP,0BAA0B,EAAEhL,OAAO,CAACjF,KAAR,GAAgBiF,OAAO,CAACnF,MAAxB,KAAmC0Q,WAF5D;MAGHkD,wBAAwB,EAAED,aAAa,KAAKxO,OAAO,CAACnF,MAHjD;MAIH6T,0BAA0B,EAAEJ,YAAY,IAAItO,OAAO,CAACjF;IAJjD,CAAP;EAMH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACImQ,6BAA6B,CAACQ,GAAD,EAAMoC,KAAN,EAAapT,QAAb,EAAuB;IAChD,IAAI,KAAK+N,sBAAT,EAAiC;MAC7B,MAAMkG,eAAe,GAAGjU,QAAQ,CAAC0C,MAAT,GAAkB0Q,KAAK,CAACH,CAAhD;MACA,MAAMiB,cAAc,GAAGlU,QAAQ,CAAC6C,KAAT,GAAiBuQ,KAAK,CAACP,CAA9C;MACA,MAAM9H,SAAS,GAAGoJ,aAAa,CAAC,KAAKrT,WAAL,CAAiBgJ,SAAjB,GAA6BiB,SAA9B,CAA/B;MACA,MAAMD,QAAQ,GAAGqJ,aAAa,CAAC,KAAKrT,WAAL,CAAiBgJ,SAAjB,GAA6BgB,QAA9B,CAA9B;MACA,MAAMsJ,WAAW,GAAGpD,GAAG,CAAC+C,wBAAJ,IAAiChJ,SAAS,IAAI,IAAb,IAAqBA,SAAS,IAAIkJ,eAAvF;MACA,MAAMI,aAAa,GAAGrD,GAAG,CAACgD,0BAAJ,IAAmClJ,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,IAAIoJ,cAAzF;MACA,OAAOE,WAAW,IAAIC,aAAtB;IACH;;IACD,OAAO,KAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,oBAAoB,CAACC,KAAD,EAAQlB,cAAR,EAAwBvR,cAAxB,EAAwC;IACxD;IACA;IACA;IACA,IAAI,KAAKqP,mBAAL,IAA4B,KAAKnD,eAArC,EAAsD;MAClD,OAAO;QACH6E,CAAC,EAAE0B,KAAK,CAAC1B,CAAN,GAAU,KAAK1B,mBAAL,CAAyB0B,CADnC;QAEHI,CAAC,EAAEsB,KAAK,CAACtB,CAAN,GAAU,KAAK9B,mBAAL,CAAyB8B;MAFnC,CAAP;IAIH,CATuD,CAUxD;IACA;;;IACA,MAAM3N,OAAO,GAAGgO,4BAA4B,CAACD,cAAD,CAA5C;IACA,MAAMrT,QAAQ,GAAG,KAAKoP,aAAtB,CAbwD,CAcxD;IACA;;IACA,MAAMoF,aAAa,GAAGzS,IAAI,CAAC0S,GAAL,CAASF,KAAK,CAAC1B,CAAN,GAAUvN,OAAO,CAACjF,KAAlB,GAA0BL,QAAQ,CAACK,KAA5C,EAAmD,CAAnD,CAAtB;IACA,MAAMqU,cAAc,GAAG3S,IAAI,CAAC0S,GAAL,CAASF,KAAK,CAACtB,CAAN,GAAU3N,OAAO,CAACnF,MAAlB,GAA2BH,QAAQ,CAACG,MAA7C,EAAqD,CAArD,CAAvB;IACA,MAAMwU,WAAW,GAAG5S,IAAI,CAAC0S,GAAL,CAASzU,QAAQ,CAAC1B,GAAT,GAAewD,cAAc,CAACxD,GAA9B,GAAoCiW,KAAK,CAACtB,CAAnD,EAAsD,CAAtD,CAApB;IACA,MAAM2B,YAAY,GAAG7S,IAAI,CAAC0S,GAAL,CAASzU,QAAQ,CAACzB,IAAT,GAAgBuD,cAAc,CAACvD,IAA/B,GAAsCgW,KAAK,CAAC1B,CAArD,EAAwD,CAAxD,CAArB,CAnBwD,CAoBxD;;IACA,IAAIgC,KAAK,GAAG,CAAZ;IACA,IAAIC,KAAK,GAAG,CAAZ,CAtBwD,CAuBxD;IACA;IACA;;IACA,IAAIxP,OAAO,CAACjF,KAAR,IAAiBL,QAAQ,CAACK,KAA9B,EAAqC;MACjCwU,KAAK,GAAGD,YAAY,IAAI,CAACJ,aAAzB;IACH,CAFD,MAGK;MACDK,KAAK,GAAGN,KAAK,CAAC1B,CAAN,GAAU,KAAK5E,eAAf,GAAiCjO,QAAQ,CAACzB,IAAT,GAAgBuD,cAAc,CAACvD,IAA/B,GAAsCgW,KAAK,CAAC1B,CAA7E,GAAiF,CAAzF;IACH;;IACD,IAAIvN,OAAO,CAACnF,MAAR,IAAkBH,QAAQ,CAACG,MAA/B,EAAuC;MACnC2U,KAAK,GAAGH,WAAW,IAAI,CAACD,cAAxB;IACH,CAFD,MAGK;MACDI,KAAK,GAAGP,KAAK,CAACtB,CAAN,GAAU,KAAKhF,eAAf,GAAiCjO,QAAQ,CAAC1B,GAAT,GAAewD,cAAc,CAACxD,GAA9B,GAAoCiW,KAAK,CAACtB,CAA3E,GAA+E,CAAvF;IACH;;IACD,KAAK9B,mBAAL,GAA2B;MAAE0B,CAAC,EAAEgC,KAAL;MAAY5B,CAAC,EAAE6B;IAAf,CAA3B;IACA,OAAO;MACHjC,CAAC,EAAE0B,KAAK,CAAC1B,CAAN,GAAUgC,KADV;MAEH5B,CAAC,EAAEsB,KAAK,CAACtB,CAAN,GAAU6B;IAFV,CAAP;EAIH;EACD;AACJ;AACA;AACA;AACA;;;EACIvE,cAAc,CAACG,QAAD,EAAWV,WAAX,EAAwB;IAClC,KAAK+E,mBAAL,CAAyBrE,QAAzB;;IACA,KAAKsE,wBAAL,CAA8BhF,WAA9B,EAA2CU,QAA3C;;IACA,KAAKuE,qBAAL,CAA2BjF,WAA3B,EAAwCU,QAAxC;;IACA,IAAIA,QAAQ,CAAC9L,UAAb,EAAyB;MACrB,KAAKsQ,gBAAL,CAAsBxE,QAAQ,CAAC9L,UAA/B;IACH,CANiC,CAOlC;;;IACA,KAAKkK,aAAL,GAAqB4B,QAArB,CARkC,CASlC;IACA;IACA;;IACA,IAAI,KAAKvC,gBAAL,CAAsBgH,SAAtB,CAAgClJ,MAApC,EAA4C;MACxC,MAAMjG,wBAAwB,GAAG,KAAKoP,oBAAL,EAAjC;;MACA,MAAMC,WAAW,GAAG,IAAIvP,8BAAJ,CAAmC4K,QAAnC,EAA6C1K,wBAA7C,CAApB;;MACA,KAAKmI,gBAAL,CAAsB9G,IAAtB,CAA2BgO,WAA3B;IACH;;IACD,KAAKxG,gBAAL,GAAwB,KAAxB;EACH;EACD;;;EACAkG,mBAAmB,CAACrE,QAAD,EAAW;IAC1B,IAAI,CAAC,KAAKkC,wBAAV,EAAoC;MAChC;IACH;;IACD,MAAM0C,QAAQ,GAAG,KAAK3G,YAAL,CAAkB3B,gBAAlB,CAAmC,KAAK4F,wBAAxC,CAAjB;;IACA,IAAI2C,OAAJ;IACA,IAAIC,OAAO,GAAG9E,QAAQ,CAAC9K,QAAvB;;IACA,IAAI8K,QAAQ,CAAC/K,QAAT,KAAsB,QAA1B,EAAoC;MAChC4P,OAAO,GAAG,QAAV;IACH,CAFD,MAGK,IAAI,KAAKxC,MAAL,EAAJ,EAAmB;MACpBwC,OAAO,GAAG7E,QAAQ,CAAC/K,QAAT,KAAsB,OAAtB,GAAgC,OAAhC,GAA0C,MAApD;IACH,CAFI,MAGA;MACD4P,OAAO,GAAG7E,QAAQ,CAAC/K,QAAT,KAAsB,OAAtB,GAAgC,MAAhC,GAAyC,OAAnD;IACH;;IACD,KAAK,IAAIsH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqI,QAAQ,CAACrJ,MAA7B,EAAqCgB,CAAC,EAAtC,EAA0C;MACtCqI,QAAQ,CAACrI,CAAD,CAAR,CAAYhO,KAAZ,CAAkBwW,eAAlB,GAAqC,GAAEF,OAAQ,IAAGC,OAAQ,EAA1D;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACI5E,yBAAyB,CAACvL,MAAD,EAASqL,QAAT,EAAmB;IACxC,MAAM1Q,QAAQ,GAAG,KAAKoP,aAAtB;;IACA,MAAMsG,KAAK,GAAG,KAAK3C,MAAL,EAAd;;IACA,IAAI5S,MAAJ,EAAY7B,GAAZ,EAAiBoE,MAAjB;;IACA,IAAIgO,QAAQ,CAAC9K,QAAT,KAAsB,KAA1B,EAAiC;MAC7B;MACAtH,GAAG,GAAG+G,MAAM,CAAC4N,CAAb;MACA9S,MAAM,GAAGH,QAAQ,CAACG,MAAT,GAAkB7B,GAAlB,GAAwB,KAAK2P,eAAtC;IACH,CAJD,MAKK,IAAIyC,QAAQ,CAAC9K,QAAT,KAAsB,QAA1B,EAAoC;MACrC;MACA;MACA;MACAlD,MAAM,GAAG1C,QAAQ,CAACG,MAAT,GAAkBkF,MAAM,CAAC4N,CAAzB,GAA6B,KAAKhF,eAAL,GAAuB,CAA7D;MACA9N,MAAM,GAAGH,QAAQ,CAACG,MAAT,GAAkBuC,MAAlB,GAA2B,KAAKuL,eAAzC;IACH,CANI,MAOA;MACD;MACA;MACA;MACA;MACA,MAAM0H,8BAA8B,GAAG5T,IAAI,CAAC6T,GAAL,CAAS5V,QAAQ,CAAC0C,MAAT,GAAkB2C,MAAM,CAAC4N,CAAzB,GAA6BjT,QAAQ,CAAC1B,GAA/C,EAAoD+G,MAAM,CAAC4N,CAA3D,CAAvC;MACA,MAAM4C,cAAc,GAAG,KAAKlI,oBAAL,CAA0BxN,MAAjD;MACAA,MAAM,GAAGwV,8BAA8B,GAAG,CAA1C;MACArX,GAAG,GAAG+G,MAAM,CAAC4N,CAAP,GAAW0C,8BAAjB;;MACA,IAAIxV,MAAM,GAAG0V,cAAT,IAA2B,CAAC,KAAKhH,gBAAjC,IAAqD,CAAC,KAAKf,cAA/D,EAA+E;QAC3ExP,GAAG,GAAG+G,MAAM,CAAC4N,CAAP,GAAW4C,cAAc,GAAG,CAAlC;MACH;IACJ,CA5BuC,CA6BxC;;;IACA,MAAMC,4BAA4B,GAAIpF,QAAQ,CAAC/K,QAAT,KAAsB,OAAtB,IAAiC,CAAC+P,KAAnC,IAA8ChF,QAAQ,CAAC/K,QAAT,KAAsB,KAAtB,IAA+B+P,KAAlH,CA9BwC,CA+BxC;;IACA,MAAMK,2BAA2B,GAAIrF,QAAQ,CAAC/K,QAAT,KAAsB,KAAtB,IAA+B,CAAC+P,KAAjC,IAA4ChF,QAAQ,CAAC/K,QAAT,KAAsB,OAAtB,IAAiC+P,KAAjH;IACA,IAAIrV,KAAJ,EAAW9B,IAAX,EAAiBsE,KAAjB;;IACA,IAAIkT,2BAAJ,EAAiC;MAC7BlT,KAAK,GAAG7C,QAAQ,CAACK,KAAT,GAAiBgF,MAAM,CAACwN,CAAxB,GAA4B,KAAK5E,eAAzC;MACA5N,KAAK,GAAGgF,MAAM,CAACwN,CAAP,GAAW,KAAK5E,eAAxB;IACH,CAHD,MAIK,IAAI6H,4BAAJ,EAAkC;MACnCvX,IAAI,GAAG8G,MAAM,CAACwN,CAAd;MACAxS,KAAK,GAAGL,QAAQ,CAAC6C,KAAT,GAAiBwC,MAAM,CAACwN,CAAhC;IACH,CAHI,MAIA;MACD;MACA;MACA;MACA;MACA,MAAM8C,8BAA8B,GAAG5T,IAAI,CAAC6T,GAAL,CAAS5V,QAAQ,CAAC6C,KAAT,GAAiBwC,MAAM,CAACwN,CAAxB,GAA4B7S,QAAQ,CAACzB,IAA9C,EAAoD8G,MAAM,CAACwN,CAA3D,CAAvC;MACA,MAAMmD,aAAa,GAAG,KAAKrI,oBAAL,CAA0BtN,KAAhD;MACAA,KAAK,GAAGsV,8BAA8B,GAAG,CAAzC;MACApX,IAAI,GAAG8G,MAAM,CAACwN,CAAP,GAAW8C,8BAAlB;;MACA,IAAItV,KAAK,GAAG2V,aAAR,IAAyB,CAAC,KAAKnH,gBAA/B,IAAmD,CAAC,KAAKf,cAA7D,EAA6E;QACzEvP,IAAI,GAAG8G,MAAM,CAACwN,CAAP,GAAWmD,aAAa,GAAG,CAAlC;MACH;IACJ;;IACD,OAAO;MAAE1X,GAAG,EAAEA,GAAP;MAAYC,IAAI,EAAEA,IAAlB;MAAwBmE,MAAM,EAAEA,MAAhC;MAAwCG,KAAK,EAAEA,KAA/C;MAAsDxC,KAAtD;MAA6DF;IAA7D,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI8U,qBAAqB,CAAC5P,MAAD,EAASqL,QAAT,EAAmB;IACpC,MAAMC,eAAe,GAAG,KAAKC,yBAAL,CAA+BvL,MAA/B,EAAuCqL,QAAvC,CAAxB,CADoC,CAEpC;IACA;;;IACA,IAAI,CAAC,KAAK7B,gBAAN,IAA0B,CAAC,KAAKf,cAApC,EAAoD;MAChD6C,eAAe,CAACxQ,MAAhB,GAAyB4B,IAAI,CAAC6T,GAAL,CAASjF,eAAe,CAACxQ,MAAzB,EAAiC,KAAKwN,oBAAL,CAA0BxN,MAA3D,CAAzB;MACAwQ,eAAe,CAACtQ,KAAhB,GAAwB0B,IAAI,CAAC6T,GAAL,CAASjF,eAAe,CAACtQ,KAAzB,EAAgC,KAAKsN,oBAAL,CAA0BtN,KAA1D,CAAxB;IACH;;IACD,MAAM4V,MAAM,GAAG,EAAf;;IACA,IAAI,KAAKC,iBAAL,EAAJ,EAA8B;MAC1BD,MAAM,CAAC3X,GAAP,GAAa2X,MAAM,CAAC1X,IAAP,GAAc,GAA3B;MACA0X,MAAM,CAACvT,MAAP,GAAgBuT,MAAM,CAACpT,KAAP,GAAeoT,MAAM,CAAChL,SAAP,GAAmBgL,MAAM,CAACjL,QAAP,GAAkB,EAApE;MACAiL,MAAM,CAAC5V,KAAP,GAAe4V,MAAM,CAAC9V,MAAP,GAAgB,MAA/B;IACH,CAJD,MAKK;MACD,MAAM8K,SAAS,GAAG,KAAKnK,WAAL,CAAiBgJ,SAAjB,GAA6BmB,SAA/C;;MACA,MAAMD,QAAQ,GAAG,KAAKlK,WAAL,CAAiBgJ,SAAjB,GAA6BkB,QAA9C;;MACAiL,MAAM,CAAC9V,MAAP,GAAgBxD,mBAAmB,CAACgU,eAAe,CAACxQ,MAAjB,CAAnC;MACA8V,MAAM,CAAC3X,GAAP,GAAa3B,mBAAmB,CAACgU,eAAe,CAACrS,GAAjB,CAAhC;MACA2X,MAAM,CAACvT,MAAP,GAAgB/F,mBAAmB,CAACgU,eAAe,CAACjO,MAAjB,CAAnC;MACAuT,MAAM,CAAC5V,KAAP,GAAe1D,mBAAmB,CAACgU,eAAe,CAACtQ,KAAjB,CAAlC;MACA4V,MAAM,CAAC1X,IAAP,GAAc5B,mBAAmB,CAACgU,eAAe,CAACpS,IAAjB,CAAjC;MACA0X,MAAM,CAACpT,KAAP,GAAelG,mBAAmB,CAACgU,eAAe,CAAC9N,KAAjB,CAAlC,CARC,CASD;;MACA,IAAI6N,QAAQ,CAAC/K,QAAT,KAAsB,QAA1B,EAAoC;QAChCsQ,MAAM,CAAC5E,UAAP,GAAoB,QAApB;MACH,CAFD,MAGK;QACD4E,MAAM,CAAC5E,UAAP,GAAoBX,QAAQ,CAAC/K,QAAT,KAAsB,KAAtB,GAA8B,UAA9B,GAA2C,YAA/D;MACH;;MACD,IAAI+K,QAAQ,CAAC9K,QAAT,KAAsB,QAA1B,EAAoC;QAChCqQ,MAAM,CAAC3E,cAAP,GAAwB,QAAxB;MACH,CAFD,MAGK;QACD2E,MAAM,CAAC3E,cAAP,GAAwBZ,QAAQ,CAAC9K,QAAT,KAAsB,QAAtB,GAAiC,UAAjC,GAA8C,YAAtE;MACH;;MACD,IAAIqF,SAAJ,EAAe;QACXgL,MAAM,CAAChL,SAAP,GAAmBtO,mBAAmB,CAACsO,SAAD,CAAtC;MACH;;MACD,IAAID,QAAJ,EAAc;QACViL,MAAM,CAACjL,QAAP,GAAkBrO,mBAAmB,CAACqO,QAAD,CAArC;MACH;IACJ;;IACD,KAAK2C,oBAAL,GAA4BgD,eAA5B;IACAS,YAAY,CAAC,KAAKzC,YAAL,CAAkB1P,KAAnB,EAA0BgX,MAA1B,CAAZ;EACH;EACD;;;EACA9G,uBAAuB,GAAG;IACtBiC,YAAY,CAAC,KAAKzC,YAAL,CAAkB1P,KAAnB,EAA0B;MAClCX,GAAG,EAAE,GAD6B;MAElCC,IAAI,EAAE,GAF4B;MAGlCsE,KAAK,EAAE,GAH2B;MAIlCH,MAAM,EAAE,GAJ0B;MAKlCvC,MAAM,EAAE,EAL0B;MAMlCE,KAAK,EAAE,EAN2B;MAOlCgR,UAAU,EAAE,EAPsB;MAQlCC,cAAc,EAAE;IARkB,CAA1B,CAAZ;EAUH;EACD;;;EACApC,0BAA0B,GAAG;IACzBkC,YAAY,CAAC,KAAK5K,KAAL,CAAWvH,KAAZ,EAAmB;MAC3BX,GAAG,EAAE,EADsB;MAE3BC,IAAI,EAAE,EAFqB;MAG3BmE,MAAM,EAAE,EAHmB;MAI3BG,KAAK,EAAE,EAJoB;MAK3B6N,QAAQ,EAAE,EALiB;MAM3ByF,SAAS,EAAE;IANgB,CAAnB,CAAZ;EAQH;EACD;;;EACAnB,wBAAwB,CAAChF,WAAD,EAAcU,QAAd,EAAwB;IAC5C,MAAMuF,MAAM,GAAG,EAAf;;IACA,MAAMG,gBAAgB,GAAG,KAAKF,iBAAL,EAAzB;;IACA,MAAMG,qBAAqB,GAAG,KAAKtI,sBAAnC;;IACA,MAAMhK,MAAM,GAAG,KAAKjD,WAAL,CAAiBgJ,SAAjB,EAAf;;IACA,IAAIsM,gBAAJ,EAAsB;MAClB,MAAMtU,cAAc,GAAG,KAAK3D,cAAL,CAAoBa,yBAApB,EAAvB;;MACAoS,YAAY,CAAC6E,MAAD,EAAS,KAAKK,iBAAL,CAAuB5F,QAAvB,EAAiCV,WAAjC,EAA8ClO,cAA9C,CAAT,CAAZ;MACAsP,YAAY,CAAC6E,MAAD,EAAS,KAAKM,iBAAL,CAAuB7F,QAAvB,EAAiCV,WAAjC,EAA8ClO,cAA9C,CAAT,CAAZ;IACH,CAJD,MAKK;MACDmU,MAAM,CAACvF,QAAP,GAAkB,QAAlB;IACH,CAZ2C,CAa5C;IACA;IACA;IACA;IACA;;;IACA,IAAI8F,eAAe,GAAG,EAAtB;;IACA,IAAIjR,OAAO,GAAG,KAAKgO,UAAL,CAAgB7C,QAAhB,EAA0B,GAA1B,CAAd;;IACA,IAAIlL,OAAO,GAAG,KAAK+N,UAAL,CAAgB7C,QAAhB,EAA0B,GAA1B,CAAd;;IACA,IAAInL,OAAJ,EAAa;MACTiR,eAAe,IAAK,cAAajR,OAAQ,MAAzC;IACH;;IACD,IAAIC,OAAJ,EAAa;MACTgR,eAAe,IAAK,cAAahR,OAAQ,KAAzC;IACH;;IACDyQ,MAAM,CAACE,SAAP,GAAmBK,eAAe,CAACC,IAAhB,EAAnB,CA3B4C,CA4B5C;IACA;IACA;IACA;IACA;;IACA,IAAI1S,MAAM,CAACkH,SAAX,EAAsB;MAClB,IAAImL,gBAAJ,EAAsB;QAClBH,MAAM,CAAChL,SAAP,GAAmBtO,mBAAmB,CAACoH,MAAM,CAACkH,SAAR,CAAtC;MACH,CAFD,MAGK,IAAIoL,qBAAJ,EAA2B;QAC5BJ,MAAM,CAAChL,SAAP,GAAmB,EAAnB;MACH;IACJ;;IACD,IAAIlH,MAAM,CAACiH,QAAX,EAAqB;MACjB,IAAIoL,gBAAJ,EAAsB;QAClBH,MAAM,CAACjL,QAAP,GAAkBrO,mBAAmB,CAACoH,MAAM,CAACiH,QAAR,CAArC;MACH,CAFD,MAGK,IAAIqL,qBAAJ,EAA2B;QAC5BJ,MAAM,CAACjL,QAAP,GAAkB,EAAlB;MACH;IACJ;;IACDoG,YAAY,CAAC,KAAK5K,KAAL,CAAWvH,KAAZ,EAAmBgX,MAAnB,CAAZ;EACH;EACD;;;EACAK,iBAAiB,CAAC5F,QAAD,EAAWV,WAAX,EAAwBlO,cAAxB,EAAwC;IACrD;IACA;IACA,IAAImU,MAAM,GAAG;MAAE3X,GAAG,EAAE,EAAP;MAAWoE,MAAM,EAAE;IAAnB,CAAb;;IACA,IAAIwN,YAAY,GAAG,KAAKC,gBAAL,CAAsBH,WAAtB,EAAmC,KAAKR,YAAxC,EAAsDkB,QAAtD,CAAnB;;IACA,IAAI,KAAK9C,SAAT,EAAoB;MAChBsC,YAAY,GAAG,KAAKoE,oBAAL,CAA0BpE,YAA1B,EAAwC,KAAKV,YAA7C,EAA2D1N,cAA3D,CAAf;IACH,CAPoD,CAQrD;IACA;;;IACA,IAAI4O,QAAQ,CAAC9K,QAAT,KAAsB,QAA1B,EAAoC;MAChC;MACA;MACA,MAAM8Q,cAAc,GAAG,KAAKjY,SAAL,CAAeK,eAAf,CAA+B6X,YAAtD;MACAV,MAAM,CAACvT,MAAP,GAAiB,GAAEgU,cAAc,IAAIxG,YAAY,CAAC+C,CAAb,GAAiB,KAAKzD,YAAL,CAAkBrP,MAAvC,CAA+C,IAAhF;IACH,CALD,MAMK;MACD8V,MAAM,CAAC3X,GAAP,GAAa3B,mBAAmB,CAACuT,YAAY,CAAC+C,CAAd,CAAhC;IACH;;IACD,OAAOgD,MAAP;EACH;EACD;;;EACAM,iBAAiB,CAAC7F,QAAD,EAAWV,WAAX,EAAwBlO,cAAxB,EAAwC;IACrD;IACA;IACA,IAAImU,MAAM,GAAG;MAAE1X,IAAI,EAAE,EAAR;MAAYsE,KAAK,EAAE;IAAnB,CAAb;;IACA,IAAIqN,YAAY,GAAG,KAAKC,gBAAL,CAAsBH,WAAtB,EAAmC,KAAKR,YAAxC,EAAsDkB,QAAtD,CAAnB;;IACA,IAAI,KAAK9C,SAAT,EAAoB;MAChBsC,YAAY,GAAG,KAAKoE,oBAAL,CAA0BpE,YAA1B,EAAwC,KAAKV,YAA7C,EAA2D1N,cAA3D,CAAf;IACH,CAPoD,CAQrD;IACA;IACA;IACA;;;IACA,IAAI8U,uBAAJ;;IACA,IAAI,KAAK7D,MAAL,EAAJ,EAAmB;MACf6D,uBAAuB,GAAGlG,QAAQ,CAAC/K,QAAT,KAAsB,KAAtB,GAA8B,MAA9B,GAAuC,OAAjE;IACH,CAFD,MAGK;MACDiR,uBAAuB,GAAGlG,QAAQ,CAAC/K,QAAT,KAAsB,KAAtB,GAA8B,OAA9B,GAAwC,MAAlE;IACH,CAlBoD,CAmBrD;IACA;;;IACA,IAAIiR,uBAAuB,KAAK,OAAhC,EAAyC;MACrC,MAAMC,aAAa,GAAG,KAAKpY,SAAL,CAAeK,eAAf,CAA+BgY,WAArD;MACAb,MAAM,CAACpT,KAAP,GAAgB,GAAEgU,aAAa,IAAI3G,YAAY,CAAC2C,CAAb,GAAiB,KAAKrD,YAAL,CAAkBnP,KAAvC,CAA8C,IAA7E;IACH,CAHD,MAIK;MACD4V,MAAM,CAAC1X,IAAP,GAAc5B,mBAAmB,CAACuT,YAAY,CAAC2C,CAAd,CAAjC;IACH;;IACD,OAAOoD,MAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIb,oBAAoB,GAAG;IACnB;IACA,MAAM2B,YAAY,GAAG,KAAKxH,cAAL,EAArB;;IACA,MAAMyH,aAAa,GAAG,KAAKxQ,KAAL,CAAW9C,qBAAX,EAAtB,CAHmB,CAInB;IACA;IACA;;;IACA,MAAMuT,qBAAqB,GAAG,KAAK/I,YAAL,CAAkBgJ,GAAlB,CAAsB3V,UAAU,IAAI;MAC9D,OAAOA,UAAU,CAACE,aAAX,GAA2BC,aAA3B,CAAyCgC,qBAAzC,EAAP;IACH,CAF6B,CAA9B;;IAGA,OAAO;MACHyT,eAAe,EAAEpU,2BAA2B,CAACgU,YAAD,EAAeE,qBAAf,CADzC;MAEHG,mBAAmB,EAAEhV,4BAA4B,CAAC2U,YAAD,EAAeE,qBAAf,CAF9C;MAGHI,gBAAgB,EAAEtU,2BAA2B,CAACiU,aAAD,EAAgBC,qBAAhB,CAH1C;MAIHK,oBAAoB,EAAElV,4BAA4B,CAAC4U,aAAD,EAAgBC,qBAAhB;IAJ/C,CAAP;EAMH;EACD;;;EACApD,kBAAkB,CAAC5H,MAAD,EAAS,GAAGsL,SAAZ,EAAuB;IACrC,OAAOA,SAAS,CAACC,MAAV,CAAiB,CAACC,YAAD,EAAeC,eAAf,KAAmC;MACvD,OAAOD,YAAY,GAAG1V,IAAI,CAAC0S,GAAL,CAASiD,eAAT,EAA0B,CAA1B,CAAtB;IACH,CAFM,EAEJzL,MAFI,CAAP;EAGH;EACD;;;EACAoD,wBAAwB,GAAG;IACvB;IACA;IACA;IACA;IACA;IACA,MAAMhP,KAAK,GAAG,KAAK5B,SAAL,CAAeK,eAAf,CAA+BgY,WAA7C;IACA,MAAM3W,MAAM,GAAG,KAAK1B,SAAL,CAAeK,eAAf,CAA+B6X,YAA9C;;IACA,MAAM7U,cAAc,GAAG,KAAK3D,cAAL,CAAoBa,yBAApB,EAAvB;;IACA,OAAO;MACHV,GAAG,EAAEwD,cAAc,CAACxD,GAAf,GAAqB,KAAK2P,eAD5B;MAEH1P,IAAI,EAAEuD,cAAc,CAACvD,IAAf,GAAsB,KAAK0P,eAF9B;MAGHpL,KAAK,EAAEf,cAAc,CAACvD,IAAf,GAAsB8B,KAAtB,GAA8B,KAAK4N,eAHvC;MAIHvL,MAAM,EAAEZ,cAAc,CAACxD,GAAf,GAAqB6B,MAArB,GAA8B,KAAK8N,eAJxC;MAKH5N,KAAK,EAAEA,KAAK,GAAG,IAAI,KAAK4N,eALrB;MAMH9N,MAAM,EAAEA,MAAM,GAAG,IAAI,KAAK8N;IANvB,CAAP;EAQH;EACD;;;EACA8E,MAAM,GAAG;IACL,OAAO,KAAKjS,WAAL,CAAiB6J,YAAjB,OAAoC,KAA3C;EACH;EACD;;;EACAuL,iBAAiB,GAAG;IAChB,OAAO,CAAC,KAAKnI,sBAAN,IAAgC,KAAKH,SAA5C;EACH;EACD;;;EACA2F,UAAU,CAAC7C,QAAD,EAAWiH,IAAX,EAAiB;IACvB,IAAIA,IAAI,KAAK,GAAb,EAAkB;MACd;MACA;MACA,OAAOjH,QAAQ,CAACnL,OAAT,IAAoB,IAApB,GAA2B,KAAK8I,QAAhC,GAA2CqC,QAAQ,CAACnL,OAA3D;IACH;;IACD,OAAOmL,QAAQ,CAAClL,OAAT,IAAoB,IAApB,GAA2B,KAAK8I,QAAhC,GAA2CoC,QAAQ,CAAClL,OAA3D;EACH;EACD;;;EACAkJ,kBAAkB,GAAG;IACjB,IAAI,OAAOvN,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;MAC/C,IAAI,CAAC,KAAKqM,mBAAL,CAAyBvB,MAA9B,EAAsC;QAClC,MAAM1L,KAAK,CAAC,uEAAD,CAAX;MACH,CAH8C,CAI/C;MACA;;;MACA,KAAKiN,mBAAL,CAAyBoK,OAAzB,CAAiCC,IAAI,IAAI;QACrCzR,0BAA0B,CAAC,SAAD,EAAYyR,IAAI,CAACpS,OAAjB,CAA1B;QACAQ,wBAAwB,CAAC,SAAD,EAAY4R,IAAI,CAACnS,OAAjB,CAAxB;QACAU,0BAA0B,CAAC,UAAD,EAAayR,IAAI,CAAClS,QAAlB,CAA1B;QACAM,wBAAwB,CAAC,UAAD,EAAa4R,IAAI,CAACjS,QAAlB,CAAxB;MACH,CALD;IAMH;EACJ;EACD;;;EACAsP,gBAAgB,CAACpJ,UAAD,EAAa;IACzB,IAAI,KAAKtF,KAAT,EAAgB;MACZ5J,WAAW,CAACkP,UAAD,CAAX,CAAwB8L,OAAxB,CAAgCE,QAAQ,IAAI;QACxC,IAAIA,QAAQ,KAAK,EAAb,IAAmB,KAAKvJ,oBAAL,CAA0BoD,OAA1B,CAAkCmG,QAAlC,MAAgD,CAAC,CAAxE,EAA2E;UACvE,KAAKvJ,oBAAL,CAA0BkC,IAA1B,CAA+BqH,QAA/B;;UACA,KAAKtR,KAAL,CAAWtH,SAAX,CAAqBC,GAArB,CAAyB2Y,QAAzB;QACH;MACJ,CALD;IAMH;EACJ;EACD;;;EACA7I,kBAAkB,GAAG;IACjB,IAAI,KAAKzI,KAAT,EAAgB;MACZ,KAAK+H,oBAAL,CAA0BqJ,OAA1B,CAAkCE,QAAQ,IAAI;QAC1C,KAAKtR,KAAL,CAAWtH,SAAX,CAAqBU,MAArB,CAA4BkY,QAA5B;MACH,CAFD;;MAGA,KAAKvJ,oBAAL,GAA4B,EAA5B;IACH;EACJ;EACD;;;EACAgB,cAAc,GAAG;IACb,MAAMlK,MAAM,GAAG,KAAKiN,OAApB;;IACA,IAAIjN,MAAM,YAAYpJ,UAAtB,EAAkC;MAC9B,OAAOoJ,MAAM,CAAC3D,aAAP,CAAqBgC,qBAArB,EAAP;IACH,CAJY,CAKb;;;IACA,IAAI2B,MAAM,YAAY0S,OAAtB,EAA+B;MAC3B,OAAO1S,MAAM,CAAC3B,qBAAP,EAAP;IACH;;IACD,MAAMrD,KAAK,GAAGgF,MAAM,CAAChF,KAAP,IAAgB,CAA9B;IACA,MAAMF,MAAM,GAAGkF,MAAM,CAAClF,MAAP,IAAiB,CAAhC,CAVa,CAWb;;IACA,OAAO;MACH7B,GAAG,EAAE+G,MAAM,CAAC4N,CADT;MAEHvQ,MAAM,EAAE2C,MAAM,CAAC4N,CAAP,GAAW9S,MAFhB;MAGH5B,IAAI,EAAE8G,MAAM,CAACwN,CAHV;MAIHhQ,KAAK,EAAEwC,MAAM,CAACwN,CAAP,GAAWxS,KAJf;MAKHF,MALG;MAMHE;IANG,CAAP;EAQH;;AA74BmC;AA+4BxC;;;AACA,SAAS+Q,YAAT,CAAsB4G,WAAtB,EAAmCC,MAAnC,EAA2C;EACvC,KAAK,IAAI9S,GAAT,IAAgB8S,MAAhB,EAAwB;IACpB,IAAIA,MAAM,CAACC,cAAP,CAAsB/S,GAAtB,CAAJ,EAAgC;MAC5B6S,WAAW,CAAC7S,GAAD,CAAX,GAAmB8S,MAAM,CAAC9S,GAAD,CAAzB;IACH;EACJ;;EACD,OAAO6S,WAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS7D,aAAT,CAAuBgE,KAAvB,EAA8B;EAC1B,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,IAAI,IAA1C,EAAgD;IAC5C,MAAM,CAAChS,KAAD,EAAQiS,KAAR,IAAiBD,KAAK,CAACE,KAAN,CAAYhL,cAAZ,CAAvB;IACA,OAAO,CAAC+K,KAAD,IAAUA,KAAK,KAAK,IAApB,GAA2BE,UAAU,CAACnS,KAAD,CAArC,GAA+C,IAAtD;EACH;;EACD,OAAOgS,KAAK,IAAI,IAAhB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS7E,4BAAT,CAAsCiF,UAAtC,EAAkD;EAC9C,OAAO;IACHja,GAAG,EAAEyD,IAAI,CAACyW,KAAL,CAAWD,UAAU,CAACja,GAAtB,CADF;IAEHuE,KAAK,EAAEd,IAAI,CAACyW,KAAL,CAAWD,UAAU,CAAC1V,KAAtB,CAFJ;IAGHH,MAAM,EAAEX,IAAI,CAACyW,KAAL,CAAWD,UAAU,CAAC7V,MAAtB,CAHL;IAIHnE,IAAI,EAAEwD,IAAI,CAACyW,KAAL,CAAWD,UAAU,CAACha,IAAtB,CAJH;IAKH8B,KAAK,EAAE0B,IAAI,CAACyW,KAAL,CAAWD,UAAU,CAAClY,KAAtB,CALJ;IAMHF,MAAM,EAAE4B,IAAI,CAACyW,KAAL,CAAWD,UAAU,CAACpY,MAAtB;EANL,CAAP;AAQH;;AACD,MAAMsY,iCAAiC,GAAG,CACtC;EAAEhT,OAAO,EAAE,OAAX;EAAoBC,OAAO,EAAE,QAA7B;EAAuCC,QAAQ,EAAE,OAAjD;EAA0DC,QAAQ,EAAE;AAApE,CADsC,EAEtC;EAAEH,OAAO,EAAE,OAAX;EAAoBC,OAAO,EAAE,KAA7B;EAAoCC,QAAQ,EAAE,OAA9C;EAAuDC,QAAQ,EAAE;AAAjE,CAFsC,EAGtC;EAAEH,OAAO,EAAE,KAAX;EAAkBC,OAAO,EAAE,QAA3B;EAAqCC,QAAQ,EAAE,KAA/C;EAAsDC,QAAQ,EAAE;AAAhE,CAHsC,EAItC;EAAEH,OAAO,EAAE,KAAX;EAAkBC,OAAO,EAAE,KAA3B;EAAkCC,QAAQ,EAAE,KAA5C;EAAmDC,QAAQ,EAAE;AAA7D,CAJsC,CAA1C;AAMA,MAAM8S,oCAAoC,GAAG,CACzC;EAAEjT,OAAO,EAAE,KAAX;EAAkBC,OAAO,EAAE,KAA3B;EAAkCC,QAAQ,EAAE,OAA5C;EAAqDC,QAAQ,EAAE;AAA/D,CADyC,EAEzC;EAAEH,OAAO,EAAE,KAAX;EAAkBC,OAAO,EAAE,QAA3B;EAAqCC,QAAQ,EAAE,OAA/C;EAAwDC,QAAQ,EAAE;AAAlE,CAFyC,EAGzC;EAAEH,OAAO,EAAE,OAAX;EAAoBC,OAAO,EAAE,KAA7B;EAAoCC,QAAQ,EAAE,KAA9C;EAAqDC,QAAQ,EAAE;AAA/D,CAHyC,EAIzC;EAAEH,OAAO,EAAE,OAAX;EAAoBC,OAAO,EAAE,QAA7B;EAAuCC,QAAQ,EAAE,KAAjD;EAAwDC,QAAQ,EAAE;AAAlE,CAJyC,CAA7C;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,MAAM+S,YAAY,GAAG,4BAArB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,sBAAN,CAA6B;EACzB1a,WAAW,GAAG;IACV,KAAK2a,YAAL,GAAoB,QAApB;IACA,KAAKC,UAAL,GAAkB,EAAlB;IACA,KAAKC,aAAL,GAAqB,EAArB;IACA,KAAKC,WAAL,GAAmB,EAAnB;IACA,KAAKC,UAAL,GAAkB,EAAlB;IACA,KAAKC,QAAL,GAAgB,EAAhB;IACA,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKxK,WAAL,GAAmB,KAAnB;EACH;;EACDlQ,MAAM,CAACwC,UAAD,EAAa;IACf,MAAM6C,MAAM,GAAG7C,UAAU,CAAC4I,SAAX,EAAf;IACA,KAAKhJ,WAAL,GAAmBI,UAAnB;;IACA,IAAI,KAAKiY,MAAL,IAAe,CAACpV,MAAM,CAAC1D,KAA3B,EAAkC;MAC9Ba,UAAU,CAACgJ,UAAX,CAAsB;QAAE7J,KAAK,EAAE,KAAK8Y;MAAd,CAAtB;IACH;;IACD,IAAI,KAAKC,OAAL,IAAgB,CAACrV,MAAM,CAAC5D,MAA5B,EAAoC;MAChCe,UAAU,CAACgJ,UAAX,CAAsB;QAAE/J,MAAM,EAAE,KAAKiZ;MAAf,CAAtB;IACH;;IACDlY,UAAU,CAAC6G,WAAX,CAAuB7I,SAAvB,CAAiCC,GAAjC,CAAqCwZ,YAArC;IACA,KAAK/J,WAAL,GAAmB,KAAnB;EACH;EACD;AACJ;AACA;AACA;;;EACItQ,GAAG,CAAC6H,KAAK,GAAG,EAAT,EAAa;IACZ,KAAK4S,aAAL,GAAqB,EAArB;IACA,KAAKD,UAAL,GAAkB3S,KAAlB;IACA,KAAK6S,WAAL,GAAmB,YAAnB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIza,IAAI,CAAC4H,KAAK,GAAG,EAAT,EAAa;IACb,KAAK+S,QAAL,GAAgB/S,KAAhB;IACA,KAAK8S,UAAL,GAAkB,MAAlB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIvW,MAAM,CAACyD,KAAK,GAAG,EAAT,EAAa;IACf,KAAK2S,UAAL,GAAkB,EAAlB;IACA,KAAKC,aAAL,GAAqB5S,KAArB;IACA,KAAK6S,WAAL,GAAmB,UAAnB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACInW,KAAK,CAACsD,KAAK,GAAG,EAAT,EAAa;IACd,KAAK+S,QAAL,GAAgB/S,KAAhB;IACA,KAAK8S,UAAL,GAAkB,OAAlB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACI1E,KAAK,CAACpO,KAAK,GAAG,EAAT,EAAa;IACd,KAAK+S,QAAL,GAAgB/S,KAAhB;IACA,KAAK8S,UAAL,GAAkB,OAAlB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACII,GAAG,CAAClT,KAAK,GAAG,EAAT,EAAa;IACZ,KAAK+S,QAAL,GAAgB/S,KAAhB;IACA,KAAK8S,UAAL,GAAkB,KAAlB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACI5Y,KAAK,CAAC8F,KAAK,GAAG,EAAT,EAAa;IACd,IAAI,KAAKrF,WAAT,EAAsB;MAClB,KAAKA,WAAL,CAAiBoJ,UAAjB,CAA4B;QAAE7J,KAAK,EAAE8F;MAAT,CAA5B;IACH,CAFD,MAGK;MACD,KAAKgT,MAAL,GAAchT,KAAd;IACH;;IACD,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIhG,MAAM,CAACgG,KAAK,GAAG,EAAT,EAAa;IACf,IAAI,KAAKrF,WAAT,EAAsB;MAClB,KAAKA,WAAL,CAAiBoJ,UAAjB,CAA4B;QAAE/J,MAAM,EAAEgG;MAAV,CAA5B;IACH,CAFD,MAGK;MACD,KAAKiT,OAAL,GAAejT,KAAf;IACH;;IACD,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACImT,kBAAkB,CAAC9G,MAAM,GAAG,EAAV,EAAc;IAC5B,KAAKjU,IAAL,CAAUiU,MAAV;IACA,KAAKyG,UAAL,GAAkB,QAAlB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIM,gBAAgB,CAAC/G,MAAM,GAAG,EAAV,EAAc;IAC1B,KAAKlU,GAAL,CAASkU,MAAT;IACA,KAAKwG,WAAL,GAAmB,QAAnB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIjP,KAAK,GAAG;IACJ;IACA;IACA;IACA,IAAI,CAAC,KAAKjJ,WAAN,IAAqB,CAAC,KAAKA,WAAL,CAAiBC,WAAjB,EAA1B,EAA0D;MACtD;IACH;;IACD,MAAMkV,MAAM,GAAG,KAAKnV,WAAL,CAAiBU,cAAjB,CAAgCvC,KAA/C;IACA,MAAMua,YAAY,GAAG,KAAK1Y,WAAL,CAAiBiH,WAAjB,CAA6B9I,KAAlD;;IACA,MAAM8E,MAAM,GAAG,KAAKjD,WAAL,CAAiBgJ,SAAjB,EAAf;;IACA,MAAM;MAAEzJ,KAAF;MAASF,MAAT;MAAiB6K,QAAjB;MAA2BC;IAA3B,IAAyClH,MAA/C;IACA,MAAM0V,yBAAyB,GAAG,CAACpZ,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,OAA/B,MAC7B,CAAC2K,QAAD,IAAaA,QAAQ,KAAK,MAA1B,IAAoCA,QAAQ,KAAK,OADpB,CAAlC;IAEA,MAAM0O,uBAAuB,GAAG,CAACvZ,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,OAAjC,MAC3B,CAAC8K,SAAD,IAAcA,SAAS,KAAK,MAA5B,IAAsCA,SAAS,KAAK,OADzB,CAAhC;IAEA,MAAM0O,SAAS,GAAG,KAAKV,UAAvB;IACA,MAAMW,OAAO,GAAG,KAAKV,QAArB;IACA,MAAMxD,KAAK,GAAG,KAAK5U,WAAL,CAAiBgJ,SAAjB,GAA6BS,SAA7B,KAA2C,KAAzD;IACA,IAAIsP,UAAU,GAAG,EAAjB;IACA,IAAIC,WAAW,GAAG,EAAlB;IACA,IAAIxI,cAAc,GAAG,EAArB;;IACA,IAAImI,yBAAJ,EAA+B;MAC3BnI,cAAc,GAAG,YAAjB;IACH,CAFD,MAGK,IAAIqI,SAAS,KAAK,QAAlB,EAA4B;MAC7BrI,cAAc,GAAG,QAAjB;;MACA,IAAIoE,KAAJ,EAAW;QACPoE,WAAW,GAAGF,OAAd;MACH,CAFD,MAGK;QACDC,UAAU,GAAGD,OAAb;MACH;IACJ,CARI,MASA,IAAIlE,KAAJ,EAAW;MACZ,IAAIiE,SAAS,KAAK,MAAd,IAAwBA,SAAS,KAAK,KAA1C,EAAiD;QAC7CrI,cAAc,GAAG,UAAjB;QACAuI,UAAU,GAAGD,OAAb;MACH,CAHD,MAIK,IAAID,SAAS,KAAK,OAAd,IAAyBA,SAAS,KAAK,OAA3C,EAAoD;QACrDrI,cAAc,GAAG,YAAjB;QACAwI,WAAW,GAAGF,OAAd;MACH;IACJ,CATI,MAUA,IAAID,SAAS,KAAK,MAAd,IAAwBA,SAAS,KAAK,OAA1C,EAAmD;MACpDrI,cAAc,GAAG,YAAjB;MACAuI,UAAU,GAAGD,OAAb;IACH,CAHI,MAIA,IAAID,SAAS,KAAK,OAAd,IAAyBA,SAAS,KAAK,KAA3C,EAAkD;MACnDrI,cAAc,GAAG,UAAjB;MACAwI,WAAW,GAAGF,OAAd;IACH;;IACD3D,MAAM,CAACvF,QAAP,GAAkB,KAAKmI,YAAvB;IACA5C,MAAM,CAAC4D,UAAP,GAAoBJ,yBAAyB,GAAG,GAAH,GAASI,UAAtD;IACA5D,MAAM,CAAC8D,SAAP,GAAmBL,uBAAuB,GAAG,GAAH,GAAS,KAAKZ,UAAxD;IACA7C,MAAM,CAAC+D,YAAP,GAAsB,KAAKjB,aAA3B;IACA9C,MAAM,CAAC6D,WAAP,GAAqBL,yBAAyB,GAAG,GAAH,GAASK,WAAvD;IACAN,YAAY,CAAClI,cAAb,GAA8BA,cAA9B;IACAkI,YAAY,CAACnI,UAAb,GAA0BqI,uBAAuB,GAAG,YAAH,GAAkB,KAAKV,WAAxE;EACH;EACD;AACJ;AACA;AACA;;;EACIpQ,OAAO,GAAG;IACN,IAAI,KAAKgG,WAAL,IAAoB,CAAC,KAAK9N,WAA9B,EAA2C;MACvC;IACH;;IACD,MAAMmV,MAAM,GAAG,KAAKnV,WAAL,CAAiBU,cAAjB,CAAgCvC,KAA/C;IACA,MAAMgb,MAAM,GAAG,KAAKnZ,WAAL,CAAiBiH,WAAhC;IACA,MAAMyR,YAAY,GAAGS,MAAM,CAAChb,KAA5B;IACAgb,MAAM,CAAC/a,SAAP,CAAiBU,MAAjB,CAAwB+Y,YAAxB;IACAa,YAAY,CAAClI,cAAb,GACIkI,YAAY,CAACnI,UAAb,GACI4E,MAAM,CAAC8D,SAAP,GACI9D,MAAM,CAAC+D,YAAP,GACI/D,MAAM,CAAC4D,UAAP,GACI5D,MAAM,CAAC6D,WAAP,GACI7D,MAAM,CAACvF,QAAP,GACI,EAP5B;IAQA,KAAK5P,WAAL,GAAmB,IAAnB;IACA,KAAK8N,WAAL,GAAmB,IAAnB;EACH;;AA3NwB;AA8N7B;;;AACA,MAAMsL,sBAAN,CAA6B;EACzBhc,WAAW,CAACC,cAAD,EAAiBM,SAAjB,EAA4B+N,SAA5B,EAAuCkB,iBAAvC,EAA0D;IACjE,KAAKvP,cAAL,GAAsBA,cAAtB;IACA,KAAKM,SAAL,GAAiBA,SAAjB;IACA,KAAK+N,SAAL,GAAiBA,SAAjB;IACA,KAAKkB,iBAAL,GAAyBA,iBAAzB;EACH;EACD;AACJ;AACA;;;EACIyM,MAAM,GAAG;IACL,OAAO,IAAIvB,sBAAJ,EAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIwB,mBAAmB,CAAC/U,MAAD,EAAS;IACxB,OAAO,IAAIiI,iCAAJ,CAAsCjI,MAAtC,EAA8C,KAAKlH,cAAnD,EAAmE,KAAKM,SAAxE,EAAmF,KAAK+N,SAAxF,EAAmG,KAAKkB,iBAAxG,CAAP;EACH;;AAnBwB;;AAqB7BwM,sBAAsB,CAAChW,IAAvB;EAAA,iBAAwHgW,sBAAxH,EAv2D6Gpe,EAu2D7G,UAAgKP,EAAE,CAACI,aAAnK,GAv2D6GG,EAu2D7G,UAA6LD,QAA7L,GAv2D6GC,EAu2D7G,UAAkNgB,IAAI,CAACqQ,QAAvN,GAv2D6GrR,EAu2D7G,UAA4OyQ,gBAA5O;AAAA;;AACA2N,sBAAsB,CAAC9V,KAAvB,kBAx2D6GtI,EAw2D7G;EAAA,OAA4Hoe,sBAA5H;EAAA,SAA4HA,sBAA5H;EAAA,YAAgK;AAAhK;;AACA;EAAA,mDAz2D6Gpe,EAy2D7G,mBAAgGoe,sBAAhG,EAAoI,CAAC;IACzH7V,IAAI,EAAEtI,UADmH;IAEzHuI,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAd,CAAD;EAFmH,CAAD,CAApI,EAG4B,YAAY;IAChC,OAAO,CAAC;MAAEF,IAAI,EAAE9I,EAAE,CAACI;IAAX,CAAD,EAA6B;MAAE0I,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACpDJ,IAAI,EAAErI,MAD8C;QAEpDsI,IAAI,EAAE,CAACzI,QAAD;MAF8C,CAAD;IAA/B,CAA7B,EAGW;MAAEwI,IAAI,EAAEvH,IAAI,CAACqQ;IAAb,CAHX,EAGoC;MAAE9I,IAAI,EAAEkI;IAAR,CAHpC,CAAP;EAIH,CARL;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM8N,qBAAN,CAA4B;EACxBnc,WAAW,CAACE,QAAD,EAAW;IAClB;IACA,KAAKkc,iBAAL,GAAyB,EAAzB;IACA,KAAK7b,SAAL,GAAiBL,QAAjB;EACH;;EACDqO,WAAW,GAAG;IACV,KAAKxL,MAAL;EACH;EACD;;;EACA9B,GAAG,CAAC+B,UAAD,EAAa;IACZ;IACA,KAAKtB,MAAL,CAAYsB,UAAZ;;IACA,KAAKoZ,iBAAL,CAAuB7J,IAAvB,CAA4BvP,UAA5B;EACH;EACD;;;EACAtB,MAAM,CAACsB,UAAD,EAAa;IACf,MAAMqZ,KAAK,GAAG,KAAKD,iBAAL,CAAuB3I,OAAvB,CAA+BzQ,UAA/B,CAAd;;IACA,IAAIqZ,KAAK,GAAG,CAAC,CAAb,EAAgB;MACZ,KAAKD,iBAAL,CAAuBE,MAAvB,CAA8BD,KAA9B,EAAqC,CAArC;IACH,CAJc,CAKf;;;IACA,IAAI,KAAKD,iBAAL,CAAuBrO,MAAvB,KAAkC,CAAtC,EAAyC;MACrC,KAAKhL,MAAL;IACH;EACJ;;AAzBuB;;AA2B5BoZ,qBAAqB,CAACnW,IAAtB;EAAA,iBAAuHmW,qBAAvH,EA15D6Gve,EA05D7G,UAA8JD,QAA9J;AAAA;;AACAwe,qBAAqB,CAACjW,KAAtB,kBA35D6GtI,EA25D7G;EAAA,OAA2Hue,qBAA3H;EAAA,SAA2HA,qBAA3H;EAAA,YAA8J;AAA9J;;AACA;EAAA,mDA55D6Gve,EA45D7G,mBAAgGue,qBAAhG,EAAmI,CAAC;IACxHhW,IAAI,EAAEtI,UADkH;IAExHuI,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAd,CAAD;EAFkH,CAAD,CAAnI,EAG4B,YAAY;IAChC,OAAO,CAAC;MAAEF,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACxBJ,IAAI,EAAErI,MADkB;QAExBsI,IAAI,EAAE,CAACzI,QAAD;MAFkB,CAAD;IAA/B,CAAD,CAAP;EAIH,CARL;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM4e,yBAAN,SAAwCJ,qBAAxC,CAA8D;EAC1Dnc,WAAW,CAACE,QAAD;EACX;EACAsC,OAFW,EAEF;IACL,MAAMtC,QAAN;IACA,KAAKsC,OAAL,GAAeA,OAAf;IACA;;IACA,KAAKga,gBAAL,GAAyBtT,KAAD,IAAW;MAC/B,MAAMuT,QAAQ,GAAG,KAAKL,iBAAtB;;MACA,KAAK,IAAIrN,CAAC,GAAG0N,QAAQ,CAAC1O,MAAT,GAAkB,CAA/B,EAAkCgB,CAAC,GAAG,CAAC,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;QAC3C;QACA;QACA;QACA;QACA;QACA;QACA,IAAI0N,QAAQ,CAAC1N,CAAD,CAAR,CAAYxF,cAAZ,CAA2B0N,SAA3B,CAAqClJ,MAArC,GAA8C,CAAlD,EAAqD;UACjD,MAAMrC,aAAa,GAAG+Q,QAAQ,CAAC1N,CAAD,CAAR,CAAYxF,cAAlC;UACA;;UACA,IAAI,KAAK/G,OAAT,EAAkB;YACd,KAAKA,OAAL,CAAaM,GAAb,CAAiB,MAAM4I,aAAa,CAACvC,IAAd,CAAmBD,KAAnB,CAAvB;UACH,CAFD,MAGK;YACDwC,aAAa,CAACvC,IAAd,CAAmBD,KAAnB;UACH;;UACD;QACH;MACJ;IACJ,CArBD;EAsBH;EACD;;;EACAjI,GAAG,CAAC+B,UAAD,EAAa;IACZ,MAAM/B,GAAN,CAAU+B,UAAV,EADY,CAEZ;;IACA,IAAI,CAAC,KAAK0Z,WAAV,EAAuB;MACnB;MACA,IAAI,KAAKla,OAAT,EAAkB;QACd,KAAKA,OAAL,CAAaoI,iBAAb,CAA+B,MAAM,KAAKrK,SAAL,CAAea,IAAf,CAAoBiM,gBAApB,CAAqC,SAArC,EAAgD,KAAKmP,gBAArD,CAArC;MACH,CAFD,MAGK;QACD,KAAKjc,SAAL,CAAea,IAAf,CAAoBiM,gBAApB,CAAqC,SAArC,EAAgD,KAAKmP,gBAArD;MACH;;MACD,KAAKE,WAAL,GAAmB,IAAnB;IACH;EACJ;EACD;;;EACA3Z,MAAM,GAAG;IACL,IAAI,KAAK2Z,WAAT,EAAsB;MAClB,KAAKnc,SAAL,CAAea,IAAf,CAAoB+M,mBAApB,CAAwC,SAAxC,EAAmD,KAAKqO,gBAAxD;;MACA,KAAKE,WAAL,GAAmB,KAAnB;IACH;EACJ;;AAnDyD;;AAqD9DH,yBAAyB,CAACvW,IAA1B;EAAA,iBAA2HuW,yBAA3H,EAv+D6G3e,EAu+D7G,UAAsKD,QAAtK,GAv+D6GC,EAu+D7G,UAA2LA,EAAE,CAACqI,MAA9L;AAAA;;AACAsW,yBAAyB,CAACrW,KAA1B,kBAx+D6GtI,EAw+D7G;EAAA,OAA+H2e,yBAA/H;EAAA,SAA+HA,yBAA/H;EAAA,YAAsK;AAAtK;;AACA;EAAA,mDAz+D6G3e,EAy+D7G,mBAAgG2e,yBAAhG,EAAuI,CAAC;IAC5HpW,IAAI,EAAEtI,UADsH;IAE5HuI,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAd,CAAD;EAFsH,CAAD,CAAvI,EAG4B,YAAY;IAChC,OAAO,CAAC;MAAEF,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACxBJ,IAAI,EAAErI,MADkB;QAExBsI,IAAI,EAAE,CAACzI,QAAD;MAFkB,CAAD;IAA/B,CAAD,EAGW;MAAEwI,IAAI,EAAEvI,EAAE,CAACqI,MAAX;MAAmBM,UAAU,EAAE,CAAC;QAClCJ,IAAI,EAAEnI;MAD4B,CAAD;IAA/B,CAHX,CAAP;EAMH,CAVL;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM2e,6BAAN,SAA4CR,qBAA5C,CAAkE;EAC9Dnc,WAAW,CAACE,QAAD,EAAWoO,SAAX;EACX;EACA9L,OAFW,EAEF;IACL,MAAMtC,QAAN;IACA,KAAKoO,SAAL,GAAiBA,SAAjB;IACA,KAAK9L,OAAL,GAAeA,OAAf;IACA,KAAKoa,iBAAL,GAAyB,KAAzB;IACA;;IACA,KAAKC,oBAAL,GAA6B3T,KAAD,IAAW;MACnC,KAAK4T,uBAAL,GAA+B/d,eAAe,CAACmK,KAAD,CAA9C;IACH,CAFD;IAGA;;;IACA,KAAK6T,cAAL,GAAuB7T,KAAD,IAAW;MAC7B,MAAMI,MAAM,GAAGvK,eAAe,CAACmK,KAAD,CAA9B,CAD6B,CAE7B;MACA;MACA;MACA;MACA;MACA;;;MACA,MAAM/B,MAAM,GAAG+B,KAAK,CAAC/C,IAAN,KAAe,OAAf,IAA0B,KAAK2W,uBAA/B,GACT,KAAKA,uBADI,GAETxT,MAFN,CAR6B,CAW7B;MACA;;MACA,KAAKwT,uBAAL,GAA+B,IAA/B,CAb6B,CAc7B;MACA;MACA;;MACA,MAAML,QAAQ,GAAG,KAAKL,iBAAL,CAAuBY,KAAvB,EAAjB,CAjB6B,CAkB7B;MACA;MACA;MACA;;;MACA,KAAK,IAAIjO,CAAC,GAAG0N,QAAQ,CAAC1O,MAAT,GAAkB,CAA/B,EAAkCgB,CAAC,GAAG,CAAC,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;QAC3C,MAAM/L,UAAU,GAAGyZ,QAAQ,CAAC1N,CAAD,CAA3B;;QACA,IAAI/L,UAAU,CAACwG,qBAAX,CAAiCyN,SAAjC,CAA2ClJ,MAA3C,GAAoD,CAApD,IAAyD,CAAC/K,UAAU,CAACH,WAAX,EAA9D,EAAwF;UACpF;QACH,CAJ0C,CAK3C;QACA;QACA;;;QACA,IAAIG,UAAU,CAACM,cAAX,CAA0BzB,QAA1B,CAAmCyH,MAAnC,KACAtG,UAAU,CAACM,cAAX,CAA0BzB,QAA1B,CAAmCsF,MAAnC,CADJ,EACgD;UAC5C;QACH;;QACD,MAAMwE,oBAAoB,GAAG3I,UAAU,CAACwG,qBAAxC;QACA;;QACA,IAAI,KAAKhH,OAAT,EAAkB;UACd,KAAKA,OAAL,CAAaM,GAAb,CAAiB,MAAM6I,oBAAoB,CAACxC,IAArB,CAA0BD,KAA1B,CAAvB;QACH,CAFD,MAGK;UACDyC,oBAAoB,CAACxC,IAArB,CAA0BD,KAA1B;QACH;MACJ;IACJ,CA3CD;EA4CH;EACD;;;EACAjI,GAAG,CAAC+B,UAAD,EAAa;IACZ,MAAM/B,GAAN,CAAU+B,UAAV,EADY,CAEZ;IACA;IACA;IACA;IACA;IACA;;IACA,IAAI,CAAC,KAAK0Z,WAAV,EAAuB;MACnB,MAAMtb,IAAI,GAAG,KAAKb,SAAL,CAAea,IAA5B;MACA;;MACA,IAAI,KAAKoB,OAAT,EAAkB;QACd,KAAKA,OAAL,CAAaoI,iBAAb,CAA+B,MAAM,KAAKqS,kBAAL,CAAwB7b,IAAxB,CAArC;MACH,CAFD,MAGK;QACD,KAAK6b,kBAAL,CAAwB7b,IAAxB;MACH,CARkB,CASnB;MACA;;;MACA,IAAI,KAAKkN,SAAL,CAAe4O,GAAf,IAAsB,CAAC,KAAKN,iBAAhC,EAAmD;QAC/C,KAAKO,oBAAL,GAA4B/b,IAAI,CAACL,KAAL,CAAWqc,MAAvC;QACAhc,IAAI,CAACL,KAAL,CAAWqc,MAAX,GAAoB,SAApB;QACA,KAAKR,iBAAL,GAAyB,IAAzB;MACH;;MACD,KAAKF,WAAL,GAAmB,IAAnB;IACH;EACJ;EACD;;;EACA3Z,MAAM,GAAG;IACL,IAAI,KAAK2Z,WAAT,EAAsB;MAClB,MAAMtb,IAAI,GAAG,KAAKb,SAAL,CAAea,IAA5B;MACAA,IAAI,CAAC+M,mBAAL,CAAyB,aAAzB,EAAwC,KAAK0O,oBAA7C,EAAmE,IAAnE;MACAzb,IAAI,CAAC+M,mBAAL,CAAyB,OAAzB,EAAkC,KAAK4O,cAAvC,EAAuD,IAAvD;MACA3b,IAAI,CAAC+M,mBAAL,CAAyB,UAAzB,EAAqC,KAAK4O,cAA1C,EAA0D,IAA1D;MACA3b,IAAI,CAAC+M,mBAAL,CAAyB,aAAzB,EAAwC,KAAK4O,cAA7C,EAA6D,IAA7D;;MACA,IAAI,KAAKzO,SAAL,CAAe4O,GAAf,IAAsB,KAAKN,iBAA/B,EAAkD;QAC9Cxb,IAAI,CAACL,KAAL,CAAWqc,MAAX,GAAoB,KAAKD,oBAAzB;QACA,KAAKP,iBAAL,GAAyB,KAAzB;MACH;;MACD,KAAKF,WAAL,GAAmB,KAAnB;IACH;EACJ;;EACDO,kBAAkB,CAAC7b,IAAD,EAAO;IACrBA,IAAI,CAACiM,gBAAL,CAAsB,aAAtB,EAAqC,KAAKwP,oBAA1C,EAAgE,IAAhE;IACAzb,IAAI,CAACiM,gBAAL,CAAsB,OAAtB,EAA+B,KAAK0P,cAApC,EAAoD,IAApD;IACA3b,IAAI,CAACiM,gBAAL,CAAsB,UAAtB,EAAkC,KAAK0P,cAAvC,EAAuD,IAAvD;IACA3b,IAAI,CAACiM,gBAAL,CAAsB,aAAtB,EAAqC,KAAK0P,cAA1C,EAA0D,IAA1D;EACH;;AA1G6D;;AA4GlEJ,6BAA6B,CAAC3W,IAA9B;EAAA,iBAA+H2W,6BAA/H,EA7mE6G/e,EA6mE7G,UAA8KD,QAA9K,GA7mE6GC,EA6mE7G,UAAmMgB,IAAI,CAACqQ,QAAxM,GA7mE6GrR,EA6mE7G,UAA6NA,EAAE,CAACqI,MAAhO;AAAA;;AACA0W,6BAA6B,CAACzW,KAA9B,kBA9mE6GtI,EA8mE7G;EAAA,OAAmI+e,6BAAnI;EAAA,SAAmIA,6BAAnI;EAAA,YAA8K;AAA9K;;AACA;EAAA,mDA/mE6G/e,EA+mE7G,mBAAgG+e,6BAAhG,EAA2I,CAAC;IAChIxW,IAAI,EAAEtI,UAD0H;IAEhIuI,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAd,CAAD;EAF0H,CAAD,CAA3I,EAG4B,YAAY;IAChC,OAAO,CAAC;MAAEF,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACxBJ,IAAI,EAAErI,MADkB;QAExBsI,IAAI,EAAE,CAACzI,QAAD;MAFkB,CAAD;IAA/B,CAAD,EAGW;MAAEwI,IAAI,EAAEvH,IAAI,CAACqQ;IAAb,CAHX,EAGoC;MAAE9I,IAAI,EAAEvI,EAAE,CAACqI,MAAX;MAAmBM,UAAU,EAAE,CAAC;QAC3DJ,IAAI,EAAEnI;MADqD,CAAD;IAA/B,CAHpC,CAAP;EAMH,CAVL;AAAA;AAYA;;;AACA,IAAIqf,YAAY,GAAG,CAAnB,C,CACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,CAAc;EACVtd,WAAW;EACX;EACAud,gBAFW,EAEO/N,iBAFP,EAE0BgO,yBAF1B,EAEqDC,gBAFrD,EAEuElV,mBAFvE,EAE4FmV,SAF5F,EAEuGlb,OAFvG,EAEgHjC,SAFhH,EAE2Hod,eAF3H,EAE4InV,SAF5I,EAEuJC,uBAFvJ,EAEgLmV,qBAFhL,EAEuM;IAC9M,KAAKL,gBAAL,GAAwBA,gBAAxB;IACA,KAAK/N,iBAAL,GAAyBA,iBAAzB;IACA,KAAKgO,yBAAL,GAAiCA,yBAAjC;IACA,KAAKC,gBAAL,GAAwBA,gBAAxB;IACA,KAAKlV,mBAAL,GAA2BA,mBAA3B;IACA,KAAKmV,SAAL,GAAiBA,SAAjB;IACA,KAAKlb,OAAL,GAAeA,OAAf;IACA,KAAKjC,SAAL,GAAiBA,SAAjB;IACA,KAAKod,eAAL,GAAuBA,eAAvB;IACA,KAAKnV,SAAL,GAAiBA,SAAjB;IACA,KAAKC,uBAAL,GAA+BA,uBAA/B;IACA,KAAKmV,qBAAL,GAA6BA,qBAA7B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,MAAM,CAAChY,MAAD,EAAS;IACX,MAAMiY,IAAI,GAAG,KAAKC,kBAAL,EAAb;;IACA,MAAMC,IAAI,GAAG,KAAKC,kBAAL,CAAwBH,IAAxB,CAAb;;IACA,MAAMI,YAAY,GAAG,KAAKC,mBAAL,CAAyBH,IAAzB,CAArB;;IACA,MAAMI,aAAa,GAAG,IAAI5X,aAAJ,CAAkBX,MAAlB,CAAtB;IACAuY,aAAa,CAAC/R,SAAd,GAA0B+R,aAAa,CAAC/R,SAAd,IAA2B,KAAKsR,eAAL,CAAqB1V,KAA1E;IACA,OAAO,IAAIE,UAAJ,CAAe+V,YAAf,EAA6BJ,IAA7B,EAAmCE,IAAnC,EAAyCI,aAAzC,EAAwD,KAAK5b,OAA7D,EAAsE,KAAK+F,mBAA3E,EAAgG,KAAKhI,SAArG,EAAgH,KAAKiI,SAArH,EAAgI,KAAKC,uBAArI,EAA8J,KAAKmV,qBAAL,KAA+B,gBAA7L,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIpL,QAAQ,GAAG;IACP,OAAO,KAAKiL,gBAAZ;EACH;EACD;AACJ;AACA;AACA;;;EACIQ,kBAAkB,CAACH,IAAD,EAAO;IACrB,MAAME,IAAI,GAAG,KAAKzd,SAAL,CAAe4M,aAAf,CAA6B,KAA7B,CAAb;;IACA6Q,IAAI,CAACK,EAAL,GAAW,eAAchB,YAAY,EAAG,EAAxC;IACAW,IAAI,CAAChd,SAAL,CAAeC,GAAf,CAAmB,kBAAnB;IACA6c,IAAI,CAAC7T,WAAL,CAAiB+T,IAAjB;IACA,OAAOA,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACID,kBAAkB,GAAG;IACjB,MAAMD,IAAI,GAAG,KAAKvd,SAAL,CAAe4M,aAAf,CAA6B,KAA7B,CAAb;;IACA,KAAKqC,iBAAL,CAAuBf,mBAAvB,GAA6CxE,WAA7C,CAAyD6T,IAAzD;;IACA,OAAOA,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIK,mBAAmB,CAACH,IAAD,EAAO;IACtB;IACA;IACA,IAAI,CAAC,KAAKM,OAAV,EAAmB;MACf,KAAKA,OAAL,GAAe,KAAKZ,SAAL,CAAea,GAAf,CAAmBtgB,cAAnB,CAAf;IACH;;IACD,OAAO,IAAIqB,eAAJ,CAAoB0e,IAApB,EAA0B,KAAKR,yBAA/B,EAA0D,KAAKc,OAA/D,EAAwE,KAAKZ,SAA7E,EAAwF,KAAKnd,SAA7F,CAAP;EACH;;AAvES;;AAyEd+c,OAAO,CAACtX,IAAR;EAAA,iBAAyGsX,OAAzG,EAhtE6G1f,EAgtE7G,UAAkI8H,qBAAlI,GAhtE6G9H,EAgtE7G,UAAoKyQ,gBAApK,GAhtE6GzQ,EAgtE7G,UAAiMA,EAAE,CAAC4gB,wBAApM,GAhtE6G5gB,EAgtE7G,UAAyOoe,sBAAzO,GAhtE6Gpe,EAgtE7G,UAA4Q2e,yBAA5Q,GAhtE6G3e,EAgtE7G,UAAkTA,EAAE,CAAC6gB,QAArT,GAhtE6G7gB,EAgtE7G,UAA0UA,EAAE,CAACqI,MAA7U,GAhtE6GrI,EAgtE7G,UAAgWD,QAAhW,GAhtE6GC,EAgtE7G,UAAqXwB,EAAE,CAACsf,cAAxX,GAhtE6G9gB,EAgtE7G,UAAmZF,EAAE,CAACihB,QAAtZ,GAhtE6G/gB,EAgtE7G,UAA2a+e,6BAA3a,GAhtE6G/e,EAgtE7G,UAAqdM,qBAArd;AAAA;;AACAof,OAAO,CAACpX,KAAR,kBAjtE6GtI,EAitE7G;EAAA,OAA6G0f,OAA7G;EAAA,SAA6GA,OAA7G;EAAA,YAAkI;AAAlI;;AACA;EAAA,mDAltE6G1f,EAktE7G,mBAAgG0f,OAAhG,EAAqH,CAAC;IAC1GnX,IAAI,EAAEtI,UADoG;IAE1GuI,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAd,CAAD;EAFoG,CAAD,CAArH,EAG4B,YAAY;IAChC,OAAO,CAAC;MAAEF,IAAI,EAAET;IAAR,CAAD,EAAkC;MAAES,IAAI,EAAEkI;IAAR,CAAlC,EAA8D;MAAElI,IAAI,EAAEvI,EAAE,CAAC4gB;IAAX,CAA9D,EAAqG;MAAErY,IAAI,EAAE6V;IAAR,CAArG,EAAuI;MAAE7V,IAAI,EAAEoW;IAAR,CAAvI,EAA4K;MAAEpW,IAAI,EAAEvI,EAAE,CAAC6gB;IAAX,CAA5K,EAAmM;MAAEtY,IAAI,EAAEvI,EAAE,CAACqI;IAAX,CAAnM,EAAwN;MAAEE,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAC/OJ,IAAI,EAAErI,MADyO;QAE/OsI,IAAI,EAAE,CAACzI,QAAD;MAFyO,CAAD;IAA/B,CAAxN,EAGW;MAAEwI,IAAI,EAAE/G,EAAE,CAACsf;IAAX,CAHX,EAGwC;MAAEvY,IAAI,EAAEzI,EAAE,CAACihB;IAAX,CAHxC,EAG+D;MAAExY,IAAI,EAAEwW;IAAR,CAH/D,EAGwG;MAAExW,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAC/HJ,IAAI,EAAErI,MADyH;QAE/HsI,IAAI,EAAE,CAAClI,qBAAD;MAFyH,CAAD,EAG/H;QACCiI,IAAI,EAAEnI;MADP,CAH+H;IAA/B,CAHxG,CAAP;EASH,CAbL;AAAA;AAeA;;;AACA,MAAM4gB,mBAAmB,GAAG,CACxB;EACIrX,OAAO,EAAE,OADb;EAEIC,OAAO,EAAE,QAFb;EAGIC,QAAQ,EAAE,OAHd;EAIIC,QAAQ,EAAE;AAJd,CADwB,EAOxB;EACIH,OAAO,EAAE,OADb;EAEIC,OAAO,EAAE,KAFb;EAGIC,QAAQ,EAAE,OAHd;EAIIC,QAAQ,EAAE;AAJd,CAPwB,EAaxB;EACIH,OAAO,EAAE,KADb;EAEIC,OAAO,EAAE,KAFb;EAGIC,QAAQ,EAAE,KAHd;EAIIC,QAAQ,EAAE;AAJd,CAbwB,EAmBxB;EACIH,OAAO,EAAE,KADb;EAEIC,OAAO,EAAE,QAFb;EAGIC,QAAQ,EAAE,KAHd;EAIIC,QAAQ,EAAE;AAJd,CAnBwB,CAA5B;AA0BA;;AACA,MAAMmX,qCAAqC,GAAG,IAAI1gB,cAAJ,CAAmB,uCAAnB,CAA9C;AACA;AACA;AACA;AACA;;AACA,MAAM2gB,gBAAN,CAAuB;EACnB9e,WAAW;EACX;EACA+e,UAFW,EAEC;IACR,KAAKA,UAAL,GAAkBA,UAAlB;EACH;;AALkB;;AAOvBD,gBAAgB,CAAC9Y,IAAjB;EAAA,iBAAkH8Y,gBAAlH,EAzwE6GlhB,EAywE7G,mBAAoJA,EAAE,CAACG,UAAvJ;AAAA;;AACA+gB,gBAAgB,CAACE,IAAjB,kBA1wE6GphB,EA0wE7G;EAAA,MAAsGkhB,gBAAtG;EAAA;EAAA;EAAA;AAAA;;AACA;EAAA,mDA3wE6GlhB,EA2wE7G,mBAAgGkhB,gBAAhG,EAA8H,CAAC;IACnH3Y,IAAI,EAAE/H,SAD6G;IAEnHgI,IAAI,EAAE,CAAC;MACCqO,QAAQ,EAAE,4DADX;MAECwK,QAAQ,EAAE,kBAFX;MAGCC,UAAU,EAAE;IAHb,CAAD;EAF6G,CAAD,CAA9H,EAO4B,YAAY;IAAE,OAAO,CAAC;MAAE/Y,IAAI,EAAEvI,EAAE,CAACG;IAAX,CAAD,CAAP;EAAmC,CAP7E;AAAA;AAQA;AACA;AACA;AACA;;;AACA,MAAMohB,mBAAN,CAA0B;EACtB;EACW,IAAP9X,OAAO,GAAG;IACV,OAAO,KAAK8I,QAAZ;EACH;;EACU,IAAP9I,OAAO,CAACA,OAAD,EAAU;IACjB,KAAK8I,QAAL,GAAgB9I,OAAhB;;IACA,IAAI,KAAK+X,SAAT,EAAoB;MAChB,KAAKC,uBAAL,CAA6B,KAAKD,SAAlC;IACH;EACJ;EACD;;;EACW,IAAP9X,OAAO,GAAG;IACV,OAAO,KAAK8I,QAAZ;EACH;;EACU,IAAP9I,OAAO,CAACA,OAAD,EAAU;IACjB,KAAK8I,QAAL,GAAgB9I,OAAhB;;IACA,IAAI,KAAK8X,SAAT,EAAoB;MAChB,KAAKC,uBAAL,CAA6B,KAAKD,SAAlC;IACH;EACJ;EACD;;;EACe,IAAXzY,WAAW,GAAG;IACd,OAAO,KAAK2Y,YAAZ;EACH;;EACc,IAAX3Y,WAAW,CAACsB,KAAD,EAAQ;IACnB,KAAKqX,YAAL,GAAoB3gB,qBAAqB,CAACsJ,KAAD,CAAzC;EACH;EACD;;;EACgB,IAAZsX,YAAY,GAAG;IACf,OAAO,KAAKC,aAAZ;EACH;;EACe,IAAZD,YAAY,CAACtX,KAAD,EAAQ;IACpB,KAAKuX,aAAL,GAAqB7gB,qBAAqB,CAACsJ,KAAD,CAA1C;EACH;EACD;;;EACsB,IAAlB4L,kBAAkB,GAAG;IACrB,OAAO,KAAK4L,mBAAZ;EACH;;EACqB,IAAlB5L,kBAAkB,CAAC5L,KAAD,EAAQ;IAC1B,KAAKwX,mBAAL,GAA2B9gB,qBAAqB,CAACsJ,KAAD,CAAhD;EACH;EACD;;;EACiB,IAAb8L,aAAa,GAAG;IAChB,OAAO,KAAKnE,cAAZ;EACH;;EACgB,IAAbmE,aAAa,CAAC9L,KAAD,EAAQ;IACrB,KAAK2H,cAAL,GAAsBjR,qBAAqB,CAACsJ,KAAD,CAA3C;EACH;EACD;;;EACQ,IAAJsK,IAAI,GAAG;IACP,OAAO,KAAKmN,KAAZ;EACH;;EACO,IAAJnN,IAAI,CAACtK,KAAD,EAAQ;IACZ,KAAKyX,KAAL,GAAa/gB,qBAAqB,CAACsJ,KAAD,CAAlC;EACH,CAvDqB,CAwDtB;;;EACAjI,WAAW,CAAC2f,QAAD,EAAWC,WAAX,EAAwBC,gBAAxB,EAA0CC,qBAA1C,EAAiEC,IAAjE,EAAuE;IAC9E,KAAKJ,QAAL,GAAgBA,QAAhB;IACA,KAAKI,IAAL,GAAYA,IAAZ;IACA,KAAKT,YAAL,GAAoB,KAApB;IACA,KAAKE,aAAL,GAAqB,KAArB;IACA,KAAK5P,cAAL,GAAsB,KAAtB;IACA,KAAK6P,mBAAL,GAA2B,KAA3B;IACA,KAAKC,KAAL,GAAa,KAAb;IACA,KAAKM,qBAAL,GAA6BtgB,YAAY,CAACsJ,KAA1C;IACA,KAAKiX,mBAAL,GAA2BvgB,YAAY,CAACsJ,KAAxC;IACA,KAAKkX,mBAAL,GAA2BxgB,YAAY,CAACsJ,KAAxC;IACA,KAAKmX,qBAAL,GAA6BzgB,YAAY,CAACsJ,KAA1C;IACA;;IACA,KAAKoX,cAAL,GAAsB,CAAtB;IACA;;IACA,KAAKC,IAAL,GAAY,KAAZ;IACA;;IACA,KAAKC,YAAL,GAAoB,KAApB;IACA;;IACA,KAAK/U,aAAL,GAAqB,IAAIlN,YAAJ,EAArB;IACA;;IACA,KAAKkiB,cAAL,GAAsB,IAAIliB,YAAJ,EAAtB;IACA;;IACA,KAAKmC,MAAL,GAAc,IAAInC,YAAJ,EAAd;IACA;;IACA,KAAK0E,MAAL,GAAc,IAAI1E,YAAJ,EAAd;IACA;;IACA,KAAKmiB,cAAL,GAAsB,IAAIniB,YAAJ,EAAtB;IACA;;IACA,KAAKoiB,mBAAL,GAA2B,IAAIpiB,YAAJ,EAA3B;IACA,KAAKqiB,eAAL,GAAuB,IAAInhB,cAAJ,CAAmBqgB,WAAnB,EAAgCC,gBAAhC,CAAvB;IACA,KAAKc,sBAAL,GAA8Bb,qBAA9B;IACA,KAAKrZ,cAAL,GAAsB,KAAKka,sBAAL,EAAtB;EACH;EACD;;;EACc,IAAV3d,UAAU,GAAG;IACb,OAAO,KAAKJ,WAAZ;EACH;EACD;;;EACO,IAAHwJ,GAAG,GAAG;IACN,OAAO,KAAK2T,IAAL,GAAY,KAAKA,IAAL,CAAU9X,KAAtB,GAA8B,KAArC;EACH;;EACDsG,WAAW,GAAG;IACV,KAAK0R,mBAAL,CAAyBjc,WAAzB;;IACA,KAAKkc,mBAAL,CAAyBlc,WAAzB;;IACA,KAAKgc,qBAAL,CAA2Bhc,WAA3B;;IACA,KAAKmc,qBAAL,CAA2Bnc,WAA3B;;IACA,IAAI,KAAKpB,WAAT,EAAsB;MAClB,KAAKA,WAAL,CAAiB8H,OAAjB;IACH;EACJ;;EACDkW,WAAW,CAACC,OAAD,EAAU;IACjB,IAAI,KAAKzB,SAAT,EAAoB;MAChB,KAAKC,uBAAL,CAA6B,KAAKD,SAAlC;;MACA,KAAKxc,WAAL,CAAiBoJ,UAAjB,CAA4B;QACxB7J,KAAK,EAAE,KAAKA,KADY;QAExByK,QAAQ,EAAE,KAAKA,QAFS;QAGxB3K,MAAM,EAAE,KAAKA,MAHW;QAIxB4K,SAAS,EAAE,KAAKA;MAJQ,CAA5B;;MAMA,IAAIgU,OAAO,CAAC,QAAD,CAAP,IAAqB,KAAKR,IAA9B,EAAoC;QAChC,KAAKjB,SAAL,CAAevT,KAAf;MACH;IACJ;;IACD,IAAIgV,OAAO,CAAC,MAAD,CAAX,EAAqB;MACjB,KAAKR,IAAL,GAAY,KAAKS,cAAL,EAAZ,GAAoC,KAAKC,cAAL,EAApC;IACH;EACJ;EACD;;;EACAC,cAAc,GAAG;IACb,IAAI,CAAC,KAAK3R,SAAN,IAAmB,CAAC,KAAKA,SAAL,CAAetB,MAAvC,EAA+C;MAC3C,KAAKsB,SAAL,GAAiBuP,mBAAjB;IACH;;IACD,MAAM5b,UAAU,GAAI,KAAKJ,WAAL,GAAmB,KAAK+c,QAAL,CAAc9B,MAAd,CAAqB,KAAKoD,YAAL,EAArB,CAAvC;;IACA,KAAKhB,mBAAL,GAA2Bjd,UAAU,CAACwI,WAAX,GAAyB7H,SAAzB,CAAmC,MAAM,KAAKnD,MAAL,CAAY0gB,IAAZ,EAAzC,CAA3B;IACA,KAAKhB,mBAAL,GAA2Bld,UAAU,CAACyI,WAAX,GAAyB9H,SAAzB,CAAmC,MAAM,KAAKZ,MAAL,CAAYme,IAAZ,EAAzC,CAA3B;IACAle,UAAU,CAAC0I,aAAX,GAA2B/H,SAA3B,CAAsCuF,KAAD,IAAW;MAC5C,KAAKsX,cAAL,CAAoBrX,IAApB,CAAyBD,KAAzB;;MACA,IAAIA,KAAK,CAACiY,OAAN,KAAkBvhB,MAAlB,IAA4B,CAAC,KAAK0gB,YAAlC,IAAkD,CAACzgB,cAAc,CAACqJ,KAAD,CAArE,EAA8E;QAC1EA,KAAK,CAACkY,cAAN;;QACA,KAAKL,cAAL;MACH;IACJ,CAND;;IAOA,KAAKne,WAAL,CAAiB+I,oBAAjB,GAAwChI,SAAxC,CAAmDuF,KAAD,IAAW;MACzD,KAAKuX,mBAAL,CAAyBtX,IAAzB,CAA8BD,KAA9B;IACH,CAFD;EAGH;EACD;;;EACA+X,YAAY,GAAG;IACX,MAAMtX,gBAAgB,GAAI,KAAKyV,SAAL,GACtB,KAAKzV,gBAAL,IAAyB,KAAK0X,uBAAL,EAD7B;;IAEA,MAAMjD,aAAa,GAAG,IAAI5X,aAAJ,CAAkB;MACpC6F,SAAS,EAAE,KAAK0T,IADoB;MAEpCpW,gBAFoC;MAGpClD,cAAc,EAAE,KAAKA,cAHe;MAIpCE,WAAW,EAAE,KAAKA;IAJkB,CAAlB,CAAtB;;IAMA,IAAI,KAAKxE,KAAL,IAAc,KAAKA,KAAL,KAAe,CAAjC,EAAoC;MAChCic,aAAa,CAACjc,KAAd,GAAsB,KAAKA,KAA3B;IACH;;IACD,IAAI,KAAKF,MAAL,IAAe,KAAKA,MAAL,KAAgB,CAAnC,EAAsC;MAClCmc,aAAa,CAACnc,MAAd,GAAuB,KAAKA,MAA5B;IACH;;IACD,IAAI,KAAK2K,QAAL,IAAiB,KAAKA,QAAL,KAAkB,CAAvC,EAA0C;MACtCwR,aAAa,CAACxR,QAAd,GAAyB,KAAKA,QAA9B;IACH;;IACD,IAAI,KAAKC,SAAL,IAAkB,KAAKA,SAAL,KAAmB,CAAzC,EAA4C;MACxCuR,aAAa,CAACvR,SAAd,GAA0B,KAAKA,SAA/B;IACH;;IACD,IAAI,KAAKjG,aAAT,EAAwB;MACpBwX,aAAa,CAACxX,aAAd,GAA8B,KAAKA,aAAnC;IACH;;IACD,IAAI,KAAKF,UAAT,EAAqB;MACjB0X,aAAa,CAAC1X,UAAd,GAA2B,KAAKA,UAAhC;IACH;;IACD,OAAO0X,aAAP;EACH;EACD;;;EACAiB,uBAAuB,CAAC1V,gBAAD,EAAmB;IACtC,MAAM0F,SAAS,GAAG,KAAKA,SAAL,CAAe2J,GAAf,CAAmBsI,eAAe,KAAK;MACrD/Z,OAAO,EAAE+Z,eAAe,CAAC/Z,OAD4B;MAErDC,OAAO,EAAE8Z,eAAe,CAAC9Z,OAF4B;MAGrDC,QAAQ,EAAE6Z,eAAe,CAAC7Z,QAH2B;MAIrDC,QAAQ,EAAE4Z,eAAe,CAAC5Z,QAJ2B;MAKrDL,OAAO,EAAEia,eAAe,CAACja,OAAhB,IAA2B,KAAKA,OALY;MAMrDC,OAAO,EAAEga,eAAe,CAACha,OAAhB,IAA2B,KAAKA,OANY;MAOrDZ,UAAU,EAAE4a,eAAe,CAAC5a,UAAhB,IAA8BJ;IAPW,CAAL,CAAlC,CAAlB;IASA,OAAOqD,gBAAgB,CAClB4G,SADE,CACQ,KAAKgR,2CAAL,EADR,EAEF/N,aAFE,CAEYnE,SAFZ,EAGFuE,sBAHE,CAGqB,KAAKC,kBAH1B,EAIFG,QAJE,CAIO,KAAKzB,IAJZ,EAKFuB,iBALE,CAKgB,KAAKC,aALrB,EAMFL,kBANE,CAMiB,KAAK0M,cANtB,EAOFlM,kBAPE,CAOiB,KAAKqL,YAPtB,EAQF/K,qBARE,CAQoB,KAAKgN,uBARzB,CAAP;EASH;EACD;;;EACAH,uBAAuB,GAAG;IACtB,MAAMtV,QAAQ,GAAG,KAAK4T,QAAL,CACZnN,QADY,GAEZ0J,mBAFY,CAEQ,KAAKqF,2CAAL,EAFR,CAAjB;;IAGA,KAAKlC,uBAAL,CAA6BtT,QAA7B;;IACA,OAAOA,QAAP;EACH;;EACDwV,2CAA2C,GAAG;IAC1C,IAAI,KAAKpa,MAAL,YAAuB2X,gBAA3B,EAA6C;MACzC,OAAO,KAAK3X,MAAL,CAAY4X,UAAnB;IACH,CAFD,MAGK;MACD,OAAO,KAAK5X,MAAZ;IACH;EACJ;EACD;;;EACA2Z,cAAc,GAAG;IACb,IAAI,CAAC,KAAKle,WAAV,EAAuB;MACnB,KAAKoe,cAAL;IACH,CAFD,MAGK;MACD;MACA,KAAKpe,WAAL,CAAiBgJ,SAAjB,GAA6BjF,WAA7B,GAA2C,KAAKA,WAAhD;IACH;;IACD,IAAI,CAAC,KAAK/D,WAAL,CAAiBC,WAAjB,EAAL,EAAqC;MACjC,KAAKD,WAAL,CAAiBpC,MAAjB,CAAwB,KAAKkgB,eAA7B;IACH;;IACD,IAAI,KAAK/Z,WAAT,EAAsB;MAClB,KAAKqZ,qBAAL,GAA6B,KAAKpd,WAAL,CAAiB2I,aAAjB,GAAiC5H,SAAjC,CAA2CuF,KAAK,IAAI;QAC7E,KAAKqC,aAAL,CAAmB2V,IAAnB,CAAwBhY,KAAxB;MACH,CAF4B,CAA7B;IAGH,CAJD,MAKK;MACD,KAAK8W,qBAAL,CAA2Bhc,WAA3B;IACH;;IACD,KAAKmc,qBAAL,CAA2Bnc,WAA3B,GAnBa,CAoBb;IACA;;;IACA,IAAI,KAAKuc,cAAL,CAAoBtJ,SAApB,CAA8BlJ,MAA9B,GAAuC,CAA3C,EAA8C;MAC1C,KAAKoS,qBAAL,GAA6B,KAAKf,SAAL,CAAe9O,eAAf,CACxBlN,IADwB,CACnBjE,SAAS,CAAC,MAAM,KAAKohB,cAAL,CAAoBtJ,SAApB,CAA8BlJ,MAA9B,GAAuC,CAA9C,CADU,EAExBpK,SAFwB,CAEd6O,QAAQ,IAAI;QACvB,KAAK+N,cAAL,CAAoBW,IAApB,CAAyB1O,QAAzB;;QACA,IAAI,KAAK+N,cAAL,CAAoBtJ,SAApB,CAA8BlJ,MAA9B,KAAyC,CAA7C,EAAgD;UAC5C,KAAKoS,qBAAL,CAA2Bnc,WAA3B;QACH;MACJ,CAP4B,CAA7B;IAQH;EACJ;EACD;;;EACA+c,cAAc,GAAG;IACb,IAAI,KAAKne,WAAT,EAAsB;MAClB,KAAKA,WAAL,CAAiBG,MAAjB;IACH;;IACD,KAAKid,qBAAL,CAA2Bhc,WAA3B;;IACA,KAAKmc,qBAAL,CAA2Bnc,WAA3B;EACH;;AA5PqB;;AA8P1Bmb,mBAAmB,CAACnZ,IAApB;EAAA,iBAAqHmZ,mBAArH,EArhF6GvhB,EAqhF7G,mBAA0J0f,OAA1J,GArhF6G1f,EAqhF7G,mBAA8KA,EAAE,CAAC6jB,WAAjL,GArhF6G7jB,EAqhF7G,mBAAyMA,EAAE,CAAC8jB,gBAA5M,GArhF6G9jB,EAqhF7G,mBAAyOihB,qCAAzO,GArhF6GjhB,EAqhF7G,mBAA2RwB,EAAE,CAACsf,cAA9R;AAAA;;AACAS,mBAAmB,CAACH,IAApB,kBAthF6GphB,EAshF7G;EAAA,MAAyGuhB,mBAAzG;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;EAAA;EAAA,WAthF6GvhB,EAshF7G;AAAA;;AACA;EAAA,mDAvhF6GA,EAuhF7G,mBAAgGuhB,mBAAhG,EAAiI,CAAC;IACtHhZ,IAAI,EAAE/H,SADgH;IAEtHgI,IAAI,EAAE,CAAC;MACCqO,QAAQ,EAAE,qEADX;MAECwK,QAAQ,EAAE,qBAFX;MAGCC,UAAU,EAAE;IAHb,CAAD;EAFgH,CAAD,CAAjI,EAO4B,YAAY;IAChC,OAAO,CAAC;MAAE/Y,IAAI,EAAEmX;IAAR,CAAD,EAAoB;MAAEnX,IAAI,EAAEvI,EAAE,CAAC6jB;IAAX,CAApB,EAA8C;MAAEtb,IAAI,EAAEvI,EAAE,CAAC8jB;IAAX,CAA9C,EAA6E;MAAEvb,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACpGJ,IAAI,EAAErI,MAD8F;QAEpGsI,IAAI,EAAE,CAACyY,qCAAD;MAF8F,CAAD;IAA/B,CAA7E,EAGW;MAAE1Y,IAAI,EAAE/G,EAAE,CAACsf,cAAX;MAA2BnY,UAAU,EAAE,CAAC;QAC1CJ,IAAI,EAAEnI;MADoC,CAAD;IAAvC,CAHX,CAAP;EAMH,CAdL,EAcuB;IAAEmJ,MAAM,EAAE,CAAC;MAClBhB,IAAI,EAAE7H,KADY;MAElB8H,IAAI,EAAE,CAAC,2BAAD;IAFY,CAAD,CAAV;IAGPiJ,SAAS,EAAE,CAAC;MACZlJ,IAAI,EAAE7H,KADM;MAEZ8H,IAAI,EAAE,CAAC,8BAAD;IAFM,CAAD,CAHJ;IAMPuD,gBAAgB,EAAE,CAAC;MACnBxD,IAAI,EAAE7H,KADa;MAEnB8H,IAAI,EAAE,CAAC,qCAAD;IAFa,CAAD,CANX;IASPiB,OAAO,EAAE,CAAC;MACVlB,IAAI,EAAE7H,KADI;MAEV8H,IAAI,EAAE,CAAC,4BAAD;IAFI,CAAD,CATF;IAYPkB,OAAO,EAAE,CAAC;MACVnB,IAAI,EAAE7H,KADI;MAEV8H,IAAI,EAAE,CAAC,4BAAD;IAFI,CAAD,CAZF;IAePjE,KAAK,EAAE,CAAC;MACRgE,IAAI,EAAE7H,KADE;MAER8H,IAAI,EAAE,CAAC,0BAAD;IAFE,CAAD,CAfA;IAkBPnE,MAAM,EAAE,CAAC;MACTkE,IAAI,EAAE7H,KADG;MAET8H,IAAI,EAAE,CAAC,2BAAD;IAFG,CAAD,CAlBD;IAqBPwG,QAAQ,EAAE,CAAC;MACXzG,IAAI,EAAE7H,KADK;MAEX8H,IAAI,EAAE,CAAC,6BAAD;IAFK,CAAD,CArBH;IAwBPyG,SAAS,EAAE,CAAC;MACZ1G,IAAI,EAAE7H,KADM;MAEZ8H,IAAI,EAAE,CAAC,8BAAD;IAFM,CAAD,CAxBJ;IA2BPQ,aAAa,EAAE,CAAC;MAChBT,IAAI,EAAE7H,KADU;MAEhB8H,IAAI,EAAE,CAAC,kCAAD;IAFU,CAAD,CA3BR;IA8BPM,UAAU,EAAE,CAAC;MACbP,IAAI,EAAE7H,KADO;MAEb8H,IAAI,EAAE,CAAC,+BAAD;IAFO,CAAD,CA9BL;IAiCPga,cAAc,EAAE,CAAC;MACjBja,IAAI,EAAE7H,KADW;MAEjB8H,IAAI,EAAE,CAAC,mCAAD;IAFW,CAAD,CAjCT;IAoCPK,cAAc,EAAE,CAAC;MACjBN,IAAI,EAAE7H,KADW;MAEjB8H,IAAI,EAAE,CAAC,mCAAD;IAFW,CAAD,CApCT;IAuCPia,IAAI,EAAE,CAAC;MACPla,IAAI,EAAE7H,KADC;MAEP8H,IAAI,EAAE,CAAC,yBAAD;IAFC,CAAD,CAvCC;IA0CPka,YAAY,EAAE,CAAC;MACfna,IAAI,EAAE7H,KADS;MAEf8H,IAAI,EAAE,CAAC,iCAAD;IAFS,CAAD,CA1CP;IA6CPob,uBAAuB,EAAE,CAAC;MAC1Brb,IAAI,EAAE7H,KADoB;MAE1B8H,IAAI,EAAE,CAAC,sCAAD;IAFoB,CAAD,CA7ClB;IAgDPO,WAAW,EAAE,CAAC;MACdR,IAAI,EAAE7H,KADQ;MAEd8H,IAAI,EAAE,CAAC,gCAAD;IAFQ,CAAD,CAhDN;IAmDPmZ,YAAY,EAAE,CAAC;MACfpZ,IAAI,EAAE7H,KADS;MAEf8H,IAAI,EAAE,CAAC,iCAAD;IAFS,CAAD,CAnDP;IAsDPyN,kBAAkB,EAAE,CAAC;MACrB1N,IAAI,EAAE7H,KADe;MAErB8H,IAAI,EAAE,CAAC,uCAAD;IAFe,CAAD,CAtDb;IAyDP2N,aAAa,EAAE,CAAC;MAChB5N,IAAI,EAAE7H,KADU;MAEhB8H,IAAI,EAAE,CAAC,kCAAD;IAFU,CAAD,CAzDR;IA4DPmM,IAAI,EAAE,CAAC;MACPpM,IAAI,EAAE7H,KADC;MAEP8H,IAAI,EAAE,CAAC,yBAAD;IAFC,CAAD,CA5DC;IA+DPmF,aAAa,EAAE,CAAC;MAChBpF,IAAI,EAAE5H;IADU,CAAD,CA/DR;IAiEPgiB,cAAc,EAAE,CAAC;MACjBpa,IAAI,EAAE5H;IADW,CAAD,CAjET;IAmEPiC,MAAM,EAAE,CAAC;MACT2F,IAAI,EAAE5H;IADG,CAAD,CAnED;IAqEPwE,MAAM,EAAE,CAAC;MACToD,IAAI,EAAE5H;IADG,CAAD,CArED;IAuEPiiB,cAAc,EAAE,CAAC;MACjBra,IAAI,EAAE5H;IADW,CAAD,CAvET;IAyEPkiB,mBAAmB,EAAE,CAAC;MACtBta,IAAI,EAAE5H;IADgB,CAAD;EAzEd,CAdvB;AAAA;AA0FA;;;AACA,SAASojB,sDAAT,CAAgEva,OAAhE,EAAyE;EACrE,OAAO,MAAMA,OAAO,CAACmW,gBAAR,CAAyBxX,UAAzB,EAAb;AACH;AACD;;;AACA,MAAM6b,8CAA8C,GAAG;EACnDC,OAAO,EAAEhD,qCAD0C;EAEnDiD,IAAI,EAAE,CAACxE,OAAD,CAF6C;EAGnDyE,UAAU,EAAEJ;AAHuC,CAAvD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMK,aAAN,CAAoB;;AAEpBA,aAAa,CAAChc,IAAd;EAAA,iBAA+Ggc,aAA/G;AAAA;;AACAA,aAAa,CAACC,IAAd,kBAtoF6GrkB,EAsoF7G;EAAA,MAAgHokB;AAAhH;AACAA,aAAa,CAACE,IAAd,kBAvoF6GtkB,EAuoF7G;EAAA,WAA0I,CAAC0f,OAAD,EAAUsE,8CAAV,CAA1I;EAAA,UAA+MviB,UAA/M,EAA2NG,YAA3N,EAAyOlC,eAAzO,EAA0PA,eAA1P;AAAA;;AACA;EAAA,mDAxoF6GM,EAwoF7G,mBAAgGokB,aAAhG,EAA2H,CAAC;IAChH7b,IAAI,EAAE3H,QAD0G;IAEhH4H,IAAI,EAAE,CAAC;MACC+b,OAAO,EAAE,CAAC9iB,UAAD,EAAaG,YAAb,EAA2BlC,eAA3B,EAA4C6hB,mBAA5C,EAAiEL,gBAAjE,CADV;MAECsD,OAAO,EAAE,CAACjD,mBAAD,EAAsBL,gBAAtB,EAAwCxhB,eAAxC,CAFV;MAGC+kB,SAAS,EAAE,CAAC/E,OAAD,EAAUsE,8CAAV;IAHZ,CAAD;EAF0G,CAAD,CAA3H;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMU,0BAAN,SAAyCjU,gBAAzC,CAA0D;EACtDrO,WAAW,CAACO,SAAD,EAAYgiB,QAAZ,EAAsB;IAC7B,MAAMhiB,SAAN,EAAiBgiB,QAAjB;EACH;;EACDhU,WAAW,GAAG;IACV,MAAMA,WAAN;;IACA,IAAI,KAAKiU,oBAAL,IAA6B,KAAKC,mBAAtC,EAA2D;MACvD,KAAKliB,SAAL,CAAe4N,mBAAf,CAAmC,KAAKqU,oBAAxC,EAA8D,KAAKC,mBAAnE;IACH;EACJ;;EACD/T,gBAAgB,GAAG;IACf,MAAMA,gBAAN;;IACA,KAAKgU,gCAAL;;IACA,KAAKC,4BAAL,CAAkC,MAAM,KAAKD,gCAAL,EAAxC;EACH;;EACDA,gCAAgC,GAAG;IAC/B,IAAI,CAAC,KAAKlU,iBAAV,EAA6B;MACzB;IACH;;IACD,MAAMoU,iBAAiB,GAAG,KAAKC,oBAAL,EAA1B;IACA,MAAM9G,MAAM,GAAG6G,iBAAiB,IAAI,KAAKriB,SAAL,CAAea,IAAnD;IACA2a,MAAM,CAAC9R,WAAP,CAAmB,KAAKuE,iBAAxB;EACH;;EACDmU,4BAA4B,CAACG,EAAD,EAAK;IAC7B,MAAMC,SAAS,GAAG,KAAKC,aAAL,EAAlB;;IACA,IAAID,SAAJ,EAAe;MACX,IAAI,KAAKN,mBAAT,EAA8B;QAC1B,KAAKliB,SAAL,CAAe4N,mBAAf,CAAmC4U,SAAnC,EAA8C,KAAKN,mBAAnD;MACH;;MACD,KAAKliB,SAAL,CAAe8M,gBAAf,CAAgC0V,SAAhC,EAA2CD,EAA3C;;MACA,KAAKL,mBAAL,GAA2BK,EAA3B;IACH;EACJ;;EACDE,aAAa,GAAG;IACZ,IAAI,CAAC,KAAKR,oBAAV,EAAgC;MAC5B,MAAMjiB,SAAS,GAAG,KAAKA,SAAvB;;MACA,IAAIA,SAAS,CAAC0iB,iBAAd,EAAiC;QAC7B,KAAKT,oBAAL,GAA4B,kBAA5B;MACH,CAFD,MAGK,IAAIjiB,SAAS,CAAC2iB,uBAAd,EAAuC;QACxC,KAAKV,oBAAL,GAA4B,wBAA5B;MACH,CAFI,MAGA,IAAIjiB,SAAS,CAAC4iB,oBAAd,EAAoC;QACrC,KAAKX,oBAAL,GAA4B,qBAA5B;MACH,CAFI,MAGA,IAAIjiB,SAAS,CAAC6iB,mBAAd,EAAmC;QACpC,KAAKZ,oBAAL,GAA4B,oBAA5B;MACH;IACJ;;IACD,OAAO,KAAKA,oBAAZ;EACH;EACD;AACJ;AACA;AACA;;;EACIK,oBAAoB,GAAG;IACnB,MAAMtiB,SAAS,GAAG,KAAKA,SAAvB;IACA,OAAQA,SAAS,CAACqiB,iBAAV,IACJriB,SAAS,CAAC8iB,uBADN,IAEJ9iB,SAAS,CAAC+iB,oBAFN,IAGJ/iB,SAAS,CAACgjB,mBAHN,IAIJ,IAJJ;EAKH;;AA9DqD;;AAgE1DjB,0BAA0B,CAACtc,IAA3B;EAAA,iBAA4Hsc,0BAA5H,EAvuF6G1kB,EAuuF7G,UAAwKD,QAAxK,GAvuF6GC,EAuuF7G,UAA6LgB,IAAI,CAACqQ,QAAlM;AAAA;;AACAqT,0BAA0B,CAACpc,KAA3B,kBAxuF6GtI,EAwuF7G;EAAA,OAAgI0kB,0BAAhI;EAAA,SAAgIA,0BAAhI;EAAA,YAAwK;AAAxK;;AACA;EAAA,mDAzuF6G1kB,EAyuF7G,mBAAgG0kB,0BAAhG,EAAwI,CAAC;IAC7Hnc,IAAI,EAAEtI,UADuH;IAE7HuI,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAd,CAAD;EAFuH,CAAD,CAAxI,EAG4B,YAAY;IAChC,OAAO,CAAC;MAAEF,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACxBJ,IAAI,EAAErI,MADkB;QAExBsI,IAAI,EAAE,CAACzI,QAAD;MAFkB,CAAD;IAA/B,CAAD,EAGW;MAAEwI,IAAI,EAAEvH,IAAI,CAACqQ;IAAb,CAHX,CAAP;EAIH,CARL;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASlP,mBAAT,EAA8Bof,mBAA9B,EAAmDL,gBAAnD,EAAqExc,mBAArE,EAA0FsF,8BAA1F,EAA0HV,sBAA1H,EAAkJkI,iCAAlJ,EAAqLkT,0BAArL,EAAiN5H,sBAAjN,EAAyOzW,kBAAzO,EAA6PqZ,OAA7P,EAAsQ9W,aAAtQ,EAAqR6H,gBAArR,EAAuSkO,yBAAvS,EAAkUyF,aAAlU,EAAiVrF,6BAAjV,EAAgXX,sBAAhX,EAAwY7T,UAAxY,EAAoZhD,wBAApZ,EAA8aqV,oCAA9a,EAAodD,iCAApd,EAAuf7U,qBAAvf,EAA8gBiC,mBAA9gB,EAAmiBO,0BAAniB,EAA+jBH,wBAA/jB"},"metadata":{},"sourceType":"module"}